 .data # Program at 3.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
4600:CLASS_Object: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
4620:CLASS_String: # ClassDecl at 0.0
  .word fcn_hashCode_String # MethodDeclNonVoid at 0.0
  .word fcn_equals_String # MethodDeclNonVoid at 0.0
  .word fcn_toString_String # MethodDeclNonVoid at 0.0
  .word fcn_concat_String # MethodDeclNonVoid at 0.0
  .word fcn_substring_String # MethodDeclNonVoid at 0.0
  .word fcn_length_String # MethodDeclNonVoid at 0.0
  .word fcn_charAt_String # MethodDeclNonVoid at 0.0
  .word fcn_compareTo_String # MethodDeclNonVoid at 0.0
4652:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
4656:CLASS_Lib: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
# ****** class Toast ****** # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 212 # 'T' with high bit set # ClassDecl at 28.7
  .byte 111 # 'o' # ClassDecl at 28.7
  .byte 97 # 'a' # ClassDecl at 28.7
  .byte 115 # 's' # ClassDecl at 28.7
  .byte 116 # 't' # ClassDecl at 28.7
4708:CLASS_Toast: # ClassDecl at 28.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_run_Toast # MethodDeclVoid at 30.17
# ****** class Jam ****** # ClassDecl at 9.7
  .byte 0 # ClassDecl at 9.7
  .byte 202 # 'J' with high bit set # ClassDecl at 9.7
  .byte 97 # 'a' # ClassDecl at 9.7
  .byte 109 # 'm' # ClassDecl at 9.7
4760:CLASS_Jam: # ClassDecl at 9.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_run_Toast # MethodDeclVoid at 30.17
  .word fcn_test_Jam # MethodDeclVoid at 12.17
4812:END_CLASS_Jam: # ClassDecl at 9.7
4812:END_CLASS_Toast: # ClassDecl at 28.7
4812:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
4820:CLASS_RunMain: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
4832:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Main ****** # ClassDecl at 3.7
  .byte 205 # 'M' with high bit set # ClassDecl at 3.7
  .byte 97 # 'a' # ClassDecl at 3.7
  .byte 105 # 'i' # ClassDecl at 3.7
  .byte 110 # 'n' # ClassDecl at 3.7
4836:CLASS_Main: # ClassDecl at 3.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_main_Main # MethodDeclVoid at 4.17
4852:END_CLASS_Main: # ClassDecl at 3.7
4852:dataArrayVTableStart: # IntegerType at 0.0
4852:END_CLASS_Object: # ClassDecl at 0.0
  .byte 102 # StringLiteral at 14.13
  .byte 117 # StringLiteral at 14.13
  .byte 110 # StringLiteral at 14.13
  .byte 0 # StringLiteral at 14.13
  .word CLASS_String # StringLiteral at 14.13
  .word 2 # StringLiteral at 14.13
  .word -3 # StringLiteral at 14.13
4868:strLit_16: # StringLiteral at 14.13
  .byte 32 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .word CLASS_String # StringLiteral at 20.22
  .word 2 # StringLiteral at 20.22
  .word -1 # StringLiteral at 20.22
4884:strLit_51: # StringLiteral at 20.22
  .byte 10 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .word CLASS_String # StringLiteral at 22.18
  .word 2 # StringLiteral at 22.18
  .word -1 # StringLiteral at 22.18
4900:strLit_59: # StringLiteral at 22.18
  .byte 10 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .word CLASS_String # StringLiteral at 36.23
  .word 2 # StringLiteral at 36.23
  .word -1 # StringLiteral at 36.23
4916:strLit_100: # StringLiteral at 36.23
.text
.globl main
0:main:
0#  jal vm_init
4#li $s6,2
8#li $s7,0
12#jal newObject
16#la $t0,CLASS_Main
20#sw $t0,-12($s7)
24#lw $s2,($sp)
28#addu $sp,$sp,4
32#jal fcn_main_Main
36#li $v0,10
40#syscall
44:fcn_main_Main:
44#  subu $sp,$sp,4
48#  sw $ra,($sp)
52#  li $s6,3
56#  li $s7,1
60#  jal newObject
64#  la $t0,CLASS_Jam
68#  sw $t0,-12($s7)
72#  lw $t0,0($sp)
76#  sw $s2,0($sp)
80#  move $s2, $t0
84#  lw $t0, -12($s2)
88#  lw $t0,44($t0)
92#  jalr $t0
96#  addu $sp,$sp,0
100#  lw $s2,($sp)
104#  addu $sp,$sp,4
108#  subu $sp,$sp,4
112#  sw $t0,($sp)
116#  addu $sp,$sp,4
120#  addu $sp,$sp,0
124#  addu $sp,$sp,0
128#  lw $ra,($sp)
132#  addu $sp,$sp,4
136#  jr $ra
140:fcn_test_Jam:
140#  subu $sp,$sp,4
144#  sw $ra,($sp)
148#  lw $t0,32($sp)
152#  subu $sp,$sp,8
156#  sw $s5,4($sp)
160#  sw $t0,($sp)
164#  li $t0,3
168#  subu $sp,$sp,8
172#  sw $s5,4($sp)
176#  sw $t0,($sp)
180#  lw $t0,($sp)
184#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 13.11; stackHeight = 20
188#  sw $t0,-20($sp)
192#  lw $t0,20($sp)
196#  subu $sp,$sp,4
200#  sw $t0,($sp)
204#  la $t0, strLit_16
208#  subu $sp,$sp,4
212#  sw $t0,($sp)
216#  lw $t0,($sp)
220#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 14.11; stackHeight = 24
224#  sw $t0,0($sp)
228#  li $t0,0
232#  subu $sp,$sp,8
236#  sw $s5,4($sp)
240#  sw $t0,($sp)
244#  lw $0,($sp)
248:while_cond_57:
248#  lw $t0,0($sp)
252#  subu $sp,$sp,8
256#  sw $s5,4($sp)
260#  sw $t0,($sp)
264#  lw $t0,32($sp)
268#  subu $sp,$sp,8
272#  sw $s5,4($sp)
276#  sw $t0,($sp)
280#  lw $t2,($sp)
284#  addu $sp,$sp,8
288#  lw $t1,($sp)
292#  addu $sp,$sp,8
296#slt $t0,$t1,$t2
300#  subu $sp,$sp,4
304#  sw $t0,($sp)
308#  lw $t0,($sp)
312#  addu $sp,$sp,4
316#  beq $t0, $0,break_target_57
320#  li $t0,1
324#  subu $sp,$sp,4
328#  sw $t0,($sp)
332#  lw $0,($sp)
336#  li $t0,78
340#  subu $sp,$sp,8
344#  sw $s5,4($sp)
348#  sw $t0,($sp)
352#  lw $0,($sp)
356#  lw $t0,8($sp)
360#  subu $sp,$sp,4
364#  sw $t0,($sp)
368#  lw $t0,4($sp)
372#  subu $sp,$sp,8
376#  sw $s5,4($sp)
380#  sw $t0,($sp)
384#  li $t0,0
388#  subu $sp,$sp,8
392#  sw $s5,4($sp)
396#  sw $t0,($sp)
400#  lw $t2,($sp)
404#  addu $sp,$sp,8
408#  lw $t1,($sp)
412#  addu $sp,$sp,8
416#  sgt $t0,$t1,$t2
420#  subu $sp,$sp,4
424#  sw $t0,($sp)
428#  lw $t0,16($sp)
432#  subu $sp,$sp,4
436#  sw $t0,($sp)
440#  lw $t0,($sp)
444#  beq $t0,$0,skip_43
448#  lw $t0,($sp)
452#  addu $sp,$sp,4
456:skip_43: # And at 18.23; stackHeight = 52
456#  lw $t0,($sp)
460#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 18.15; stackHeight = 48
464#  sw $t0,12($sp)
468#  subu $sp,$sp,4
472#  sw $s2,($sp)
476#  lw $t0,20($sp)
480#  subu $sp,$sp,8
484#  sw $s5,4($sp)
488#  sw $t0,($sp)
492#  lw $t0,16($sp)
496#  subu $sp,$sp,8
500#  sw $s5,4($sp)
504#  sw $t0,($sp)
508#  lw $t2,($sp)
512#  addu $sp,$sp,8
516#  lw $t1,($sp)
520#  addu $sp,$sp,8
524#  addu $t0,$t1,$t2
528#  subu $sp,$sp,8
532#  sw $s5,4($sp)
536#  sw $t0,($sp)
540#  lw $t0,8($sp)
544#  sw $s2,8($sp)
548#  move $s2, $t0
552#  lw $t0, -12($s2)
556#  lw $t0,32($t0)
560#  jalr $t0
564#  addu $sp,$sp,8
568#  lw $s2,($sp)
572#  addu $sp,$sp,4
576#  subu $sp,$sp,4
580#  sw $t0,($sp)
584#  addu $sp,$sp,4
588#  subu $sp,$sp,4
592#  sw $s2,($sp)
596#  la $t0, strLit_51
600#  subu $sp,$sp,4
604#  sw $t0,($sp)
608#  lw $t0,4($sp)
612#  sw $s2,4($sp)
616#  move $s2, $t0
620#  lw $t0, -12($s2)
624#  lw $t0,24($t0)
628#  jalr $t0
632#  addu $sp,$sp,4
636#  lw $s2,($sp)
640#  addu $sp,$sp,4
644#  subu $sp,$sp,4
648#  sw $t0,($sp)
652#  addu $sp,$sp,4
656#  lw $t0,16($sp)
660#  subu $sp,$sp,8
664#  sw $s5,4($sp)
668#  sw $t0,($sp)
672#  lw $t0,24($sp)
676#  subu $sp,$sp,8
680#  sw $s5,4($sp)
684#  sw $t0,($sp)
688#  li $t0,1
692#  subu $sp,$sp,8
696#  sw $s5,4($sp)
700#  sw $t0,($sp)
704#  lw $t2,($sp)
708#  addu $sp,$sp,8
712#  lw $t1,($sp)
716#  addu $sp,$sp,8
720#  addu $t0,$t1,$t2
724#  subu $sp,$sp,8
728#  sw $s5,4($sp)
732#  sw $t0,($sp)
736#  lw $t0,($sp)
740#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 15.32; stackHeight = 56
744#  sw $t0,24($sp)
748#  j while_cond_57
752:break_target_57:
752#  subu $sp,$sp,4
756#  sw $s2,($sp)
760#  la $t0, strLit_59
764#  subu $sp,$sp,4
768#  sw $t0,($sp)
772#  lw $t0,4($sp)
776#  sw $s2,4($sp)
780#  move $s2, $t0
784#  lw $t0, -12($s2)
788#  lw $t0,24($t0)
792#  jalr $t0
796#  addu $sp,$sp,4
800#  lw $s2,($sp)
804#  addu $sp,$sp,4
808#  subu $sp,$sp,4
812#  sw $t0,($sp)
816#  addu $sp,$sp,4
820#  lw $t0,76($sp)
824#  subu $sp,$sp,8
828#  sw $s5,4($sp)
832#  sw $t0,($sp)
836#  lw $t0,84($sp)
840#  subu $sp,$sp,8
844#  sw $s5,4($sp)
848#  sw $t0,($sp)
852#  li $t0,1
856#  subu $sp,$sp,8
860#  sw $s5,4($sp)
864#  sw $t0,($sp)
868#  lw $t2,($sp)
872#  addu $sp,$sp,8
876#  lw $t1,($sp)
880#  addu $sp,$sp,8
884#  addu $t0,$t1,$t2
888#  subu $sp,$sp,8
892#  sw $s5,4($sp)
896#  sw $t0,($sp)
900#  lw $t0,($sp)
904#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 23.9; stackHeight = 64
908#  sw $t0,-20($sp)
912#  lw $t0,80($sp)
916#  subu $sp,$sp,8
920#  sw $s5,4($sp)
924#  sw $t0,($sp)
928#  lw $t0,88($sp)
932#  subu $sp,$sp,8
936#  sw $s5,4($sp)
940#  sw $t0,($sp)
944#  li $t0,1
948#  subu $sp,$sp,8
952#  sw $s5,4($sp)
956#  sw $t0,($sp)
960#  lw $t2,($sp)
964#  addu $sp,$sp,8
968#  lw $t1,($sp)
972#  addu $sp,$sp,8
976#  addu $t0,$t1,$t2
980#  subu $sp,$sp,8
984#  sw $s5,4($sp)
988#  sw $t0,($sp)
992#  lw $t0,($sp)
996#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 24.9; stackHeight = 72
1000#  sw $t0,-16($sp)
1004#  addu $sp,$sp,60
1008#  addu $sp,$sp,0
1012#  lw $ra,($sp)
1016#  addu $sp,$sp,4
1020#  jr $ra
1024:fcn_run_Toast:
1024#  subu $sp,$sp,4
1028#  sw $ra,($sp)
1032#  li $s6,3
1036#  li $s7,1
1040#  jal newObject
1044#  la $t0,CLASS_Jam
1048#  sw $t0,-12($s7)
1052#  lw $0,($sp)
1056#  lw $t0,0($sp)
1060#  subu $sp,$sp,4
1064#  sw $t0,($sp)
1068#  li $t0,33
1072#  subu $sp,$sp,8
1076#  sw $s5,4($sp)
1080#  sw $t0,($sp)
1084#  lw $t0,8($sp)
1088#  sw $s2,8($sp)
1092#  move $s2, $t0
1096#  lw $t0, -12($s2)
1100#  lw $t0,48($t0)
1104#  jalr $t0
1108#  addu $sp,$sp,8
1112#  lw $s2,($sp)
1116#  addu $sp,$sp,4
1120#  subu $sp,$sp,4
1124#  sw $t0,($sp)
1128#  addu $sp,$sp,4
1132#  lw $t0,24($sp)
1136#  subu $sp,$sp,8
1140#  sw $s5,4($sp)
1144#  sw $t0,($sp)
1148#  lw $t0,8($sp)
1152#  subu $sp,$sp,4
1156#  sw $t0,($sp)
1160#  lw $t0,($sp)
1164#  addu $sp,$sp,8
1168#  beq $t0,$0,nullPtrException
1172#lw $t0,-16($s2)
1176#  subu $sp,$sp,8
1180#  sw $s5,4($sp)
1184#  sw $t0,($sp)
1188#  lw $t0,($sp)
1192#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 33.11; stackHeight = 12
1196#  sw $t0,-16($sp)
1200#  lw $t0,28($sp)
1204#  subu $sp,$sp,8
1208#  sw $s5,4($sp)
1212#  sw $t0,($sp)
1216#  lw $t0,36($sp)
1220#  subu $sp,$sp,8
1224#  sw $s5,4($sp)
1228#  sw $t0,($sp)
1232#  li $t0,1
1236#  subu $sp,$sp,8
1240#  sw $s5,4($sp)
1244#  sw $t0,($sp)
1248#  lw $t2,($sp)
1252#  addu $sp,$sp,8
1256#  lw $t1,($sp)
1260#  addu $sp,$sp,8
1264#  addu $t0,$t1,$t2
1268#  subu $sp,$sp,8
1272#  sw $s5,4($sp)
1276#  sw $t0,($sp)
1280#  lw $t0,($sp)
1284#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 34.9; stackHeight = 20
1288#  sw $t0,-16($sp)
1292#  subu $sp,$sp,4
1296#  sw $s2,($sp)
1300#  lw $t0,40($sp)
1304#  subu $sp,$sp,8
1308#  sw $s5,4($sp)
1312#  sw $t0,($sp)
1316#  lw $t0,8($sp)
1320#  sw $s2,8($sp)
1324#  move $s2, $t0
1328#  lw $t0, -12($s2)
1332#  lw $t0,32($t0)
1336#  jalr $t0
1340#  addu $sp,$sp,8
1344#  lw $s2,($sp)
1348#  addu $sp,$sp,4
1352#  subu $sp,$sp,4
1356#  sw $t0,($sp)
1360#  addu $sp,$sp,4
1364#  subu $sp,$sp,4
1368#  sw $s2,($sp)
1372#  la $t0, strLit_100
1376#  subu $sp,$sp,4
1380#  sw $t0,($sp)
1384#  lw $t0,4($sp)
1388#  sw $s2,4($sp)
1392#  move $s2, $t0
1396#  lw $t0, -12($s2)
1400#  lw $t0,24($t0)
1404#  jalr $t0
1408#  addu $sp,$sp,4
1412#  lw $s2,($sp)
1416#  addu $sp,$sp,4
1420#  subu $sp,$sp,4
1424#  sw $t0,($sp)
1428#  addu $sp,$sp,4
1432#  addu $sp,$sp,16
1436#  addu $sp,$sp,0
1440#  lw $ra,($sp)
1444#  addu $sp,$sp,4
1448#  jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1452:fcn_hashCode_Object:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
1452#    lw $t0,-8($s2) # get word with hash bits from this
1456#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
1460#    addu $t0,$t1

1464#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1468:fcn_equals_Object:
1468#    move $t0,$s2 # first pointer (this)
1472#    lw $t1,($sp) # second pointer
1476#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
1477##...subu $at,$t0,$t1
1481##...sltiu $t0,$at,1

1484#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1488:fcn_hashCode_String:
1488#    move $t0,$s2 # put this pointer in t0

1492#    li $t2,0 # current hash value
1496#    lw $t1,-4($t0) # negative of number of characters in string
1500#    beq $t1,$zero,done_hashCode_String # if zero length => done
1504#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
1508#    and $t0,0xfffffffc # adjust for padding
1509##...lui $at,65535
1513##...ori $at,$at,0xfffc
1517##...and $t0,$t0,$at
1520#    subu $t1,$t0,$t1 # address at end of string +12
1524:loop_hashCode_String:    
1524#    sll $t4,$t2,5 # multiply by 32
1528#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
1532#    lbu $t3,-12($t0) # current character
1536#    addu $t2,$t3 # add in current character
1540#    addu $t0,1 # go to next character's address
1544#    bne $t0,$t1,loop_hashCode_String # loop back if more
1548:done_hashCode_String:    

    # push int on stack
1548#    move $t0, $t2 # put $t2 in return slot
1552#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
1556:fcn_toString_Object:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
1556#    subu $sp,4
1560#    sw $ra,($sp)
    
    # get hash value
1564#    lw $t2,-12($s2) # vtable address
1568#    lw $t0,($t2) # method address
1572#    jalr $t0
1576#    subu $sp,8 # push result (int in $t0) on stack
1580#    sw $s5,4($sp)
1584#    sw $t0,($sp)

    # compute print-size of hash value
1588#    li $t0, 1
1592#    lw $t1, ($sp)
1596#    srl $t1,$t1,4
1600#    beq $t1,$zero,toString_skip_loop
1604:toString_loop_top:
1604#    addu $t0,1
1608#    srl $t1,$t1,4
1612#    bne $t1,$zero,toString_loop_top
1616:toString_skip_loop:
1616#    subu $sp,8
1620#    sw $s5,4($sp)
1624#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
1628#    lw $t2,-12($s2) # vtable address
1632#    move $t0,$t2
1636:toString_checkTagBit:
1636#    subu $t0,1
1640#    lb $t1,($t0)
1644#    and $t1,0x80
1645##...lui $at,0
1649##...ori $at,$at,0x80
1653##...and $t1,$t1,$at
1656#    beq $t1,$zero,toString_checkTagBit
1660#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
1664#    subu $sp,8
1668#    sw $t1,($sp)
1672#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
1676#    move $s7,$zero # -4 offset header word
1680#    lw $t4,8($sp) # bytes for hash value
1684#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
1688#    addu $t4,8
1692#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
1696#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

1700#    li $t0,CLASS_String # store string vtable address into ...
1704#    sw $t0,-12($s7) # ... -12 offset in object header
1708#    lw $t2,-12($s2) # our object's vtable address
1712#    lw $t5,4($sp) # number characters in prefix
1716#    lw $t1,12($sp) # number of characters in hashcode
1720#    addu $t3,$t1,$t5 # number of characters in string ...
1724#    addu $t3,1 # ... including the '@' character
1728#    subu $t0,$zero,$t3 # store negated length into ...
1732#    sw $t0,-4($s7) # ... -4 offset header word
1736#    lw $t0,-8($s7) # get -8 offset header-word
1740#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
1741##...slt $at,$t0,$zero
1745##...beq $at,$zero,1764
1748#    and $t0,0xff # mask off object's hash value ...
1749##...lui $at,0
1753##...ori $at,$at,0xff
1757##...and $t0,$t0,$at
1760#    sw $t0,-8($s7) # ... and store back into -8 header-word
1764:skipMask_toString:
1764#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
1768#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
1772#    subu $t4,$t2,$t5
1776:toString_copyLoop:    
1776#    lb $t3,($t4)
1780#    and $t3,0x7f # mask off sign bit (in case first word)
1781##...lui $at,0
1785##...ori $at,$at,0x7f
1789##...and $t3,$t3,$at
1792#    sb $t3,-8($t0)
1796#    addu $t4,1
1800#    addu $t0,1
1804#    blt $t4,$t2,toString_copyLoop
1805##...slt $at,$t4,$t2
1809##...bne $at,$zero,1776

    # copy the '@' sign
1812#    li $t3,'@'
1816#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
1820#    addu $t2,$t0,$t1 # address of last byte in string to store +8
1824#    lw $t3,20($sp) # hash code to print
1828:toString_hashCopyLoop:
1828#    and $t4,$t3,0xf
1832#    srl $t3,4
1836#    lb $t4,hexChars($t4)
1840#    sb $t4,-8($t2)
1844#    subu $t2,$t2,1
1848#    bgt $t2,$t0,toString_hashCopyLoop
1849##...slt $at,$t0,$t2
1853##...bne $at,$zero,1828

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
1856#    addu $sp,28
1860#    lw $ra,($sp)
1864#    addu $sp,4
1868#    move $t0, $s7 # return string we created
1872#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1876:fcn_equals_String:
    
    # quick test for obvious false
1876#    lw $t0,($sp) # second parameter
1880#    beq $t0,$zero,goEsFalse # go return false if null
1884#    lw $t1,-12($t0) # vtable pointer
1888#    la $t2,CLASS_String # string vtable pointer
1892#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1896#    subu $sp,12
1900#    sw $ra,8($sp)
1904#    sw $s2,4($sp)
1908#    sw $t0,($sp)
1912#    jal fcn_compareTo_String
1916#    lw $s2, 4($sp) #restore this pointer and pop parameters
1920#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1924#    seq $t0,$t0,$zero
1925##...subu $at,$t0,$zero
1929##...sltiu $t0,$at,1

    # pop return address and return $t0
1932#    lw $ra,($sp)
1936#    addu $sp,4

1940#    jr $ra # return
    
1944:goEsFalse:
    # put 0 in $t0 and return
1944#    li $t0, 0
1948#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1952:fcn_toString_String:
    #we are a string, so return this.
1952#    move $t0, $s2
1956#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1960:fcn_readLine_Lib:
    
1960#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1964#    sw $ra, 4($sp) # save $ra
1968#    move $t1,$sp # save "original" sp

1972:  doRead:

    # read the character
1972#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1976#    subu $t2,$v0,13
1980#    bne $t2,$zero,notReturnRL
1984#    jal readLogicalChar
1988#    subu $t2,$v0,10 # check for newline
1992#    beq $t2,$zero,foundNewLine
1996#    sw $v0,lastCharRead # push back character into queue
2000#    j foundNewLine # go process the line

2004:  notReturnRL:

    # at this point, $v0 has our character

2004#    subu $t0,$v0,10
2008#    beq $t0,$zero,foundNewLine
2012#    blt $v0,$zero,foundEof
2013##...slt $at,$v0,$zero
2017##...bne $at,$zero,2032

    # we have a character, so push it onto stack
2020#    subu $sp,$sp,4
2024#    sw $v0,($sp)

    # loop back up to get next character
2028#    j doRead

2032:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2032#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
2036#    li $s7, 0 # return-value: null
2040#    j rlReturn # return

2044:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
2044#    subu $t0,$t1,$sp # number of chars we read (times 4)
2048#    srl $s6,$t0,2 # number of words on stack with chars
2052#    subu $sp,$sp,4 # push char-count ...
2056#    sw $s6,($sp) # ... onto stack
2060#    addu $t2,$t0,5 # GC tag, incl. for count-word
2064#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
2068#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2072#    srl $s6,$s6,2  # data words in object
2076#    move $s7,$zero # object words in object
2080#    jal newObject  # allocate space
    
    # store header words
2084#    la $t0,CLASS_String
2088#    sw $t0,-12($s7)# store class tag (String) into object
2092#    lw $t2,4($sp) # char-count
2096#    sll $t1,$t2,2 # 4 times number of chars
2100#    subu $t2,$zero,$t2 # negative of char-count
2104#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
2108#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
2112#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
2113##...slt $at,$t0,$zero
2117##...beq $at,$zero,2136
2120#    and $t0,0xff # mask off object's hash value ...
2121##...lui $at,0
2125##...ori $at,$at,0xff
2129##...and $t0,$t0,$at
2132#    sw $t0,-8($s7) # ... and store back into -8 header-word
2136:  skipMask_readLine:

2136#    sll $t0,$t0,2 # data bytes in object
2140#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
2144#    subu $t0,$t0,$t2 # place to store last character (plus 9)
2148#    addu $sp,$sp,8 # pop redundant object-pointer and count
2152#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

2156#    beq $sp,$t1,rlReturn
2160:  charCopyLoop:
2160#    lw $t2,($sp)
2164#    sb $t2,-9($t0)
2168#    addu $sp,$sp,4
2172#    subu $t0,$t0,1
2176#    bne $sp,$t1,charCopyLoop
2180:  rlReturn:

2180#    lw $ra, 4($sp)
2184#    addu $sp, 8   # pop $ra and pointless word off stack
2188#    move $t0, $s7 # return string we allocated in $s7
2192#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
2196:fcn_readInt_Lib:

    # save $ra by pushing onto stack
2196#    subu $sp,$sp,4
2200#    sw $ra,($sp)

2204:  riSkipWhiteLoop:
    # read a character
2204#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
2208#    subu $t0,$v0,32
2212#    bgt $t0,$zero,nonWhite
2213##...slt $at,$zero,$t0
2217##...bne $at,$zero,2260
2220#    beq $t0,$zero,riSkipWhiteLoop # start over if space
2224#    subu $t0,$v0,10
2228#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
2232#    subu $t0,$v0,9
2236#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
2240#    subu $t0,$v0,13
2244#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2248#    subu $t0,$v0,12
2252#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2256#    j badIntegerFormat # illegal integer char: abort program

2260:  nonWhite:
2260#    subu $t0,$v0,'-'
2264#    li $t4,1 # final multiplier
2268#    bne $t0,$zero,helpReadInt # go read
2272#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
2276#    jal readLogicalChar

2280:  helpReadInt:
2280#    li $t2,10
2284#    subu $t1,$v0,'0' # convert digit to 0-9 value
2288#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
2289##...sltu $at,$t1,$t2
2293##...beq $at,$zero,4576
2296#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

2300:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

2300#    jal readLogicalChar # read next character
2304#    subu $t1,$v0,'0' # convert digit to 0-9 value
2308#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
2309##...sltu $at,$t1,$t2
2313##...beq $at,$zero,2332

2316#    mul $t3,$t3,$t2 # multiply old value by 10
2317##...mult $t3,$t2
2321##...mflo $t3
2324#    addu $t3,$t3,$t1 # add in value of new digit
2328#    j digitLoop

2332:  doneDigitLoop:

    # "push back" unused character into queue
2332#    sw $v0,lastCharRead

    # restore return address
2336#    lw $ra,($sp)
2340#    addu $sp, 4

    # multiply by sign and put return value in $t0
2344#    mult $t3,$t4 # multiply to account for poss. minus sign
2348#    mflo $t3
2352#    move $t0, $t3
    
    # return
2356#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
2360:fcn_readChar_Lib:

    # save $ra by pushing onto stack
2360#    subu $sp,$sp,4
2364#    sw $ra,($sp)

      # read the character
2368#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
2372#    lw $ra,($sp)
2376#    addu $sp, 4
2380#    move $t0, $v0

    # return
2384#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
2388:fcn_printStr_Lib:
    # check for null, printing "(null)", if so
2388#    lw $t0,($sp)
2392#    bne $t0,$zero,psNotNull

    # print "(null)"
2396#    la $a0,nullStr
2400#    li $v0,4
2404#    syscall
2408#    j donePrintStr
    
2412:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2412#    subu $t0,$t0,8
2416#    lw $t1,($t0) # number of data words, but needs modification
2420#    blt $t1,$zero,skipPrintStr1
2421##...slt $at,$t1,$zero
2425##...bne $at,$zero,2444
2428#    and $t1,0xff # mask out all but low byte
2429##...lui $at,0
2433##...ori $at,$at,0xff
2437##...and $t1,$t1,$at
2440#    b skipPrintStr2
2444:skipPrintStr1:
2444#    and $t1,0x7ffffff
2445##...lui $at,2047
2449##...ori $at,$at,0xffff
2453##...and $t1,$t1,$at
2456:skipPrintStr2:    
2456#    sll $t1,$t1,2
2460#    subu $t1,$t0,$t1 # first word in string
2464#    lw $t0,4($t0) # negative of string-length
2468#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
2472#    beq $t0,$t1,donePrintStr
2476:  psLoop:
2476#    lb $a0,($t1) # next byte
2480#    li $v0,11 # code for printing char
2484#        syscall # print the char
2488#    addu $t1,$t1,1 # go to next char
2492#    blt $t1,$t0,psLoop
2493##...slt $at,$t1,$t0
2497##...bne $at,$zero,2476

2500:  donePrintStr:
2500#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
2504:fcn_printInt_Lib:
2504#    lw $a0,($sp)

    # print it
2508#    li $v0,1 # code for print-int
2512#    syscall

    # return
2516#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
2520:fcn_printBool_Lib:
    # pop value off stack, along with 'this'
2520#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
2524#    la $a0,falseString
2528#    beq $t0,$zero,skipPB
2532#    la $a0,trueString
2536:  skipPB:
2536#    li $v0,4 # code for print-string
2540#    syscall

    # return
2544#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
2548:fcn_substring_String:

    # save $ra by pushing onto stack
2548#    subu $sp,$sp,4
2552#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
2556#    move $t0,$s2
2560#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
2564#    lw $t0,-4($t0) # negative of string length
2568#    subu $t0,$zero,$t0 # string length
2572#    lw $t1,4($sp) # k
2576#    lw $t2,12($sp) # n
2580#    bgt $zero,$t2,strIndexOutOfBounds
2581##...slt $at,$t2,$zero
2585##...bne $at,$zero,4544
2588#    bgt $t2,$t1,strIndexOutOfBounds
2589##...slt $at,$t1,$t2
2593##...bne $at,$zero,4544
2596#    bgt $t1,$t0,strIndexOutOfBounds
2597##...slt $at,$t0,$t1
2601##...bne $at,$zero,4544

    # allocate memory
2604#    subu $s6,$t1,$t2 # # chars in target-string
2608#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2612#    srl $s6,$s6,2 # convert bytes-count to word-count
2616#    move $s7,$zero # (no object-bytes in string)
2620#    jal newObject

    # store "String" tag in object-type field
2624#    la $t0,CLASS_String
2628#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
2632#    lw $t4,-8($s7) # data words in source string
2636#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
2637##...slt $at,$t4,$zero
2641##...beq $at,$zero,2660
2644#    and $t4,0xff # mask off object's hash value ...
2645##...lui $at,0
2649##...ori $at,$at,0xff
2653##...and $t4,$t4,$at
2656#    sw $t4,-8($s7) # ... and store back into -8 header-word
2660:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
2660#    lw $t1,8($sp) # k
2664#    lw $t2,16($sp) # n
2668#    subu $t0,$t2,$t1 # value to store
2672#    sw $t0,-4($s7) # store value
    
2676#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
2680#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
2684#    lw $t4,-8($t3) # data words in source string
2688#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
2692#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2696#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2700#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2704#    lw $t2,-8($s7)   # data words in target string
2708#    sll $t2,$t2,2    # data bytes in target string
2712#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
2716:  subCopyLoopzz:
2716#    lb $t4,-8($t3)
2720#    sb $t4,-8($t2)
2724#    addu $t2,$t2,1
2728#    addu $t3,$t3,1
2732#    blt $t3,$t1,subCopyLoopzz
2733##...slt $at,$t3,$t1
2737##...bne $at,$zero,2716
    
2740:  doneSubCopyzz:
    # restore return address, store return value, pop stack
2740#    lw $ra,4($sp) # restore $ra
2744#    addu $sp,$sp,8 # pop ra, and allocated newObject
2748#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
2752#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
2756:fcn_length_String:

    # the length is the negative of 4($s2)
2756#    lw $t0,-4($s2) # -length
2760#    subu $t0,$zero,$t0

    # return
2764#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
2768:fcn_concat_String:
    # save $ra by pushing onto stack
2768#    subu $sp,$sp,4
2772#    sw $ra, ($sp)

    # get string pointers and check parameter for null
2776#    lw $t0,4($sp)
2780#    beq $t0,$zero,nullPtrException
2784#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
2788#    lw $t0,-4($t0) # negative size of second object
2792#    lw $t1,-4($t1) # negative size of first object
2796#    addu $s6,$t0,$t1 # sum of negative sizes
2800#    sra $s6,$s6,2 # negative word-size of char part
2804#    subu $s6,$zero,$s6 # word size of char part
2808#    addu $s6,$s6,1 # data word size, including v-table word
2812#    move $s7,$zero
2816#    jal newObject

    # store String vtable address in vtable address field
2820#    la $t0,CLASS_String
2824#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2828#    lw $t4,-8($s7) # # data words in source string
2832#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
2833##...slt $at,$t4,$zero
2837##...beq $at,$zero,2856
2840#    and $t4,0xff # mask off object's hash value ...
2841##...lui $at,0
2845##...ori $at,$at,0xff
2849##...and $t4,$t4,$at
2852#    sw $t4,-8($s7) # ... and store back into -8 header-word
2856:skipMask_concat:

2856#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2860#    move $t1,$s2   # first object
2864#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2868#    lw $t2,-4($t0) # negative length of second object
2872#    lw $t3,-4($t1) # negative length of first object
2876#    addu $t4,$t2,$t3 # sum of negative lengths
2880#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2884#    lw $t4,-8($t1) # # data words in first string
2888#    sll $t4,$t4,2 # # data bytes in first string
2892#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2896#    lw $t4,-8($s7) # # data words in new string
2900#    sll $t4,$t4,2 # # data bytes in new string
2904#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2908#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2912#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2916:  concatLoop1zz:
2916#    lb $t4,-8($t1)
2920#    sb $t4,-8($s7)
2924#    addu $s7,$s7,1
2928#    addu $t1,$t1,1
2932#    blt $t1,$t3,concatLoop1zz
2933##...slt $at,$t1,$t3
2937##...bne $at,$zero,2916
2940:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2940#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2944#    lw $t4,-8($t0) # # data words in second string
2948#    sll $t4,$t4,2 # # data bytes in second string
2952#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2956#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2960:  concatLoop2zz:
2960#    lb $t4,-8($t1)
2964#    sb $t4,-8($s7)
2968#    addu $s7,$s7,1
2972#    addu $t1,$t1,1
2976#    blt $t1,$t3,concatLoop2zz
2977##...slt $at,$t1,$t3
2981##...bne $at,$zero,2960
2984:  doneConcatLoop2zz:
 
2984:  concatRtnzz:
    # return
2984#    move $t0, $t9 # put saved return string in $t0
2988#    lw $ra, 4($sp)
2992#    addu $sp, 8 # pop ra and allocated newObject
2996#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
3000:fcn_charAt_String:
    # get string
3000#    move $t0,$s2

    # check that index is in bounds
3004#    lw $t1,-4($t0) # negative of # data words in string
3008#    subu $t3,$zero,$t1 # # chars in string
3012#    lw $t2,($sp) # index
3016#    bgeu $t2,$t3,strIndexOutOfBounds
3017##...sltu $at,$t2,$t3
3021##...beq $at,$zero,4544

    # access element
3024#    lw $t1,-8($t0) # # data words in object
3028#    sll $t1,$t1,2 # - byte-offset from end of chars
3032#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3036#    addu $t0,$t0,$t1 # - address of our char, offset by 8
3040#    lb $t0,-8($t0) # our char

    # return
3044#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
3048:fcn_intToString_Lib:

    # save return address on stack; allocate space for dummy GC tag
3048#    subu $sp,$sp,8
3052#    sw $ra,4($sp)

    # save current sp
3056#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
3060#    li $t3,10

    # get argument, negate if negative
3064#    lw $t1,8($sp)
3068#    bge $t1,$zero,itsNonNegLoop
3069##...slt $at,$t1,$zero
3073##...beq $at,$zero,3080
3076#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
3080:  itsNonNegLoop:
3080#    divu $t1,$t3
3084#    mflo $t1 # quotient
3088#    mfhi $t4 # remainder
3092#    addu $t4,$t4,'0' # turn remainder into digit
3096#    subu $sp,$sp,4
3100#    sw $t4,($sp) # push digit onto stack
3104#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
3108#    lw $t4,8($t0)
3112#    bge $t4,$zero,itsSkipNeg
3113##...slt $at,$t4,$zero
3117##...beq $at,$zero,3132
3120#    li $t4,'-'
3124#    subu $sp,$sp,4
3128#    sw $t4,($sp)
3132:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
3132#    subu $s6,$t0,$sp
3136#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
3140#    sw $t3,($t0)
3144#    srl $s6,$s6,2
3148#    subu $sp,$sp,4
3152#    sw $s6,($sp)
    
    # allocate memory
3156#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3160#    srl $s6,$s6,2
3164#    move $s7,$zero # no "object" words in object
3168#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
3172#    lw $t0,4($sp)
3176#    addu $sp,$sp,8

    # store "String" tag into class field
3180#    subu $s7,$s7,8 # address of header-1 word
3184#    la $t1,CLASS_String
3188#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
3192#    lw $t4,($s7) # # data words in source string
3196#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
3197##...slt $at,$t4,$zero
3201##...beq $at,$zero,3220
3204#    and $t4,0xff # mask off object's hash value ...
3205##...lui $at,0
3209##...ori $at,$at,0xff
3213##...and $t4,$t4,$at
3216#    sw $t4,($s7) # ... and store back into -8 header-word
3220:skipMask_intToString:
    
    # store negative of char-count into header-2 word
3220#    subu $t0,$zero,$t0
3224#    sw $t0,4($s7)

3228#    lw $t1,($s7) # number of data words in string
3232#    sll $t1,$t1,2 # number data bytes in string
3236#    subu $t1,$s7,$t1 # first location to store chars in string
3240#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
3244:  itsLoop:
3244#    lw $t2,($sp)
3248#    addu $sp,$sp,4
3252#    sb $t2,($t1)
3256#    addu $t1,$t1,1
3260#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
3264#    lw $ra,4($sp)
3268#    addu $sp,$sp,8
3272#    addu $t0,$t0,15
3276#    and $t0,$t0,0xfffffffc
3277##...lui $at,65535
3281##...ori $at,$at,0xfffc
3285##...and $t0,$t0,$at
3288#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3292:fcn_intToChar_Lib:
    # save return address
3292#    subu $sp,$sp,4
3296#    sw $ra,($sp)

    # allocate object
3300#    li $s6,2
3304#    move $s7,$zero
3308#    jal newObject

    # get n from string.
3312#    lw $t1,8($sp)

    # store "String" tag into class field
3316#    la $t0,CLASS_String
3320#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
3324#    lw $t4,-8($s7) # # data words in source string
3328#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
3329##...slt $at,$t4,$zero
3333##...beq $at,$zero,3352
3336#    and $t4,0xff # mask off object's hash value ...
3337##...lui $at,0
3341##...ori $at,$at,0xff
3345##...and $t4,$t4,$at
3348#    sw $t4,-8($s7) # ... and store back into -8 header-word
3352:  skipMask_intToChar:

    # store data in string
3352#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
3356#    li $t0,-1
3360#    sw $t0,-4($s7)

    # we're returning $s7
3364#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
3368#    lw $ra,4($sp)
3372#    addu $sp,$sp,8

    # return
3376#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
3380:fcn_compareTo_String:
    # get string pointers and check parameter for null
3380#    lw $t0,($sp) # second string
3384#    beq $t0,$zero,nullPtrException
3388#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
3392#    lw $t2,-4($t0) # negative length of second string
3396#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
3400#    slt $t4,$t3,$t2
3404#    slt $t5,$t2,$t3
3408#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
3412#    lw $t2,-8($t0) # # data words in second string
3416#    lw $t3,-8($t1) # # data words in first string
3420#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3424#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3428#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
3432#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
3436#    beq $zero,$t5,skipStrCmpLenzz
3440#    move $t2,$t3
3444:  skipStrCmpLenzz:
3444#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
3448:  cmpLoopzz:
3448#    lw $t3,-8($t1) # word from str2
3452#    lw $t4,-8($t0) # word from str1
3456#    bne $t3,$t4,cmpNotEqualzz
3460#    addu $t1,$t1,4
3464#    addu $t0,$t0,4
3468#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
3472#    j cmpHitLimitzz

3476:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
3476#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3480#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
3484#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
3488:  cmpHitLimitzz:
3488#    move $t0, $t5 # store return value
3492#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3496:readLogicalChar:

    # check if we already have a character
3496#    lw $v0,lastCharRead
3500#    li $t0,-2
3504#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
3508#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3512#    jr $ra # return
    
3516:  doReadCh:
    # we need to actually read a character: read and return
3516#    li $v0,12 # use system call to read a character
3520#    syscall
3524#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3528:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
3528#    blt $s7,$zero arraySizeOutOfBounds
3529##...slt $at,$s7,$zero
3533##...bne $at,$zero,4560

    # mark the fact that we have not yet GC'd for this allocation
3536#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

3540:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
3540#    addu $t0,$s6,$s7
3544#    sll $t0,$t0,2
3548#    addu $t0,$t0,8 # amount of memory needed
3552#    addu $t1,$t0,$s3
3556#    bgtu $t1,$s4,doGC
3557##...sltu $at,$s4,$t1
3561##...bne $at,$zero,3684

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
3564#    move $t2,$s3
3568:  zeroObjLoop:
3568#    sw $zero,($s3)
3572#    lw $zero,($s3)

3576#    addu $s3,4
3580#    bltu $s3,$t1,zeroObjLoop
3581##...sltu $at,$s3,$t1
3585##...bne $at,$zero,3568

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
3588#    sll $t0,$s7,2    # number of post-header bytes
3592#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
3596#    li $t2,255
3600#    bgeu $s6,$t2 firstHeaderLarge
3601##...sltu $at,$s6,$t2
3605##...beq $at,$zero,3652
3608#    lw $t1,prevHashConstant
3612#    addu $t1,0x12b68fd2
3613##...lui $at,4791
3617##...addiu $at,$at,-28718
3621##...addu $t1,$at,$t1
3624#    sw $t1,prevHashConstant # update hash constant
3628#    or $t1,0x80000000 # set top bit
3629##...lui $at,32768
3633##...or $t1,$at,$t1
3636#    and $t1,0xffffff00 # clear low bit
3637##...lui $at,65535
3641##...ori $at,$at,0xff00
3645##...and $t1,$t1,$at
3648#    or $s6,$t1
3652:firstHeaderLarge:
3652#    sw $s6,-8($t0) # store header-1 value
3656#    lw $zero,-8($t0)

    # store second header-value
3660#    sw $s7,-4($t0)   # second header-word
3664#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
3668#    move $s7,$t0
3672#    subu $sp,$sp,4
3676#    sw $t0,($sp)

3680#    jr $ra
    
3684:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
3684#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
3688#    lw $t5,gcCount
3692#    addu $t5,1
3696#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
3700#    subu $sp,$sp,4
3704#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
3708#    lw $t0,cur_seg
3712#    move $t7,$s4
3716#    la $t6,seg1_start
3717##...lui $t6,16
3721##...addiu $t6,$t6,5288
3724#    la $s3,seg0_start
3728#    la $s4,seg0_end
3729##...lui $s4,16
3733##...addiu $s4,$s4,5288
3736#    sw $zero,cur_seg
3740#    bne $t0,$zero,skipGc1
3744#    la $t6,seg0_start
3748#    la $s3,seg1_start
3749##...lui $s3,16
3753##...addiu $s3,$s3,5288
3756#    la $s4,seg1_end
3757##...lui $s4,32
3761##...addiu $s4,$s4,5288
3764#    sw $s5,cur_seg
3768:  skipGc1:
3768#    li $t5,0x80000000
3772#    lw $t0,stack_bottom
3776#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

3780:  gcStackCopyLoop:
3780#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
3784#    sll $t2,$t1,31 # zero iff low bit was zero
3788#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
3792#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
3796#    bleu $t1,$t6,gcTestIterDone1
3797##...sltu $at,$t6,$t1
3801##...beq $at,$zero,3964
3804#    bgtu $t1,$t7,gcTestIterDone1
3805##...sltu $at,$t7,$t1
3809##...bne $at,$zero,3964

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3812#    lw $t2,-8($t1) # possible forwarding tag
3816#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
3820#    lw $t2,-4($t1) # forwarding pointer: object's new address
3824#    sw $t2,4($t0) # update stack value
3828#    j gcTestIterDone1 # do next iteration

3832:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
3832#    bge $t2,$zero,gcSkip2
3833##...slt $at,$t2,$zero
3837##...beq $at,$zero,3852
3840#    and $t2,0xff #### mask off hash value
3841##...lui $at,0
3845##...ori $at,$at,0xff
3849##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

3852:  gcSkip2:
3852#    sll $t2,$t2,2
3856#    addu $t2,$t2,8
3860#    subu $t4,$t1,$t2 # address of first word of source
3864#    lw $t3,-4($t1) # number of object words (negative means zero)
3868#    bge $t3,$zero,gcH2Neg1
3869##...slt $at,$t3,$zero
3873##...beq $at,$zero,3880
3876#    move $t3,$zero
3880:  gcH2Neg1:
3880#    sll $t3,$t3,2
3884#    addu $t3,$t3,$t1 # address one word past last word of source

3888#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3892#    lw $s0,($t4)
3896#    lw $s1,-8($t1)
3900#    sw $s1,($t4)
3904#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3908:  gCinnerCopy1:
3908#    lw $s0,($t4)
3912#    sw $s0,($s3)
3916#    addu $t4,$t4,4
3920#    addu $s3,$s3,4
3924#    bltu $t4,$t3,gCinnerCopy1
3925##...sltu $at,$t4,$t3
3929##...bne $at,$zero,3908

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3932#    sw $zero,-8($t1) # 0 in first header-slot
3936#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3940#    sw $t2,4($t0)
3944#    lw $zero,-8($t2)
3948#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3952#    j gcTestIterDone1

3956:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3956#    subu $t0,$t0,$t1
3960#    subu $t0,$t0,3

3964:  gcTestIterDone1:
3964#    bgeu $t0,$sp,gcStackCopyLoop
3965##...sltu $at,$t0,$sp
3969##...beq $at,$zero,3780

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3972#    lw $t1,cur_seg
3976#    la $t0,seg0_start
3980#    beq $t1,$zero,gcSkip4
3984#    la $t0,seg1_start
3985##...lui $t0,16
3989##...addiu $t0,$t0,5288


3992:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3992#    bgeu $t0,$s3,gcFinishUp
3993##...sltu $at,$t0,$s3
3997##...beq $at,$zero,4288

    ###### begin outer loop to copy all non-stack-direct objects ######

4000:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
4000#    lw $t1,($t0) # (what will be) first header word for current object
4004#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
4008#    bge $t2,$zero,gcSkip4a # are there hash bits?
4009##...slt $at,$t2,$zero
4013##...beq $at,$zero,4028
4016#    and $t2,0xff # mask off hash bits
4017##...lui $at,0
4021##...ori $at,$at,0xff
4025##...and $t2,$t2,$at
4028:gcSkip4a:    
4028#    sll $t2,$t2,2 # # data bytes
4032#    addu $t2,$t2,8 # to skip header words
4036#    addu $t2,$t0,$t2 # pointer to new object
4040#    lw $t3,-8($t2) # word to swap
4044#    sw $t1,-8($t2) # store header word
4048#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
4052#    lw $t1,-12($t2) # vtable pointer
4056#    li $t0,dataArrayVTableStart # address of vtable for first data array
4060#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
4061##...slt $at,$t1,$t0
4065##...bne $at,$zero,4084

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
4068:  skipToNextObj:
4068#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
4072#    sll $t1,$t1,2 # convert to byte-count
4076#    addu $t0,$t2,$t1 # skip over object
4080#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
4084:  gcNotDataArray:
4084#    lw $t3,-4($t2) # # object words (negative treated as zero)
4088#    bge $t3,$zero,gcH2Neg2
4089##...slt $at,$t3,$zero
4093##...beq $at,$zero,4100
4096#    move $t3,$zero
4100:  gcH2Neg2:
4100#    sll $t3,$t3,2 # # object bytes
4104#    move $t0,$t2 # address of first pointer in object
4108#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
4112#    beq $t0,$s1,gcTestIterDone2
    
4116:  gcNextPointerInObject:
    # get pointer from object
4116#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
4120#    bleu $t1,$t6,gcGoNextPointerSlot
4121##...sltu $at,$t6,$t1
4125##...beq $at,$zero,4268
4128#    bgtu $t1,$t7,gcGoNextPointerSlot
4129##...sltu $at,$t7,$t1
4133##...bne $at,$zero,4268

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
4136#    lw $t8,-8($t1) # possible forwarding tag
4140#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
4144#    lw $t8,-4($t1) # forwarding pointer: object's new address
4148#    sw $t8,($t0) # update pointer in object
4152#    j gcGoNextPointerSlot # do next iteration

4156:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
4156#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
4157##...slt $at,$t8,$zero
4161##...beq $at,$zero,4176
4164#    and $t8,0xff # mask off hash bits
4165##...lui $at,0
4169##...ori $at,$at,0xff
4173##...and $t8,$t8,$at

4176:  gcSkip5:
4176#    sll $t8,$t8,2 # bytes in negative-offset portion ...
4180#    addu $t8,$t8,8 # ... add in bytes for header-words
4184#    subu $t4,$t1,$t8 # address of first word of source object
4188#    lw $t3,-4($t1) # # words in positive-offset portion
4192#    bge $t3,$zero,gcNoNeg
4193##...slt $at,$t3,$zero
4197##...beq $at,$zero,4204
4200#    move $t3,$zero # negative treated as zero
4204:  gcNoNeg:
4204#    sll $t3,$t3,2 # bytes in negative-offset portion
4208#    addu $t3,$t3,$t1 # address one word past last word of source

4212#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
4216#    lw $s0,($t4)
4220#    lw $t9,-8($t1)
4224#    sw $t9,($t4)
4228#    sw $s0,-8($t1)

    # copy all source bytes to the target
4232:  gCinnerCopy2:
4232#    lw $s0,($t4)
4236#    sw $s0,($s3)
4240#    addu $t4,$t4,4
4244#    addu $s3,$s3,4
4248#    bltu $t4,$t3,gCinnerCopy2
4249##...sltu $at,$t4,$t3
4253##...bne $at,$zero,4232

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
4256#    sw $zero,-8($t1) # 0 in first header-slot
4260#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
4264#    sw $t8,($t0)

4268:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
4268#    addu $t0,$t0,4
4272#    bltu $t0,$s1,gcNextPointerInObject
4273##...sltu $at,$t0,$s1
4277##...bne $at,$zero,4116

4280:  gcTestIterDone2:
4280#    bltu $t0,$s3,gcHeapCopyLoop
4281##...sltu $at,$t0,$s3
4285##...bne $at,$zero,4000

    ###### end outer loop to copy all non-stack-direct objects ######

4288:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
4288#    lw $s2,($sp)
4292#    addu $sp,$sp,4

    # mark us as having already GC'd
4296#    move $t5,$s5

    # go try and allocate again
4300#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4304:vm_init:

    # mark bottom of stack
4304#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
4308#    move $s2,$zero

    #set up the "five" register
4312#    li $s5,5

4316#    la $s3,seg0_start
4320#    la $s4,seg0_end
4321##...lui $s4,16
4325##...addiu $s4,$s4,5288
    
    # return
4328#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4332:divide:
    # get parameters; abort if divisor zero
4332#    lw $t0,($sp)
4336#    lw $t1,8($sp)
4340#    beq $t0,$zero,divByZeroError
    
    # perform division
4344#    div $t1,$t0
4348#    mflo $t0

    # store result, adjust stack and return
4352#    addu $sp,$sp,8 # adjust stack
4356#    sw $t0,($sp) # store result
4360#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4364:remainder:
    # get parameters; abort if divisor zero
4364#    lw $t0,($sp)
4368#    lw $t1,8($sp)
4372#    beq $t0,$zero,divByZeroError
    
    # perform division
4376#    div $t1,$t0
4380#    mfhi $t0

    # store result, adjust stack and return
4384#    addu $sp,$sp,8 # adjust stack
4388#    sw $t0,($sp) # store result
4392#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4396:checkCast:
    # get object, allow immediately if null
4396#    lw $t2,($sp)
4400#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
4404#    lw $t2,-12($t2) # vtable address
4408#    bge $t2,$t1,castException
4409##...slt $at,$t2,$t1
4413##...beq $at,$zero,4584
4416#    blt $t2,$t0,castException
4417##...slt $at,$t2,$t0
4421##...bne $at,$zero,4584
    
    # return, leaving object unchanged on stack
4424:  checkCastReturn:    
4424#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4428:instanceOf:
    # get object, go return false if null
4428#    lw $t2,($sp)
4432#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
4436#    lw $t2,-12($t2) # vtable address
4440#    sge $t0,$t2,$t0 # are we >= the lower limit?
4441##...slt $t0,$t2,$t0
4445##...xori $t0,$t0,0x1
4448#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
4452#    and $t2,$t0,$t1
4456#    sw $t2,($sp)
4460:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
4460#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4464:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
4464#    li $v0,4 # syscall-code for print-string
4468#    syscall
4472:exit:
    # print termination message
4472#    li $v0,4 # syscall-code for print-string
4476#    la $a0,exitString
4480#    syscall

    # print number of garbage collections
4484#    li $v0,4 # syscall-code for print-string
4488#    la $a0,gcCountMsg
4492#    syscall # print "Number of ..."
4496#    lw $a0,gcCount # number of GC's
4500#    li $v0,1 # code for print-int
4504#    syscall
4508#    li $v0,4 # syscall-code for print-string
4512#    la $a0,newlineString
4516#    syscall # print newline

    # terminate execution
4520#    li $v0,10 #syscall-code for "exit"
4524#    syscall

4528:outOfHeapMemory:
4528#    la $a0,heapMemoryMsg
4532#    j exitError
4536:divByZeroError:
4536#    la $a0,divByZeroMsg
4540#    j exitError
4544:strIndexOutOfBounds:
4544#    la $a0,strIndexOutOfBoundsMsg
4548#    j exitError
4552:arrayIndexOutOfBounds:
4552#    la $a0,arrayIndexOutOfBoundsMsg
4556#    j exitError
4560:arraySizeOutOfBounds:
4560#    la $a0,arraySizeOutOfBoundsMsg
4564#    j exitError
4568:nullPtrException:
4568#    la $a0,nullPtrExceptionMsg
4572#    j exitError
4576:badIntegerFormat:
4576#    la $a0,badIntegerFormatMsg
4580#    j exitError
4584:castException:
4584#    la $a0,castExceptionMsg
4588#    j exitError
############## data section ################
    .data
4916:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4932:cur_seg:
    .word 0

4936:lastCharRead:
    .word -2 # -2 => no buffered character
4940:prevHashConstant:
    .word 0x2785173c
4944:gcCount:
    .word 0

4948:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4975:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4998:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
5033:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
5067:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
5100:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
5131:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
5179:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
5200:gcMsg: 
      .asciiz "\nGC!\n"
5206:gcCountMsg: 
      .asciiz "Number of garbage collections: "

5238:nullStr:
    .asciiz "null"
5243:trueString:
    .asciiz "true"
5248:falseString:
    .asciiz "false"
5254:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
5282:newlineString:
    .asciiz "\n"
    
    .align 2
5284:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

5288:seg0_start:
    .space 0x100000
1053864:seg0_end:
1053864:seg1_start:
    .space 0x100000
2102440:seg1_end:
