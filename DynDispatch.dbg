 .data # Program at 3.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
3740:CLASS_Object: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
3760:CLASS_String: # ClassDecl at 0.0
  .word fcn_hashCode_String # MethodDeclNonVoid at 0.0
  .word fcn_equals_String # MethodDeclNonVoid at 0.0
  .word fcn_toString_String # MethodDeclNonVoid at 0.0
  .word fcn_concat_String # MethodDeclNonVoid at 0.0
  .word fcn_substring_String # MethodDeclNonVoid at 0.0
  .word fcn_length_String # MethodDeclNonVoid at 0.0
  .word fcn_charAt_String # MethodDeclNonVoid at 0.0
  .word fcn_compareTo_String # MethodDeclNonVoid at 0.0
3792:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
3796:CLASS_Lib: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 3.7
  .byte 205 # 'M' with high bit set # ClassDecl at 3.7
  .byte 97 # 'a' # ClassDecl at 3.7
  .byte 105 # 'i' # ClassDecl at 3.7
  .byte 110 # 'n' # ClassDecl at 3.7
3844:CLASS_Main: # ClassDecl at 3.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_main_Main # MethodDeclVoid at 4.14
3892:END_CLASS_Main: # ClassDecl at 3.7
3892:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
3900:CLASS_RunMain: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
3912:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Vehicle ****** # ClassDecl at 14.7
  .byte 0 # ClassDecl at 14.7
  .byte 214 # 'V' with high bit set # ClassDecl at 14.7
  .byte 101 # 'e' # ClassDecl at 14.7
  .byte 104 # 'h' # ClassDecl at 14.7
  .byte 105 # 'i' # ClassDecl at 14.7
  .byte 99 # 'c' # ClassDecl at 14.7
  .byte 108 # 'l' # ClassDecl at 14.7
  .byte 101 # 'e' # ClassDecl at 14.7
3920:CLASS_Vehicle: # ClassDecl at 14.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_price_Vehicle # MethodDeclNonVoid at 15.13
# ****** class Car ****** # ClassDecl at 20.7
  .byte 0 # ClassDecl at 20.7
  .byte 195 # 'C' with high bit set # ClassDecl at 20.7
  .byte 97 # 'a' # ClassDecl at 20.7
  .byte 114 # 'r' # ClassDecl at 20.7
3940:CLASS_Car: # ClassDecl at 20.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_price_Car # MethodDeclNonVoid at 21.13
3956:END_CLASS_Car: # ClassDecl at 20.7
3956:END_CLASS_Vehicle: # ClassDecl at 14.7
3956:dataArrayVTableStart: # IntegerType at 0.0
3956:END_CLASS_Object: # ClassDecl at 0.0
  .byte 32 # StringLiteral at 8.18
  .byte 0 # StringLiteral at 8.18
  .byte 0 # StringLiteral at 8.18
  .byte 0 # StringLiteral at 8.18
  .word CLASS_String # StringLiteral at 8.18
  .word 2 # StringLiteral at 8.18
  .word -1 # StringLiteral at 8.18
3972:strLit_15: # StringLiteral at 8.18
  .byte 10 # StringLiteral at 10.18
  .byte 0 # StringLiteral at 10.18
  .byte 0 # StringLiteral at 10.18
  .byte 0 # StringLiteral at 10.18
  .word CLASS_String # StringLiteral at 10.18
  .word 2 # StringLiteral at 10.18
  .word -1 # StringLiteral at 10.18
3988:strLit_24: # StringLiteral at 10.18
.text
.globl main
0:main:
0#  jal vm_init
4#li $s6,2
8#li $s7,0
12#jal newObject
16#la $t0,CLASS_Main
20#sw $t0,-12($s7)
24#lw $s2,($sp)
28#addu $sp,$sp,4
32#jal fcn_main_Main
36#li $v0,10
40#syscall
44:fcn_main_Main:
44#  subu $sp,$sp,4
48#  sw $ra,($sp)
52#  li $s6,1
56#  li $s7,0
60#  jal newObject
64#  la $t0,CLASS_Car
68#  sw $t0,-12($s7)
72#  lw $0,($sp)
76#  li $s6,1
80#  li $s7,0
84#  jal newObject
88#  la $t0,CLASS_Vehicle
92#  sw $t0,-12($s7)
96#  lw $0,($sp)
100#  subu $sp,$sp,4
104#  sw $s2,($sp)
108#  lw $t0,8($sp)
112#  subu $sp,$sp,4
116#  sw $t0,($sp)
120#  lw $t0,0($sp)
124#  sw $s2,0($sp)
128#  move $s2, $t0
132#  lw $t0, -12($s2)
136#  lw $t0,12($t0)
140#  jalr $t0
144#  addu $sp,$sp,0
148#  lw $s2,($sp)
152#  addu $sp,$sp,4
156#  subu $sp,$sp,8
160#  sw $s5,4($sp)
164#  sw $t0,($sp)
168#  lw $t0,8($sp)
172#  sw $s2,8($sp)
176#  move $s2, $t0
180#  lw $t0, -12($s2)
184#  lw $t0,32($t0)
188#  jalr $t0
192#  addu $sp,$sp,8
196#  lw $s2,($sp)
200#  addu $sp,$sp,4
204#  subu $sp,$sp,4
208#  sw $t0,($sp)
212#  addu $sp,$sp,4
216#  subu $sp,$sp,4
220#  sw $s2,($sp)
224#  la $t0, strLit_15
228#  subu $sp,$sp,4
232#  sw $t0,($sp)
236#  lw $t0,4($sp)
240#  sw $s2,4($sp)
244#  move $s2, $t0
248#  lw $t0, -12($s2)
252#  lw $t0,24($t0)
256#  jalr $t0
260#  addu $sp,$sp,4
264#  lw $s2,($sp)
268#  addu $sp,$sp,4
272#  subu $sp,$sp,4
276#  sw $t0,($sp)
280#  addu $sp,$sp,4
284#  subu $sp,$sp,4
288#  sw $s2,($sp)
292#  lw $t0,4($sp)
296#  subu $sp,$sp,4
300#  sw $t0,($sp)
304#  lw $t0,0($sp)
308#  sw $s2,0($sp)
312#  move $s2, $t0
316#  lw $t0, -12($s2)
320#  lw $t0,12($t0)
324#  jalr $t0
328#  addu $sp,$sp,0
332#  lw $s2,($sp)
336#  addu $sp,$sp,4
340#  subu $sp,$sp,8
344#  sw $s5,4($sp)
348#  sw $t0,($sp)
352#  lw $t0,8($sp)
356#  sw $s2,8($sp)
360#  move $s2, $t0
364#  lw $t0, -12($s2)
368#  lw $t0,32($t0)
372#  jalr $t0
376#  addu $sp,$sp,8
380#  lw $s2,($sp)
384#  addu $sp,$sp,4
388#  subu $sp,$sp,4
392#  sw $t0,($sp)
396#  addu $sp,$sp,4
400#  subu $sp,$sp,4
404#  sw $s2,($sp)
408#  la $t0, strLit_24
412#  subu $sp,$sp,4
416#  sw $t0,($sp)
420#  lw $t0,4($sp)
424#  sw $s2,4($sp)
428#  move $s2, $t0
432#  lw $t0, -12($s2)
436#  lw $t0,24($t0)
440#  jalr $t0
444#  addu $sp,$sp,4
448#  lw $s2,($sp)
452#  addu $sp,$sp,4
456#  subu $sp,$sp,4
460#  sw $t0,($sp)
464#  addu $sp,$sp,4
468#  addu $sp,$sp,8
472#  addu $sp,$sp,0
476#  lw $ra,($sp)
480#  addu $sp,$sp,4
484#  jr $ra
.globl fcn_price_Vehicle
488:fcn_price_Vehicle:
488#  subu $sp,$sp,4
492#  sw $ra,($sp)
496#  addu $sp,$sp,0
500#  li $t0,100
504#  subu $sp,$sp,8
508#  sw $s5,4($sp)
512#  sw $t0,($sp)
516#  lw $t0,($sp)
520#  addu $sp,$sp,8
524#  addu $sp,$sp,0
528#  lw $ra,($sp)
532#  addu $sp,$sp,4
536#  jr $ra
.globl fcn_price_Car
540:fcn_price_Car:
540#  subu $sp,$sp,4
544#  sw $ra,($sp)
548#  addu $sp,$sp,0
552#  li $t0,200
556#  subu $sp,$sp,8
560#  sw $s5,4($sp)
564#  sw $t0,($sp)
568#  lw $t0,($sp)
572#  addu $sp,$sp,8
576#  addu $sp,$sp,0
580#  lw $ra,($sp)
584#  addu $sp,$sp,4
588#  jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
592:fcn_hashCode_Object:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
592#    lw $t0,-8($s2) # get word with hash bits from this
596#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
600#    addu $t0,$t1

604#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
608:fcn_equals_Object:
608#    move $t0,$s2 # first pointer (this)
612#    lw $t1,($sp) # second pointer
616#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
617##...subu $at,$t0,$t1
621##...sltiu $t0,$at,1

624#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
628:fcn_hashCode_String:
628#    move $t0,$s2 # put this pointer in t0

632#    li $t2,0 # current hash value
636#    lw $t1,-4($t0) # negative of number of characters in string
640#    beq $t1,$zero,done_hashCode_String # if zero length => done
644#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
648#    and $t0,0xfffffffc # adjust for padding
649##...lui $at,65535
653##...ori $at,$at,0xfffc
657##...and $t0,$t0,$at
660#    subu $t1,$t0,$t1 # address at end of string +12
664:loop_hashCode_String:    
664#    sll $t4,$t2,5 # multiply by 32
668#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
672#    lbu $t3,-12($t0) # current character
676#    addu $t2,$t3 # add in current character
680#    addu $t0,1 # go to next character's address
684#    bne $t0,$t1,loop_hashCode_String # loop back if more
688:done_hashCode_String:    

    # push int on stack
688#    move $t0, $t2 # put $t2 in return slot
692#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
696:fcn_toString_Object:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
696#    subu $sp,4
700#    sw $ra,($sp)
    
    # get hash value
704#    lw $t2,-12($s2) # vtable address
708#    lw $t0,($t2) # method address
712#    jalr $t0
716#    subu $sp,8 # push result (int in $t0) on stack
720#    sw $s5,4($sp)
724#    sw $t0,($sp)

    # compute print-size of hash value
728#    li $t0, 1
732#    lw $t1, ($sp)
736#    srl $t1,$t1,4
740#    beq $t1,$zero,toString_skip_loop
744:toString_loop_top:
744#    addu $t0,1
748#    srl $t1,$t1,4
752#    bne $t1,$zero,toString_loop_top
756:toString_skip_loop:
756#    subu $sp,8
760#    sw $s5,4($sp)
764#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
768#    lw $t2,-12($s2) # vtable address
772#    move $t0,$t2
776:toString_checkTagBit:
776#    subu $t0,1
780#    lb $t1,($t0)
784#    and $t1,0x80
785##...lui $at,0
789##...ori $at,$at,0x80
793##...and $t1,$t1,$at
796#    beq $t1,$zero,toString_checkTagBit
800#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
804#    subu $sp,8
808#    sw $t1,($sp)
812#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
816#    move $s7,$zero # -4 offset header word
820#    lw $t4,8($sp) # bytes for hash value
824#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
828#    addu $t4,8
832#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
836#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

840#    li $t0,CLASS_String # store string vtable address into ...
844#    sw $t0,-12($s7) # ... -12 offset in object header
848#    lw $t2,-12($s2) # our object's vtable address
852#    lw $t5,4($sp) # number characters in prefix
856#    lw $t1,12($sp) # number of characters in hashcode
860#    addu $t3,$t1,$t5 # number of characters in string ...
864#    addu $t3,1 # ... including the '@' character
868#    subu $t0,$zero,$t3 # store negated length into ...
872#    sw $t0,-4($s7) # ... -4 offset header word
876#    lw $t0,-8($s7) # get -8 offset header-word
880#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
881##...slt $at,$t0,$zero
885##...beq $at,$zero,904
888#    and $t0,0xff # mask off object's hash value ...
889##...lui $at,0
893##...ori $at,$at,0xff
897##...and $t0,$t0,$at
900#    sw $t0,-8($s7) # ... and store back into -8 header-word
904:skipMask_toString:
904#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
908#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
912#    subu $t4,$t2,$t5
916:toString_copyLoop:    
916#    lb $t3,($t4)
920#    and $t3,0x7f # mask off sign bit (in case first word)
921##...lui $at,0
925##...ori $at,$at,0x7f
929##...and $t3,$t3,$at
932#    sb $t3,-8($t0)
936#    addu $t4,1
940#    addu $t0,1
944#    blt $t4,$t2,toString_copyLoop
945##...slt $at,$t4,$t2
949##...bne $at,$zero,916

    # copy the '@' sign
952#    li $t3,'@'
956#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
960#    addu $t2,$t0,$t1 # address of last byte in string to store +8
964#    lw $t3,20($sp) # hash code to print
968:toString_hashCopyLoop:
968#    and $t4,$t3,0xf
972#    srl $t3,4
976#    lb $t4,hexChars($t4)
980#    sb $t4,-8($t2)
984#    subu $t2,$t2,1
988#    bgt $t2,$t0,toString_hashCopyLoop
989##...slt $at,$t0,$t2
993##...bne $at,$zero,968

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
996#    addu $sp,28
1000#    lw $ra,($sp)
1004#    addu $sp,4
1008#    move $t0, $s7 # return string we created
1012#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1016:fcn_equals_String:
    
    # quick test for obvious false
1016#    lw $t0,($sp) # second parameter
1020#    beq $t0,$zero,goEsFalse # go return false if null
1024#    lw $t1,-12($t0) # vtable pointer
1028#    la $t2,CLASS_String # string vtable pointer
1032#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1036#    subu $sp,12
1040#    sw $ra,8($sp)
1044#    sw $s2,4($sp)
1048#    sw $t0,($sp)
1052#    jal fcn_compareTo_String
1056#    lw $s2, 4($sp) #restore this pointer and pop parameters
1060#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1064#    seq $t0,$t0,$zero
1065##...subu $at,$t0,$zero
1069##...sltiu $t0,$at,1

    # pop return address and return $t0
1072#    lw $ra,($sp)
1076#    addu $sp,4

1080#    jr $ra # return
    
1084:goEsFalse:
    # put 0 in $t0 and return
1084#    li $t0, 0
1088#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1092:fcn_toString_String:
    #we are a string, so return this.
1092#    move $t0, $s2
1096#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1100:fcn_readLine_Lib:
    
1100#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1104#    sw $ra, 4($sp) # save $ra
1108#    move $t1,$sp # save "original" sp

1112:  doRead:

    # read the character
1112#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1116#    subu $t2,$v0,13
1120#    bne $t2,$zero,notReturnRL
1124#    jal readLogicalChar
1128#    subu $t2,$v0,10 # check for newline
1132#    beq $t2,$zero,foundNewLine
1136#    sw $v0,lastCharRead # push back character into queue
1140#    j foundNewLine # go process the line

1144:  notReturnRL:

    # at this point, $v0 has our character

1144#    subu $t0,$v0,10
1148#    beq $t0,$zero,foundNewLine
1152#    blt $v0,$zero,foundEof
1153##...slt $at,$v0,$zero
1157##...bne $at,$zero,1172

    # we have a character, so push it onto stack
1160#    subu $sp,$sp,4
1164#    sw $v0,($sp)

    # loop back up to get next character
1168#    j doRead

1172:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1172#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
1176#    li $s7, 0 # return-value: null
1180#    j rlReturn # return

1184:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
1184#    subu $t0,$t1,$sp # number of chars we read (times 4)
1188#    srl $s6,$t0,2 # number of words on stack with chars
1192#    subu $sp,$sp,4 # push char-count ...
1196#    sw $s6,($sp) # ... onto stack
1200#    addu $t2,$t0,5 # GC tag, incl. for count-word
1204#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
1208#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1212#    srl $s6,$s6,2  # data words in object
1216#    move $s7,$zero # object words in object
1220#    jal newObject  # allocate space
    
    # store header words
1224#    la $t0,CLASS_String
1228#    sw $t0,-12($s7)# store class tag (String) into object
1232#    lw $t2,4($sp) # char-count
1236#    sll $t1,$t2,2 # 4 times number of chars
1240#    subu $t2,$zero,$t2 # negative of char-count
1244#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
1248#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
1252#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
1253##...slt $at,$t0,$zero
1257##...beq $at,$zero,1276
1260#    and $t0,0xff # mask off object's hash value ...
1261##...lui $at,0
1265##...ori $at,$at,0xff
1269##...and $t0,$t0,$at
1272#    sw $t0,-8($s7) # ... and store back into -8 header-word
1276:  skipMask_readLine:

1276#    sll $t0,$t0,2 # data bytes in object
1280#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
1284#    subu $t0,$t0,$t2 # place to store last character (plus 9)
1288#    addu $sp,$sp,8 # pop redundant object-pointer and count
1292#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

1296#    beq $sp,$t1,rlReturn
1300:  charCopyLoop:
1300#    lw $t2,($sp)
1304#    sb $t2,-9($t0)
1308#    addu $sp,$sp,4
1312#    subu $t0,$t0,1
1316#    bne $sp,$t1,charCopyLoop
1320:  rlReturn:

1320#    lw $ra, 4($sp)
1324#    addu $sp, 8   # pop $ra and pointless word off stack
1328#    move $t0, $s7 # return string we allocated in $s7
1332#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1336:fcn_readInt_Lib:

    # save $ra by pushing onto stack
1336#    subu $sp,$sp,4
1340#    sw $ra,($sp)

1344:  riSkipWhiteLoop:
    # read a character
1344#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
1348#    subu $t0,$v0,32
1352#    bgt $t0,$zero,nonWhite
1353##...slt $at,$zero,$t0
1357##...bne $at,$zero,1400
1360#    beq $t0,$zero,riSkipWhiteLoop # start over if space
1364#    subu $t0,$v0,10
1368#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
1372#    subu $t0,$v0,9
1376#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
1380#    subu $t0,$v0,13
1384#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1388#    subu $t0,$v0,12
1392#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1396#    j badIntegerFormat # illegal integer char: abort program

1400:  nonWhite:
1400#    subu $t0,$v0,'-'
1404#    li $t4,1 # final multiplier
1408#    bne $t0,$zero,helpReadInt # go read
1412#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
1416#    jal readLogicalChar

1420:  helpReadInt:
1420#    li $t2,10
1424#    subu $t1,$v0,'0' # convert digit to 0-9 value
1428#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
1429##...sltu $at,$t1,$t2
1433##...beq $at,$zero,3716
1436#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

1440:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

1440#    jal readLogicalChar # read next character
1444#    subu $t1,$v0,'0' # convert digit to 0-9 value
1448#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
1449##...sltu $at,$t1,$t2
1453##...beq $at,$zero,1472

1456#    mul $t3,$t3,$t2 # multiply old value by 10
1457##...mult $t3,$t2
1461##...mflo $t3
1464#    addu $t3,$t3,$t1 # add in value of new digit
1468#    j digitLoop

1472:  doneDigitLoop:

    # "push back" unused character into queue
1472#    sw $v0,lastCharRead

    # restore return address
1476#    lw $ra,($sp)
1480#    addu $sp, 4

    # multiply by sign and put return value in $t0
1484#    mult $t3,$t4 # multiply to account for poss. minus sign
1488#    mflo $t3
1492#    move $t0, $t3
    
    # return
1496#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1500:fcn_readChar_Lib:

    # save $ra by pushing onto stack
1500#    subu $sp,$sp,4
1504#    sw $ra,($sp)

      # read the character
1508#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
1512#    lw $ra,($sp)
1516#    addu $sp, 4
1520#    move $t0, $v0

    # return
1524#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
1528:fcn_printStr_Lib:
    # check for null, printing "(null)", if so
1528#    lw $t0,($sp)
1532#    bne $t0,$zero,psNotNull

    # print "(null)"
1536#    la $a0,nullStr
1540#    li $v0,4
1544#    syscall
1548#    j donePrintStr
    
1552:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1552#    subu $t0,$t0,8
1556#    lw $t1,($t0) # number of data words, but needs modification
1560#    blt $t1,$zero,skipPrintStr1
1561##...slt $at,$t1,$zero
1565##...bne $at,$zero,1584
1568#    and $t1,0xff # mask out all but low byte
1569##...lui $at,0
1573##...ori $at,$at,0xff
1577##...and $t1,$t1,$at
1580#    b skipPrintStr2
1584:skipPrintStr1:
1584#    and $t1,0x7ffffff
1585##...lui $at,2047
1589##...ori $at,$at,0xffff
1593##...and $t1,$t1,$at
1596:skipPrintStr2:    
1596#    sll $t1,$t1,2
1600#    subu $t1,$t0,$t1 # first word in string
1604#    lw $t0,4($t0) # negative of string-length
1608#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
1612#    beq $t0,$t1,donePrintStr
1616:  psLoop:
1616#    lb $a0,($t1) # next byte
1620#    li $v0,11 # code for printing char
1624#        syscall # print the char
1628#    addu $t1,$t1,1 # go to next char
1632#    blt $t1,$t0,psLoop
1633##...slt $at,$t1,$t0
1637##...bne $at,$zero,1616

1640:  donePrintStr:
1640#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
1644:fcn_printInt_Lib:
1644#    lw $a0,($sp)

    # print it
1648#    li $v0,1 # code for print-int
1652#    syscall

    # return
1656#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
1660:fcn_printBool_Lib:
    # pop value off stack, along with 'this'
1660#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
1664#    la $a0,falseString
1668#    beq $t0,$zero,skipPB
1672#    la $a0,trueString
1676:  skipPB:
1676#    li $v0,4 # code for print-string
1680#    syscall

    # return
1684#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
1688:fcn_substring_String:

    # save $ra by pushing onto stack
1688#    subu $sp,$sp,4
1692#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
1696#    move $t0,$s2
1700#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
1704#    lw $t0,-4($t0) # negative of string length
1708#    subu $t0,$zero,$t0 # string length
1712#    lw $t1,4($sp) # k
1716#    lw $t2,12($sp) # n
1720#    bgt $zero,$t2,strIndexOutOfBounds
1721##...slt $at,$t2,$zero
1725##...bne $at,$zero,3684
1728#    bgt $t2,$t1,strIndexOutOfBounds
1729##...slt $at,$t1,$t2
1733##...bne $at,$zero,3684
1736#    bgt $t1,$t0,strIndexOutOfBounds
1737##...slt $at,$t0,$t1
1741##...bne $at,$zero,3684

    # allocate memory
1744#    subu $s6,$t1,$t2 # # chars in target-string
1748#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1752#    srl $s6,$s6,2 # convert bytes-count to word-count
1756#    move $s7,$zero # (no object-bytes in string)
1760#    jal newObject

    # store "String" tag in object-type field
1764#    la $t0,CLASS_String
1768#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
1772#    lw $t4,-8($s7) # data words in source string
1776#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
1777##...slt $at,$t4,$zero
1781##...beq $at,$zero,1800
1784#    and $t4,0xff # mask off object's hash value ...
1785##...lui $at,0
1789##...ori $at,$at,0xff
1793##...and $t4,$t4,$at
1796#    sw $t4,-8($s7) # ... and store back into -8 header-word
1800:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
1800#    lw $t1,8($sp) # k
1804#    lw $t2,16($sp) # n
1808#    subu $t0,$t2,$t1 # value to store
1812#    sw $t0,-4($s7) # store value
    
1816#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
1820#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
1824#    lw $t4,-8($t3) # data words in source string
1828#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
1832#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1836#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1840#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1844#    lw $t2,-8($s7)   # data words in target string
1848#    sll $t2,$t2,2    # data bytes in target string
1852#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
1856:  subCopyLoopzz:
1856#    lb $t4,-8($t3)
1860#    sb $t4,-8($t2)
1864#    addu $t2,$t2,1
1868#    addu $t3,$t3,1
1872#    blt $t3,$t1,subCopyLoopzz
1873##...slt $at,$t3,$t1
1877##...bne $at,$zero,1856
    
1880:  doneSubCopyzz:
    # restore return address, store return value, pop stack
1880#    lw $ra,4($sp) # restore $ra
1884#    addu $sp,$sp,8 # pop ra, and allocated newObject
1888#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
1892#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
1896:fcn_length_String:

    # the length is the negative of 4($s2)
1896#    lw $t0,-4($s2) # -length
1900#    subu $t0,$zero,$t0

    # return
1904#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
1908:fcn_concat_String:
    # save $ra by pushing onto stack
1908#    subu $sp,$sp,4
1912#    sw $ra, ($sp)

    # get string pointers and check parameter for null
1916#    lw $t0,4($sp)
1920#    beq $t0,$zero,nullPtrException
1924#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
1928#    lw $t0,-4($t0) # negative size of second object
1932#    lw $t1,-4($t1) # negative size of first object
1936#    addu $s6,$t0,$t1 # sum of negative sizes
1940#    sra $s6,$s6,2 # negative word-size of char part
1944#    subu $s6,$zero,$s6 # word size of char part
1948#    addu $s6,$s6,1 # data word size, including v-table word
1952#    move $s7,$zero
1956#    jal newObject

    # store String vtable address in vtable address field
1960#    la $t0,CLASS_String
1964#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
1968#    lw $t4,-8($s7) # # data words in source string
1972#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
1973##...slt $at,$t4,$zero
1977##...beq $at,$zero,1996
1980#    and $t4,0xff # mask off object's hash value ...
1981##...lui $at,0
1985##...ori $at,$at,0xff
1989##...and $t4,$t4,$at
1992#    sw $t4,-8($s7) # ... and store back into -8 header-word
1996:skipMask_concat:

1996#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2000#    move $t1,$s2   # first object
2004#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2008#    lw $t2,-4($t0) # negative length of second object
2012#    lw $t3,-4($t1) # negative length of first object
2016#    addu $t4,$t2,$t3 # sum of negative lengths
2020#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2024#    lw $t4,-8($t1) # # data words in first string
2028#    sll $t4,$t4,2 # # data bytes in first string
2032#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2036#    lw $t4,-8($s7) # # data words in new string
2040#    sll $t4,$t4,2 # # data bytes in new string
2044#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2048#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2052#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2056:  concatLoop1zz:
2056#    lb $t4,-8($t1)
2060#    sb $t4,-8($s7)
2064#    addu $s7,$s7,1
2068#    addu $t1,$t1,1
2072#    blt $t1,$t3,concatLoop1zz
2073##...slt $at,$t1,$t3
2077##...bne $at,$zero,2056
2080:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2080#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2084#    lw $t4,-8($t0) # # data words in second string
2088#    sll $t4,$t4,2 # # data bytes in second string
2092#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2096#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2100:  concatLoop2zz:
2100#    lb $t4,-8($t1)
2104#    sb $t4,-8($s7)
2108#    addu $s7,$s7,1
2112#    addu $t1,$t1,1
2116#    blt $t1,$t3,concatLoop2zz
2117##...slt $at,$t1,$t3
2121##...bne $at,$zero,2100
2124:  doneConcatLoop2zz:
 
2124:  concatRtnzz:
    # return
2124#    move $t0, $t9 # put saved return string in $t0
2128#    lw $ra, 4($sp)
2132#    addu $sp, 8 # pop ra and allocated newObject
2136#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
2140:fcn_charAt_String:
    # get string
2140#    move $t0,$s2

    # check that index is in bounds
2144#    lw $t1,-4($t0) # negative of # data words in string
2148#    subu $t3,$zero,$t1 # # chars in string
2152#    lw $t2,($sp) # index
2156#    bgeu $t2,$t3,strIndexOutOfBounds
2157##...sltu $at,$t2,$t3
2161##...beq $at,$zero,3684

    # access element
2164#    lw $t1,-8($t0) # # data words in object
2168#    sll $t1,$t1,2 # - byte-offset from end of chars
2172#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2176#    addu $t0,$t0,$t1 # - address of our char, offset by 8
2180#    lb $t0,-8($t0) # our char

    # return
2184#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
2188:fcn_intToString_Lib:

    # save return address on stack; allocate space for dummy GC tag
2188#    subu $sp,$sp,8
2192#    sw $ra,4($sp)

    # save current sp
2196#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
2200#    li $t3,10

    # get argument, negate if negative
2204#    lw $t1,8($sp)
2208#    bge $t1,$zero,itsNonNegLoop
2209##...slt $at,$t1,$zero
2213##...beq $at,$zero,2220
2216#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
2220:  itsNonNegLoop:
2220#    divu $t1,$t3
2224#    mflo $t1 # quotient
2228#    mfhi $t4 # remainder
2232#    addu $t4,$t4,'0' # turn remainder into digit
2236#    subu $sp,$sp,4
2240#    sw $t4,($sp) # push digit onto stack
2244#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
2248#    lw $t4,8($t0)
2252#    bge $t4,$zero,itsSkipNeg
2253##...slt $at,$t4,$zero
2257##...beq $at,$zero,2272
2260#    li $t4,'-'
2264#    subu $sp,$sp,4
2268#    sw $t4,($sp)
2272:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
2272#    subu $s6,$t0,$sp
2276#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
2280#    sw $t3,($t0)
2284#    srl $s6,$s6,2
2288#    subu $sp,$sp,4
2292#    sw $s6,($sp)
    
    # allocate memory
2296#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2300#    srl $s6,$s6,2
2304#    move $s7,$zero # no "object" words in object
2308#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
2312#    lw $t0,4($sp)
2316#    addu $sp,$sp,8

    # store "String" tag into class field
2320#    subu $s7,$s7,8 # address of header-1 word
2324#    la $t1,CLASS_String
2328#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
2332#    lw $t4,($s7) # # data words in source string
2336#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
2337##...slt $at,$t4,$zero
2341##...beq $at,$zero,2360
2344#    and $t4,0xff # mask off object's hash value ...
2345##...lui $at,0
2349##...ori $at,$at,0xff
2353##...and $t4,$t4,$at
2356#    sw $t4,($s7) # ... and store back into -8 header-word
2360:skipMask_intToString:
    
    # store negative of char-count into header-2 word
2360#    subu $t0,$zero,$t0
2364#    sw $t0,4($s7)

2368#    lw $t1,($s7) # number of data words in string
2372#    sll $t1,$t1,2 # number data bytes in string
2376#    subu $t1,$s7,$t1 # first location to store chars in string
2380#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
2384:  itsLoop:
2384#    lw $t2,($sp)
2388#    addu $sp,$sp,4
2392#    sb $t2,($t1)
2396#    addu $t1,$t1,1
2400#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
2404#    lw $ra,4($sp)
2408#    addu $sp,$sp,8
2412#    addu $t0,$t0,15
2416#    and $t0,$t0,0xfffffffc
2417##...lui $at,65535
2421##...ori $at,$at,0xfffc
2425##...and $t0,$t0,$at
2428#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2432:fcn_intToChar_Lib:
    # save return address
2432#    subu $sp,$sp,4
2436#    sw $ra,($sp)

    # allocate object
2440#    li $s6,2
2444#    move $s7,$zero
2448#    jal newObject

    # get n from string.
2452#    lw $t1,8($sp)

    # store "String" tag into class field
2456#    la $t0,CLASS_String
2460#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2464#    lw $t4,-8($s7) # # data words in source string
2468#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
2469##...slt $at,$t4,$zero
2473##...beq $at,$zero,2492
2476#    and $t4,0xff # mask off object's hash value ...
2477##...lui $at,0
2481##...ori $at,$at,0xff
2485##...and $t4,$t4,$at
2488#    sw $t4,-8($s7) # ... and store back into -8 header-word
2492:  skipMask_intToChar:

    # store data in string
2492#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
2496#    li $t0,-1
2500#    sw $t0,-4($s7)

    # we're returning $s7
2504#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
2508#    lw $ra,4($sp)
2512#    addu $sp,$sp,8

    # return
2516#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
2520:fcn_compareTo_String:
    # get string pointers and check parameter for null
2520#    lw $t0,($sp) # second string
2524#    beq $t0,$zero,nullPtrException
2528#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
2532#    lw $t2,-4($t0) # negative length of second string
2536#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
2540#    slt $t4,$t3,$t2
2544#    slt $t5,$t2,$t3
2548#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
2552#    lw $t2,-8($t0) # # data words in second string
2556#    lw $t3,-8($t1) # # data words in first string
2560#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2564#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2568#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
2572#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
2576#    beq $zero,$t5,skipStrCmpLenzz
2580#    move $t2,$t3
2584:  skipStrCmpLenzz:
2584#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
2588:  cmpLoopzz:
2588#    lw $t3,-8($t1) # word from str2
2592#    lw $t4,-8($t0) # word from str1
2596#    bne $t3,$t4,cmpNotEqualzz
2600#    addu $t1,$t1,4
2604#    addu $t0,$t0,4
2608#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
2612#    j cmpHitLimitzz

2616:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
2616#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2620#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
2624#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
2628:  cmpHitLimitzz:
2628#    move $t0, $t5 # store return value
2632#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2636:readLogicalChar:

    # check if we already have a character
2636#    lw $v0,lastCharRead
2640#    li $t0,-2
2644#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
2648#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2652#    jr $ra # return
    
2656:  doReadCh:
    # we need to actually read a character: read and return
2656#    li $v0,12 # use system call to read a character
2660#    syscall
2664#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2668:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
2668#    blt $s7,$zero arraySizeOutOfBounds
2669##...slt $at,$s7,$zero
2673##...bne $at,$zero,3700

    # mark the fact that we have not yet GC'd for this allocation
2676#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

2680:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
2680#    addu $t0,$s6,$s7
2684#    sll $t0,$t0,2
2688#    addu $t0,$t0,8 # amount of memory needed
2692#    addu $t1,$t0,$s3
2696#    bgtu $t1,$s4,doGC
2697##...sltu $at,$s4,$t1
2701##...bne $at,$zero,2824

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
2704#    move $t2,$s3
2708:  zeroObjLoop:
2708#    sw $zero,($s3)
2712#    lw $zero,($s3)

2716#    addu $s3,4
2720#    bltu $s3,$t1,zeroObjLoop
2721##...sltu $at,$s3,$t1
2725##...bne $at,$zero,2708

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
2728#    sll $t0,$s7,2    # number of post-header bytes
2732#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
2736#    li $t2,255
2740#    bgeu $s6,$t2 firstHeaderLarge
2741##...sltu $at,$s6,$t2
2745##...beq $at,$zero,2792
2748#    lw $t1,prevHashConstant
2752#    addu $t1,0x12b68fd2
2753##...lui $at,4791
2757##...addiu $at,$at,-28718
2761##...addu $t1,$at,$t1
2764#    sw $t1,prevHashConstant # update hash constant
2768#    or $t1,0x80000000 # set top bit
2769##...lui $at,32768
2773##...or $t1,$at,$t1
2776#    and $t1,0xffffff00 # clear low bit
2777##...lui $at,65535
2781##...ori $at,$at,0xff00
2785##...and $t1,$t1,$at
2788#    or $s6,$t1
2792:firstHeaderLarge:
2792#    sw $s6,-8($t0) # store header-1 value
2796#    lw $zero,-8($t0)

    # store second header-value
2800#    sw $s7,-4($t0)   # second header-word
2804#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
2808#    move $s7,$t0
2812#    subu $sp,$sp,4
2816#    sw $t0,($sp)

2820#    jr $ra
    
2824:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
2824#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
2828#    lw $t5,gcCount
2832#    addu $t5,1
2836#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
2840#    subu $sp,$sp,4
2844#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
2848#    lw $t0,cur_seg
2852#    move $t7,$s4
2856#    la $t6,seg1_start
2857##...lui $t6,16
2861##...addiu $t6,$t6,4360
2864#    la $s3,seg0_start
2868#    la $s4,seg0_end
2869##...lui $s4,16
2873##...addiu $s4,$s4,4360
2876#    sw $zero,cur_seg
2880#    bne $t0,$zero,skipGc1
2884#    la $t6,seg0_start
2888#    la $s3,seg1_start
2889##...lui $s3,16
2893##...addiu $s3,$s3,4360
2896#    la $s4,seg1_end
2897##...lui $s4,32
2901##...addiu $s4,$s4,4360
2904#    sw $s5,cur_seg
2908:  skipGc1:
2908#    li $t5,0x80000000
2912#    lw $t0,stack_bottom
2916#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

2920:  gcStackCopyLoop:
2920#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
2924#    sll $t2,$t1,31 # zero iff low bit was zero
2928#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
2932#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
2936#    bleu $t1,$t6,gcTestIterDone1
2937##...sltu $at,$t6,$t1
2941##...beq $at,$zero,3104
2944#    bgtu $t1,$t7,gcTestIterDone1
2945##...sltu $at,$t7,$t1
2949##...bne $at,$zero,3104

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
2952#    lw $t2,-8($t1) # possible forwarding tag
2956#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
2960#    lw $t2,-4($t1) # forwarding pointer: object's new address
2964#    sw $t2,4($t0) # update stack value
2968#    j gcTestIterDone1 # do next iteration

2972:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
2972#    bge $t2,$zero,gcSkip2
2973##...slt $at,$t2,$zero
2977##...beq $at,$zero,2992
2980#    and $t2,0xff #### mask off hash value
2981##...lui $at,0
2985##...ori $at,$at,0xff
2989##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

2992:  gcSkip2:
2992#    sll $t2,$t2,2
2996#    addu $t2,$t2,8
3000#    subu $t4,$t1,$t2 # address of first word of source
3004#    lw $t3,-4($t1) # number of object words (negative means zero)
3008#    bge $t3,$zero,gcH2Neg1
3009##...slt $at,$t3,$zero
3013##...beq $at,$zero,3020
3016#    move $t3,$zero
3020:  gcH2Neg1:
3020#    sll $t3,$t3,2
3024#    addu $t3,$t3,$t1 # address one word past last word of source

3028#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3032#    lw $s0,($t4)
3036#    lw $s1,-8($t1)
3040#    sw $s1,($t4)
3044#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3048:  gCinnerCopy1:
3048#    lw $s0,($t4)
3052#    sw $s0,($s3)
3056#    addu $t4,$t4,4
3060#    addu $s3,$s3,4
3064#    bltu $t4,$t3,gCinnerCopy1
3065##...sltu $at,$t4,$t3
3069##...bne $at,$zero,3048

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3072#    sw $zero,-8($t1) # 0 in first header-slot
3076#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3080#    sw $t2,4($t0)
3084#    lw $zero,-8($t2)
3088#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3092#    j gcTestIterDone1

3096:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3096#    subu $t0,$t0,$t1
3100#    subu $t0,$t0,3

3104:  gcTestIterDone1:
3104#    bgeu $t0,$sp,gcStackCopyLoop
3105##...sltu $at,$t0,$sp
3109##...beq $at,$zero,2920

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3112#    lw $t1,cur_seg
3116#    la $t0,seg0_start
3120#    beq $t1,$zero,gcSkip4
3124#    la $t0,seg1_start
3125##...lui $t0,16
3129##...addiu $t0,$t0,4360


3132:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3132#    bgeu $t0,$s3,gcFinishUp
3133##...sltu $at,$t0,$s3
3137##...beq $at,$zero,3428

    ###### begin outer loop to copy all non-stack-direct objects ######

3140:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
3140#    lw $t1,($t0) # (what will be) first header word for current object
3144#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
3148#    bge $t2,$zero,gcSkip4a # are there hash bits?
3149##...slt $at,$t2,$zero
3153##...beq $at,$zero,3168
3156#    and $t2,0xff # mask off hash bits
3157##...lui $at,0
3161##...ori $at,$at,0xff
3165##...and $t2,$t2,$at
3168:gcSkip4a:    
3168#    sll $t2,$t2,2 # # data bytes
3172#    addu $t2,$t2,8 # to skip header words
3176#    addu $t2,$t0,$t2 # pointer to new object
3180#    lw $t3,-8($t2) # word to swap
3184#    sw $t1,-8($t2) # store header word
3188#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
3192#    lw $t1,-12($t2) # vtable pointer
3196#    li $t0,dataArrayVTableStart # address of vtable for first data array
3200#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
3201##...slt $at,$t1,$t0
3205##...bne $at,$zero,3224

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
3208:  skipToNextObj:
3208#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
3212#    sll $t1,$t1,2 # convert to byte-count
3216#    addu $t0,$t2,$t1 # skip over object
3220#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
3224:  gcNotDataArray:
3224#    lw $t3,-4($t2) # # object words (negative treated as zero)
3228#    bge $t3,$zero,gcH2Neg2
3229##...slt $at,$t3,$zero
3233##...beq $at,$zero,3240
3236#    move $t3,$zero
3240:  gcH2Neg2:
3240#    sll $t3,$t3,2 # # object bytes
3244#    move $t0,$t2 # address of first pointer in object
3248#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
3252#    beq $t0,$s1,gcTestIterDone2
    
3256:  gcNextPointerInObject:
    # get pointer from object
3256#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
3260#    bleu $t1,$t6,gcGoNextPointerSlot
3261##...sltu $at,$t6,$t1
3265##...beq $at,$zero,3408
3268#    bgtu $t1,$t7,gcGoNextPointerSlot
3269##...sltu $at,$t7,$t1
3273##...bne $at,$zero,3408

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3276#    lw $t8,-8($t1) # possible forwarding tag
3280#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
3284#    lw $t8,-4($t1) # forwarding pointer: object's new address
3288#    sw $t8,($t0) # update pointer in object
3292#    j gcGoNextPointerSlot # do next iteration

3296:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
3296#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
3297##...slt $at,$t8,$zero
3301##...beq $at,$zero,3316
3304#    and $t8,0xff # mask off hash bits
3305##...lui $at,0
3309##...ori $at,$at,0xff
3313##...and $t8,$t8,$at

3316:  gcSkip5:
3316#    sll $t8,$t8,2 # bytes in negative-offset portion ...
3320#    addu $t8,$t8,8 # ... add in bytes for header-words
3324#    subu $t4,$t1,$t8 # address of first word of source object
3328#    lw $t3,-4($t1) # # words in positive-offset portion
3332#    bge $t3,$zero,gcNoNeg
3333##...slt $at,$t3,$zero
3337##...beq $at,$zero,3344
3340#    move $t3,$zero # negative treated as zero
3344:  gcNoNeg:
3344#    sll $t3,$t3,2 # bytes in negative-offset portion
3348#    addu $t3,$t3,$t1 # address one word past last word of source

3352#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
3356#    lw $s0,($t4)
3360#    lw $t9,-8($t1)
3364#    sw $t9,($t4)
3368#    sw $s0,-8($t1)

    # copy all source bytes to the target
3372:  gCinnerCopy2:
3372#    lw $s0,($t4)
3376#    sw $s0,($s3)
3380#    addu $t4,$t4,4
3384#    addu $s3,$s3,4
3388#    bltu $t4,$t3,gCinnerCopy2
3389##...sltu $at,$t4,$t3
3393##...bne $at,$zero,3372

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3396#    sw $zero,-8($t1) # 0 in first header-slot
3400#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
3404#    sw $t8,($t0)

3408:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
3408#    addu $t0,$t0,4
3412#    bltu $t0,$s1,gcNextPointerInObject
3413##...sltu $at,$t0,$s1
3417##...bne $at,$zero,3256

3420:  gcTestIterDone2:
3420#    bltu $t0,$s3,gcHeapCopyLoop
3421##...sltu $at,$t0,$s3
3425##...bne $at,$zero,3140

    ###### end outer loop to copy all non-stack-direct objects ######

3428:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
3428#    lw $s2,($sp)
3432#    addu $sp,$sp,4

    # mark us as having already GC'd
3436#    move $t5,$s5

    # go try and allocate again
3440#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3444:vm_init:

    # mark bottom of stack
3444#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
3448#    move $s2,$zero

    #set up the "five" register
3452#    li $s5,5

3456#    la $s3,seg0_start
3460#    la $s4,seg0_end
3461##...lui $s4,16
3465##...addiu $s4,$s4,4360
    
    # return
3468#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3472:divide:
    # get parameters; abort if divisor zero
3472#    lw $t0,($sp)
3476#    lw $t1,8($sp)
3480#    beq $t0,$zero,divByZeroError
    
    # perform division
3484#    div $t1,$t0
3488#    mflo $t0

    # store result, adjust stack and return
3492#    addu $sp,$sp,8 # adjust stack
3496#    sw $t0,($sp) # store result
3500#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3504:remainder:
    # get parameters; abort if divisor zero
3504#    lw $t0,($sp)
3508#    lw $t1,8($sp)
3512#    beq $t0,$zero,divByZeroError
    
    # perform division
3516#    div $t1,$t0
3520#    mfhi $t0

    # store result, adjust stack and return
3524#    addu $sp,$sp,8 # adjust stack
3528#    sw $t0,($sp) # store result
3532#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3536:checkCast:
    # get object, allow immediately if null
3536#    lw $t2,($sp)
3540#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
3544#    lw $t2,-12($t2) # vtable address
3548#    bge $t2,$t1,castException
3549##...slt $at,$t2,$t1
3553##...beq $at,$zero,3724
3556#    blt $t2,$t0,castException
3557##...slt $at,$t2,$t0
3561##...bne $at,$zero,3724
    
    # return, leaving object unchanged on stack
3564:  checkCastReturn:    
3564#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3568:instanceOf:
    # get object, go return false if null
3568#    lw $t2,($sp)
3572#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
3576#    lw $t2,-12($t2) # vtable address
3580#    sge $t0,$t2,$t0 # are we >= the lower limit?
3581##...slt $t0,$t2,$t0
3585##...xori $t0,$t0,0x1
3588#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
3592#    and $t2,$t0,$t1
3596#    sw $t2,($sp)
3600:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
3600#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3604:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
3604#    li $v0,4 # syscall-code for print-string
3608#    syscall
3612:exit:
    # print termination message
3612#    li $v0,4 # syscall-code for print-string
3616#    la $a0,exitString
3620#    syscall

    # print number of garbage collections
3624#    li $v0,4 # syscall-code for print-string
3628#    la $a0,gcCountMsg
3632#    syscall # print "Number of ..."
3636#    lw $a0,gcCount # number of GC's
3640#    li $v0,1 # code for print-int
3644#    syscall
3648#    li $v0,4 # syscall-code for print-string
3652#    la $a0,newlineString
3656#    syscall # print newline

    # terminate execution
3660#    li $v0,10 #syscall-code for "exit"
3664#    syscall

3668:outOfHeapMemory:
3668#    la $a0,heapMemoryMsg
3672#    j exitError
3676:divByZeroError:
3676#    la $a0,divByZeroMsg
3680#    j exitError
3684:strIndexOutOfBounds:
3684#    la $a0,strIndexOutOfBoundsMsg
3688#    j exitError
3692:arrayIndexOutOfBounds:
3692#    la $a0,arrayIndexOutOfBoundsMsg
3696#    j exitError
3700:arraySizeOutOfBounds:
3700#    la $a0,arraySizeOutOfBoundsMsg
3704#    j exitError
3708:nullPtrException:
3708#    la $a0,nullPtrExceptionMsg
3712#    j exitError
3716:badIntegerFormat:
3716#    la $a0,badIntegerFormatMsg
3720#    j exitError
3724:castException:
3724#    la $a0,castExceptionMsg
3728#    j exitError
############## data section ################
    .data
3988:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4004:cur_seg:
    .word 0

4008:lastCharRead:
    .word -2 # -2 => no buffered character
4012:prevHashConstant:
    .word 0x2785173c
4016:gcCount:
    .word 0

4020:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4047:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4070:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
4105:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
4139:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
4172:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
4203:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
4251:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
4272:gcMsg: 
      .asciiz "\nGC!\n"
4278:gcCountMsg: 
      .asciiz "Number of garbage collections: "

4310:nullStr:
    .asciiz "null"
4315:trueString:
    .asciiz "true"
4320:falseString:
    .asciiz "false"
4326:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
4354:newlineString:
    .asciiz "\n"
    
    .align 2
4356:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

4360:seg0_start:
    .space 0x100000
1052936:seg0_end:
1052936:seg1_start:
    .space 0x100000
2101512:seg1_end:
