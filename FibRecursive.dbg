 .data # Program at 5.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
4156:CLASS_Object: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
4176:CLASS_String: # ClassDecl at 0.0
  .word fcn_hashCode_String # MethodDeclNonVoid at 0.0
  .word fcn_equals_String # MethodDeclNonVoid at 0.0
  .word fcn_toString_String # MethodDeclNonVoid at 0.0
  .word fcn_concat_String # MethodDeclNonVoid at 0.0
  .word fcn_substring_String # MethodDeclNonVoid at 0.0
  .word fcn_length_String # MethodDeclNonVoid at 0.0
  .word fcn_charAt_String # MethodDeclNonVoid at 0.0
  .word fcn_compareTo_String # MethodDeclNonVoid at 0.0
4208:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
4212:CLASS_Lib: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
4256:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
4264:CLASS_RunMain: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
4276:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Main ****** # ClassDecl at 5.7
  .byte 205 # 'M' with high bit set # ClassDecl at 5.7
  .byte 97 # 'a' # ClassDecl at 5.7
  .byte 105 # 'i' # ClassDecl at 5.7
  .byte 110 # 'n' # ClassDecl at 5.7
4280:CLASS_Main: # ClassDecl at 5.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_main_Main # MethodDeclVoid at 8.17
  .word fcn_fib_Main # MethodDeclNonVoid at 29.16
4300:END_CLASS_Main: # ClassDecl at 5.7
4300:dataArrayVTableStart: # IntegerType at 0.0
4300:END_CLASS_Object: # ClassDecl at 0.0
  .byte 84 # StringLiteral at 20.15
  .byte 104 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 102 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 98 # StringLiteral at 20.15
  .byte 111 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 97 # StringLiteral at 20.15
  .byte 99 # StringLiteral at 20.15
  .byte 99 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 117 # StringLiteral at 20.15
  .byte 109 # StringLiteral at 20.15
  .byte 98 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 114 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 111 # StringLiteral at 20.15
  .byte 102 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .word CLASS_String # StringLiteral at 20.15
  .word 7 # StringLiteral at 20.15
  .word -24 # StringLiteral at 20.15
4336:strLit_16: # StringLiteral at 20.15
  .byte 32 # StringLiteral at 22.15
  .byte 105 # StringLiteral at 22.15
  .byte 115 # StringLiteral at 22.15
  .byte 32 # StringLiteral at 22.15
  .word CLASS_String # StringLiteral at 22.15
  .word 2 # StringLiteral at 22.15
  .word -4 # StringLiteral at 22.15
4352:strLit_24: # StringLiteral at 22.15
  .byte 46 # StringLiteral at 24.15
  .byte 10 # StringLiteral at 24.15
  .byte 0 # StringLiteral at 24.15
  .byte 0 # StringLiteral at 24.15
  .word CLASS_String # StringLiteral at 24.15
  .word 2 # StringLiteral at 24.15
  .word -2 # StringLiteral at 24.15
4368:strLit_32: # StringLiteral at 24.15
.text
.globl main
0:main:
0#  jal vm_init
4#li $s6,2
8#li $s7,0
12#jal newObject
16#la $t0,CLASS_Main
20#sw $t0,-12($s7)
24#lw $s2,($sp)
28#addu $sp,$sp,4
32#jal fcn_main_Main
36#li $v0,10
40#syscall
44:fcn_main_Main:
44#  subu $sp,$sp,4
48#  sw $ra,($sp)
52#  li $s6,1
56#  li $s7,0
60#  jal newObject
64#  la $t0,CLASS_Lib
68#  sw $t0,-12($s7)
72#  lw $0,($sp)
76#  li $t0,14
80#  subu $sp,$sp,8
84#  sw $s5,4($sp)
88#  sw $t0,($sp)
92#  lw $0,($sp)
96#  subu $sp,$sp,4
100#  sw $s2,($sp)
104#  lw $t0,4($sp)
108#  subu $sp,$sp,8
112#  sw $s5,4($sp)
116#  sw $t0,($sp)
120#  lw $t0,8($sp)
124#  sw $s2,8($sp)
128#  move $s2, $t0
132#  lw $t0, -12($s2)
136#  lw $t0,16($t0)
140#  jalr $t0
144#  addu $sp,$sp,8
148#  lw $s2,($sp)
152#  addu $sp,$sp,4
156#  subu $sp,$sp,8
160#  sw $s5,4($sp)
164#  sw $t0,($sp)
168#  lw $0,($sp)
172#  lw $t0,16($sp)
176#  subu $sp,$sp,4
180#  sw $t0,($sp)
184#  la $t0, strLit_16
188#  subu $sp,$sp,4
192#  sw $t0,($sp)
196#  lw $t0,4($sp)
200#  sw $s2,4($sp)
204#  move $s2, $t0
208#  lw $t0, -12($s2)
212#  lw $t0,24($t0)
216#  jalr $t0
220#  addu $sp,$sp,4
224#  lw $s2,($sp)
228#  addu $sp,$sp,4
232#  subu $sp,$sp,4
236#  sw $t0,($sp)
240#  addu $sp,$sp,4
244#  lw $t0,16($sp)
248#  subu $sp,$sp,4
252#  sw $t0,($sp)
256#  lw $t0,12($sp)
260#  subu $sp,$sp,8
264#  sw $s5,4($sp)
268#  sw $t0,($sp)
272#  lw $t0,8($sp)
276#  sw $s2,8($sp)
280#  move $s2, $t0
284#  lw $t0, -12($s2)
288#  lw $t0,32($t0)
292#  jalr $t0
296#  addu $sp,$sp,8
300#  lw $s2,($sp)
304#  addu $sp,$sp,4
308#  subu $sp,$sp,4
312#  sw $t0,($sp)
316#  addu $sp,$sp,4
320#  lw $t0,16($sp)
324#  subu $sp,$sp,4
328#  sw $t0,($sp)
332#  la $t0, strLit_24
336#  subu $sp,$sp,4
340#  sw $t0,($sp)
344#  lw $t0,4($sp)
348#  sw $s2,4($sp)
352#  move $s2, $t0
356#  lw $t0, -12($s2)
360#  lw $t0,24($t0)
364#  jalr $t0
368#  addu $sp,$sp,4
372#  lw $s2,($sp)
376#  addu $sp,$sp,4
380#  subu $sp,$sp,4
384#  sw $t0,($sp)
388#  addu $sp,$sp,4
392#  lw $t0,16($sp)
396#  subu $sp,$sp,4
400#  sw $t0,($sp)
404#  lw $t0,4($sp)
408#  subu $sp,$sp,8
412#  sw $s5,4($sp)
416#  sw $t0,($sp)
420#  lw $t0,8($sp)
424#  sw $s2,8($sp)
428#  move $s2, $t0
432#  lw $t0, -12($s2)
436#  lw $t0,32($t0)
440#  jalr $t0
444#  addu $sp,$sp,8
448#  lw $s2,($sp)
452#  addu $sp,$sp,4
456#  subu $sp,$sp,4
460#  sw $t0,($sp)
464#  addu $sp,$sp,4
468#  lw $t0,16($sp)
472#  subu $sp,$sp,4
476#  sw $t0,($sp)
480#  la $t0, strLit_32
484#  subu $sp,$sp,4
488#  sw $t0,($sp)
492#  lw $t0,4($sp)
496#  sw $s2,4($sp)
500#  move $s2, $t0
504#  lw $t0, -12($s2)
508#  lw $t0,24($t0)
512#  jalr $t0
516#  addu $sp,$sp,4
520#  lw $s2,($sp)
524#  addu $sp,$sp,4
528#  subu $sp,$sp,4
532#  sw $t0,($sp)
536#  addu $sp,$sp,4
540#  addu $sp,$sp,20
544#  addu $sp,$sp,0
548#  lw $ra,($sp)
552#  addu $sp,$sp,4
556#  jr $ra
.globl fcn_fib_Main
560:fcn_fib_Main:
560#  subu $sp,$sp,4
564#  sw $ra,($sp)
568#  lw $t0,4($sp)
572#  subu $sp,$sp,8
576#  sw $s5,4($sp)
580#  sw $t0,($sp)
584#  lw $0,($sp)
588#  lw $t0,12($sp)
592#  subu $sp,$sp,8
596#  sw $s5,4($sp)
600#  sw $t0,($sp)
604#  li $t0,1
608#  subu $sp,$sp,8
612#  sw $s5,4($sp)
616#  sw $t0,($sp)
620#  lw $t2,($sp)
624#  addu $sp,$sp,8
628#  lw $t1,($sp)
632#  addu $sp,$sp,8
636#  sgt $t0,$t1,$t2
640#  subu $sp,$sp,4
644#  sw $t0,($sp)
648#  lw $t0,($sp)
652#  addu $sp,$sp,4
656#  beq $t0,$0,if_else_61
660#  lw $t0,0($sp)
664#  subu $sp,$sp,8
668#  sw $s5,4($sp)
672#  sw $t0,($sp)
676#  subu $sp,$sp,4
680#  sw $s2,($sp)
684#  lw $t0,24($sp)
688#  subu $sp,$sp,8
692#  sw $s5,4($sp)
696#  sw $t0,($sp)
700#  li $t0,1
704#  subu $sp,$sp,8
708#  sw $s5,4($sp)
712#  sw $t0,($sp)
716#  lw $t2,($sp)
720#  addu $sp,$sp,8
724#  lw $t1,($sp)
728#  addu $sp,$sp,8
732#  subu $t0,$t1,$t2
736#  subu $sp,$sp,8
740#  sw $s5,4($sp)
744#  sw $t0,($sp)
748#  lw $t0,8($sp)
752#  sw $s2,8($sp)
756#  move $s2, $t0
760#  lw $t0, -12($s2)
764#  lw $t0,16($t0)
768#  jalr $t0
772#  addu $sp,$sp,8
776#  lw $s2,($sp)
780#  addu $sp,$sp,4
784#  subu $sp,$sp,8
788#  sw $s5,4($sp)
792#  sw $t0,($sp)
796#  subu $sp,$sp,4
800#  sw $s2,($sp)
804#  lw $t0,32($sp)
808#  subu $sp,$sp,8
812#  sw $s5,4($sp)
816#  sw $t0,($sp)
820#  li $t0,2
824#  subu $sp,$sp,8
828#  sw $s5,4($sp)
832#  sw $t0,($sp)
836#  lw $t2,($sp)
840#  addu $sp,$sp,8
844#  lw $t1,($sp)
848#  addu $sp,$sp,8
852#  subu $t0,$t1,$t2
856#  subu $sp,$sp,8
860#  sw $s5,4($sp)
864#  sw $t0,($sp)
868#  lw $t0,8($sp)
872#  sw $s2,8($sp)
876#  move $s2, $t0
880#  lw $t0, -12($s2)
884#  lw $t0,16($t0)
888#  jalr $t0
892#  addu $sp,$sp,8
896#  lw $s2,($sp)
900#  addu $sp,$sp,4
904#  subu $sp,$sp,8
908#  sw $s5,4($sp)
912#  sw $t0,($sp)
916#  lw $t2,($sp)
920#  addu $sp,$sp,8
924#  lw $t1,($sp)
928#  addu $sp,$sp,8
932#  addu $t0,$t1,$t2
936#  subu $sp,$sp,8
940#  sw $s5,4($sp)
944#  sw $t0,($sp)
948#  lw $t0,($sp)
952#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 34.13; stackHeight = 28
956#  sw $t0,8($sp)
960#j if_done_61
964:if_else_61:
964:if_done_61:
964#  addu $sp,$sp,16
968#  lw $t0,-8($sp)
972#  subu $sp,$sp,8
976#  sw $s5,4($sp)
980#  sw $t0,($sp)
984#  lw $t0,($sp)
988#  addu $sp,$sp,8
992#  addu $sp,$sp,0
996#  lw $ra,($sp)
1000#  addu $sp,$sp,4
1004#  jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1008:fcn_hashCode_Object:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
1008#    lw $t0,-8($s2) # get word with hash bits from this
1012#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
1016#    addu $t0,$t1

1020#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1024:fcn_equals_Object:
1024#    move $t0,$s2 # first pointer (this)
1028#    lw $t1,($sp) # second pointer
1032#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
1033##...subu $at,$t0,$t1
1037##...sltiu $t0,$at,1

1040#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1044:fcn_hashCode_String:
1044#    move $t0,$s2 # put this pointer in t0

1048#    li $t2,0 # current hash value
1052#    lw $t1,-4($t0) # negative of number of characters in string
1056#    beq $t1,$zero,done_hashCode_String # if zero length => done
1060#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
1064#    and $t0,0xfffffffc # adjust for padding
1065##...lui $at,65535
1069##...ori $at,$at,0xfffc
1073##...and $t0,$t0,$at
1076#    subu $t1,$t0,$t1 # address at end of string +12
1080:loop_hashCode_String:    
1080#    sll $t4,$t2,5 # multiply by 32
1084#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
1088#    lbu $t3,-12($t0) # current character
1092#    addu $t2,$t3 # add in current character
1096#    addu $t0,1 # go to next character's address
1100#    bne $t0,$t1,loop_hashCode_String # loop back if more
1104:done_hashCode_String:    

    # push int on stack
1104#    move $t0, $t2 # put $t2 in return slot
1108#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
1112:fcn_toString_Object:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
1112#    subu $sp,4
1116#    sw $ra,($sp)
    
    # get hash value
1120#    lw $t2,-12($s2) # vtable address
1124#    lw $t0,($t2) # method address
1128#    jalr $t0
1132#    subu $sp,8 # push result (int in $t0) on stack
1136#    sw $s5,4($sp)
1140#    sw $t0,($sp)

    # compute print-size of hash value
1144#    li $t0, 1
1148#    lw $t1, ($sp)
1152#    srl $t1,$t1,4
1156#    beq $t1,$zero,toString_skip_loop
1160:toString_loop_top:
1160#    addu $t0,1
1164#    srl $t1,$t1,4
1168#    bne $t1,$zero,toString_loop_top
1172:toString_skip_loop:
1172#    subu $sp,8
1176#    sw $s5,4($sp)
1180#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
1184#    lw $t2,-12($s2) # vtable address
1188#    move $t0,$t2
1192:toString_checkTagBit:
1192#    subu $t0,1
1196#    lb $t1,($t0)
1200#    and $t1,0x80
1201##...lui $at,0
1205##...ori $at,$at,0x80
1209##...and $t1,$t1,$at
1212#    beq $t1,$zero,toString_checkTagBit
1216#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
1220#    subu $sp,8
1224#    sw $t1,($sp)
1228#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
1232#    move $s7,$zero # -4 offset header word
1236#    lw $t4,8($sp) # bytes for hash value
1240#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
1244#    addu $t4,8
1248#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
1252#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

1256#    li $t0,CLASS_String # store string vtable address into ...
1260#    sw $t0,-12($s7) # ... -12 offset in object header
1264#    lw $t2,-12($s2) # our object's vtable address
1268#    lw $t5,4($sp) # number characters in prefix
1272#    lw $t1,12($sp) # number of characters in hashcode
1276#    addu $t3,$t1,$t5 # number of characters in string ...
1280#    addu $t3,1 # ... including the '@' character
1284#    subu $t0,$zero,$t3 # store negated length into ...
1288#    sw $t0,-4($s7) # ... -4 offset header word
1292#    lw $t0,-8($s7) # get -8 offset header-word
1296#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
1297##...slt $at,$t0,$zero
1301##...beq $at,$zero,1320
1304#    and $t0,0xff # mask off object's hash value ...
1305##...lui $at,0
1309##...ori $at,$at,0xff
1313##...and $t0,$t0,$at
1316#    sw $t0,-8($s7) # ... and store back into -8 header-word
1320:skipMask_toString:
1320#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
1324#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
1328#    subu $t4,$t2,$t5
1332:toString_copyLoop:    
1332#    lb $t3,($t4)
1336#    and $t3,0x7f # mask off sign bit (in case first word)
1337##...lui $at,0
1341##...ori $at,$at,0x7f
1345##...and $t3,$t3,$at
1348#    sb $t3,-8($t0)
1352#    addu $t4,1
1356#    addu $t0,1
1360#    blt $t4,$t2,toString_copyLoop
1361##...slt $at,$t4,$t2
1365##...bne $at,$zero,1332

    # copy the '@' sign
1368#    li $t3,'@'
1372#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
1376#    addu $t2,$t0,$t1 # address of last byte in string to store +8
1380#    lw $t3,20($sp) # hash code to print
1384:toString_hashCopyLoop:
1384#    and $t4,$t3,0xf
1388#    srl $t3,4
1392#    lb $t4,hexChars($t4)
1396#    sb $t4,-8($t2)
1400#    subu $t2,$t2,1
1404#    bgt $t2,$t0,toString_hashCopyLoop
1405##...slt $at,$t0,$t2
1409##...bne $at,$zero,1384

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
1412#    addu $sp,28
1416#    lw $ra,($sp)
1420#    addu $sp,4
1424#    move $t0, $s7 # return string we created
1428#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1432:fcn_equals_String:
    
    # quick test for obvious false
1432#    lw $t0,($sp) # second parameter
1436#    beq $t0,$zero,goEsFalse # go return false if null
1440#    lw $t1,-12($t0) # vtable pointer
1444#    la $t2,CLASS_String # string vtable pointer
1448#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1452#    subu $sp,12
1456#    sw $ra,8($sp)
1460#    sw $s2,4($sp)
1464#    sw $t0,($sp)
1468#    jal fcn_compareTo_String
1472#    lw $s2, 4($sp) #restore this pointer and pop parameters
1476#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1480#    seq $t0,$t0,$zero
1481##...subu $at,$t0,$zero
1485##...sltiu $t0,$at,1

    # pop return address and return $t0
1488#    lw $ra,($sp)
1492#    addu $sp,4

1496#    jr $ra # return
    
1500:goEsFalse:
    # put 0 in $t0 and return
1500#    li $t0, 0
1504#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1508:fcn_toString_String:
    #we are a string, so return this.
1508#    move $t0, $s2
1512#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1516:fcn_readLine_Lib:
    
1516#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1520#    sw $ra, 4($sp) # save $ra
1524#    move $t1,$sp # save "original" sp

1528:  doRead:

    # read the character
1528#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1532#    subu $t2,$v0,13
1536#    bne $t2,$zero,notReturnRL
1540#    jal readLogicalChar
1544#    subu $t2,$v0,10 # check for newline
1548#    beq $t2,$zero,foundNewLine
1552#    sw $v0,lastCharRead # push back character into queue
1556#    j foundNewLine # go process the line

1560:  notReturnRL:

    # at this point, $v0 has our character

1560#    subu $t0,$v0,10
1564#    beq $t0,$zero,foundNewLine
1568#    blt $v0,$zero,foundEof
1569##...slt $at,$v0,$zero
1573##...bne $at,$zero,1588

    # we have a character, so push it onto stack
1576#    subu $sp,$sp,4
1580#    sw $v0,($sp)

    # loop back up to get next character
1584#    j doRead

1588:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1588#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
1592#    li $s7, 0 # return-value: null
1596#    j rlReturn # return

1600:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
1600#    subu $t0,$t1,$sp # number of chars we read (times 4)
1604#    srl $s6,$t0,2 # number of words on stack with chars
1608#    subu $sp,$sp,4 # push char-count ...
1612#    sw $s6,($sp) # ... onto stack
1616#    addu $t2,$t0,5 # GC tag, incl. for count-word
1620#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
1624#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1628#    srl $s6,$s6,2  # data words in object
1632#    move $s7,$zero # object words in object
1636#    jal newObject  # allocate space
    
    # store header words
1640#    la $t0,CLASS_String
1644#    sw $t0,-12($s7)# store class tag (String) into object
1648#    lw $t2,4($sp) # char-count
1652#    sll $t1,$t2,2 # 4 times number of chars
1656#    subu $t2,$zero,$t2 # negative of char-count
1660#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
1664#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
1668#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
1669##...slt $at,$t0,$zero
1673##...beq $at,$zero,1692
1676#    and $t0,0xff # mask off object's hash value ...
1677##...lui $at,0
1681##...ori $at,$at,0xff
1685##...and $t0,$t0,$at
1688#    sw $t0,-8($s7) # ... and store back into -8 header-word
1692:  skipMask_readLine:

1692#    sll $t0,$t0,2 # data bytes in object
1696#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
1700#    subu $t0,$t0,$t2 # place to store last character (plus 9)
1704#    addu $sp,$sp,8 # pop redundant object-pointer and count
1708#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

1712#    beq $sp,$t1,rlReturn
1716:  charCopyLoop:
1716#    lw $t2,($sp)
1720#    sb $t2,-9($t0)
1724#    addu $sp,$sp,4
1728#    subu $t0,$t0,1
1732#    bne $sp,$t1,charCopyLoop
1736:  rlReturn:

1736#    lw $ra, 4($sp)
1740#    addu $sp, 8   # pop $ra and pointless word off stack
1744#    move $t0, $s7 # return string we allocated in $s7
1748#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1752:fcn_readInt_Lib:

    # save $ra by pushing onto stack
1752#    subu $sp,$sp,4
1756#    sw $ra,($sp)

1760:  riSkipWhiteLoop:
    # read a character
1760#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
1764#    subu $t0,$v0,32
1768#    bgt $t0,$zero,nonWhite
1769##...slt $at,$zero,$t0
1773##...bne $at,$zero,1816
1776#    beq $t0,$zero,riSkipWhiteLoop # start over if space
1780#    subu $t0,$v0,10
1784#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
1788#    subu $t0,$v0,9
1792#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
1796#    subu $t0,$v0,13
1800#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1804#    subu $t0,$v0,12
1808#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1812#    j badIntegerFormat # illegal integer char: abort program

1816:  nonWhite:
1816#    subu $t0,$v0,'-'
1820#    li $t4,1 # final multiplier
1824#    bne $t0,$zero,helpReadInt # go read
1828#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
1832#    jal readLogicalChar

1836:  helpReadInt:
1836#    li $t2,10
1840#    subu $t1,$v0,'0' # convert digit to 0-9 value
1844#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
1845##...sltu $at,$t1,$t2
1849##...beq $at,$zero,4132
1852#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

1856:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

1856#    jal readLogicalChar # read next character
1860#    subu $t1,$v0,'0' # convert digit to 0-9 value
1864#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
1865##...sltu $at,$t1,$t2
1869##...beq $at,$zero,1888

1872#    mul $t3,$t3,$t2 # multiply old value by 10
1873##...mult $t3,$t2
1877##...mflo $t3
1880#    addu $t3,$t3,$t1 # add in value of new digit
1884#    j digitLoop

1888:  doneDigitLoop:

    # "push back" unused character into queue
1888#    sw $v0,lastCharRead

    # restore return address
1892#    lw $ra,($sp)
1896#    addu $sp, 4

    # multiply by sign and put return value in $t0
1900#    mult $t3,$t4 # multiply to account for poss. minus sign
1904#    mflo $t3
1908#    move $t0, $t3
    
    # return
1912#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1916:fcn_readChar_Lib:

    # save $ra by pushing onto stack
1916#    subu $sp,$sp,4
1920#    sw $ra,($sp)

      # read the character
1924#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
1928#    lw $ra,($sp)
1932#    addu $sp, 4
1936#    move $t0, $v0

    # return
1940#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
1944:fcn_printStr_Lib:
    # check for null, printing "(null)", if so
1944#    lw $t0,($sp)
1948#    bne $t0,$zero,psNotNull

    # print "(null)"
1952#    la $a0,nullStr
1956#    li $v0,4
1960#    syscall
1964#    j donePrintStr
    
1968:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1968#    subu $t0,$t0,8
1972#    lw $t1,($t0) # number of data words, but needs modification
1976#    blt $t1,$zero,skipPrintStr1
1977##...slt $at,$t1,$zero
1981##...bne $at,$zero,2000
1984#    and $t1,0xff # mask out all but low byte
1985##...lui $at,0
1989##...ori $at,$at,0xff
1993##...and $t1,$t1,$at
1996#    b skipPrintStr2
2000:skipPrintStr1:
2000#    and $t1,0x7ffffff
2001##...lui $at,2047
2005##...ori $at,$at,0xffff
2009##...and $t1,$t1,$at
2012:skipPrintStr2:    
2012#    sll $t1,$t1,2
2016#    subu $t1,$t0,$t1 # first word in string
2020#    lw $t0,4($t0) # negative of string-length
2024#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
2028#    beq $t0,$t1,donePrintStr
2032:  psLoop:
2032#    lb $a0,($t1) # next byte
2036#    li $v0,11 # code for printing char
2040#        syscall # print the char
2044#    addu $t1,$t1,1 # go to next char
2048#    blt $t1,$t0,psLoop
2049##...slt $at,$t1,$t0
2053##...bne $at,$zero,2032

2056:  donePrintStr:
2056#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
2060:fcn_printInt_Lib:
2060#    lw $a0,($sp)

    # print it
2064#    li $v0,1 # code for print-int
2068#    syscall

    # return
2072#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
2076:fcn_printBool_Lib:
    # pop value off stack, along with 'this'
2076#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
2080#    la $a0,falseString
2084#    beq $t0,$zero,skipPB
2088#    la $a0,trueString
2092:  skipPB:
2092#    li $v0,4 # code for print-string
2096#    syscall

    # return
2100#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
2104:fcn_substring_String:

    # save $ra by pushing onto stack
2104#    subu $sp,$sp,4
2108#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
2112#    move $t0,$s2
2116#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
2120#    lw $t0,-4($t0) # negative of string length
2124#    subu $t0,$zero,$t0 # string length
2128#    lw $t1,4($sp) # k
2132#    lw $t2,12($sp) # n
2136#    bgt $zero,$t2,strIndexOutOfBounds
2137##...slt $at,$t2,$zero
2141##...bne $at,$zero,4100
2144#    bgt $t2,$t1,strIndexOutOfBounds
2145##...slt $at,$t1,$t2
2149##...bne $at,$zero,4100
2152#    bgt $t1,$t0,strIndexOutOfBounds
2153##...slt $at,$t0,$t1
2157##...bne $at,$zero,4100

    # allocate memory
2160#    subu $s6,$t1,$t2 # # chars in target-string
2164#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2168#    srl $s6,$s6,2 # convert bytes-count to word-count
2172#    move $s7,$zero # (no object-bytes in string)
2176#    jal newObject

    # store "String" tag in object-type field
2180#    la $t0,CLASS_String
2184#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
2188#    lw $t4,-8($s7) # data words in source string
2192#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
2193##...slt $at,$t4,$zero
2197##...beq $at,$zero,2216
2200#    and $t4,0xff # mask off object's hash value ...
2201##...lui $at,0
2205##...ori $at,$at,0xff
2209##...and $t4,$t4,$at
2212#    sw $t4,-8($s7) # ... and store back into -8 header-word
2216:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
2216#    lw $t1,8($sp) # k
2220#    lw $t2,16($sp) # n
2224#    subu $t0,$t2,$t1 # value to store
2228#    sw $t0,-4($s7) # store value
    
2232#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
2236#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
2240#    lw $t4,-8($t3) # data words in source string
2244#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
2248#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2252#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2256#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2260#    lw $t2,-8($s7)   # data words in target string
2264#    sll $t2,$t2,2    # data bytes in target string
2268#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
2272:  subCopyLoopzz:
2272#    lb $t4,-8($t3)
2276#    sb $t4,-8($t2)
2280#    addu $t2,$t2,1
2284#    addu $t3,$t3,1
2288#    blt $t3,$t1,subCopyLoopzz
2289##...slt $at,$t3,$t1
2293##...bne $at,$zero,2272
    
2296:  doneSubCopyzz:
    # restore return address, store return value, pop stack
2296#    lw $ra,4($sp) # restore $ra
2300#    addu $sp,$sp,8 # pop ra, and allocated newObject
2304#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
2308#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
2312:fcn_length_String:

    # the length is the negative of 4($s2)
2312#    lw $t0,-4($s2) # -length
2316#    subu $t0,$zero,$t0

    # return
2320#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
2324:fcn_concat_String:
    # save $ra by pushing onto stack
2324#    subu $sp,$sp,4
2328#    sw $ra, ($sp)

    # get string pointers and check parameter for null
2332#    lw $t0,4($sp)
2336#    beq $t0,$zero,nullPtrException
2340#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
2344#    lw $t0,-4($t0) # negative size of second object
2348#    lw $t1,-4($t1) # negative size of first object
2352#    addu $s6,$t0,$t1 # sum of negative sizes
2356#    sra $s6,$s6,2 # negative word-size of char part
2360#    subu $s6,$zero,$s6 # word size of char part
2364#    addu $s6,$s6,1 # data word size, including v-table word
2368#    move $s7,$zero
2372#    jal newObject

    # store String vtable address in vtable address field
2376#    la $t0,CLASS_String
2380#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2384#    lw $t4,-8($s7) # # data words in source string
2388#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
2389##...slt $at,$t4,$zero
2393##...beq $at,$zero,2412
2396#    and $t4,0xff # mask off object's hash value ...
2397##...lui $at,0
2401##...ori $at,$at,0xff
2405##...and $t4,$t4,$at
2408#    sw $t4,-8($s7) # ... and store back into -8 header-word
2412:skipMask_concat:

2412#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2416#    move $t1,$s2   # first object
2420#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2424#    lw $t2,-4($t0) # negative length of second object
2428#    lw $t3,-4($t1) # negative length of first object
2432#    addu $t4,$t2,$t3 # sum of negative lengths
2436#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2440#    lw $t4,-8($t1) # # data words in first string
2444#    sll $t4,$t4,2 # # data bytes in first string
2448#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2452#    lw $t4,-8($s7) # # data words in new string
2456#    sll $t4,$t4,2 # # data bytes in new string
2460#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2464#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2468#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2472:  concatLoop1zz:
2472#    lb $t4,-8($t1)
2476#    sb $t4,-8($s7)
2480#    addu $s7,$s7,1
2484#    addu $t1,$t1,1
2488#    blt $t1,$t3,concatLoop1zz
2489##...slt $at,$t1,$t3
2493##...bne $at,$zero,2472
2496:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2496#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2500#    lw $t4,-8($t0) # # data words in second string
2504#    sll $t4,$t4,2 # # data bytes in second string
2508#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2512#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2516:  concatLoop2zz:
2516#    lb $t4,-8($t1)
2520#    sb $t4,-8($s7)
2524#    addu $s7,$s7,1
2528#    addu $t1,$t1,1
2532#    blt $t1,$t3,concatLoop2zz
2533##...slt $at,$t1,$t3
2537##...bne $at,$zero,2516
2540:  doneConcatLoop2zz:
 
2540:  concatRtnzz:
    # return
2540#    move $t0, $t9 # put saved return string in $t0
2544#    lw $ra, 4($sp)
2548#    addu $sp, 8 # pop ra and allocated newObject
2552#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
2556:fcn_charAt_String:
    # get string
2556#    move $t0,$s2

    # check that index is in bounds
2560#    lw $t1,-4($t0) # negative of # data words in string
2564#    subu $t3,$zero,$t1 # # chars in string
2568#    lw $t2,($sp) # index
2572#    bgeu $t2,$t3,strIndexOutOfBounds
2573##...sltu $at,$t2,$t3
2577##...beq $at,$zero,4100

    # access element
2580#    lw $t1,-8($t0) # # data words in object
2584#    sll $t1,$t1,2 # - byte-offset from end of chars
2588#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2592#    addu $t0,$t0,$t1 # - address of our char, offset by 8
2596#    lb $t0,-8($t0) # our char

    # return
2600#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
2604:fcn_intToString_Lib:

    # save return address on stack; allocate space for dummy GC tag
2604#    subu $sp,$sp,8
2608#    sw $ra,4($sp)

    # save current sp
2612#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
2616#    li $t3,10

    # get argument, negate if negative
2620#    lw $t1,8($sp)
2624#    bge $t1,$zero,itsNonNegLoop
2625##...slt $at,$t1,$zero
2629##...beq $at,$zero,2636
2632#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
2636:  itsNonNegLoop:
2636#    divu $t1,$t3
2640#    mflo $t1 # quotient
2644#    mfhi $t4 # remainder
2648#    addu $t4,$t4,'0' # turn remainder into digit
2652#    subu $sp,$sp,4
2656#    sw $t4,($sp) # push digit onto stack
2660#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
2664#    lw $t4,8($t0)
2668#    bge $t4,$zero,itsSkipNeg
2669##...slt $at,$t4,$zero
2673##...beq $at,$zero,2688
2676#    li $t4,'-'
2680#    subu $sp,$sp,4
2684#    sw $t4,($sp)
2688:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
2688#    subu $s6,$t0,$sp
2692#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
2696#    sw $t3,($t0)
2700#    srl $s6,$s6,2
2704#    subu $sp,$sp,4
2708#    sw $s6,($sp)
    
    # allocate memory
2712#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2716#    srl $s6,$s6,2
2720#    move $s7,$zero # no "object" words in object
2724#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
2728#    lw $t0,4($sp)
2732#    addu $sp,$sp,8

    # store "String" tag into class field
2736#    subu $s7,$s7,8 # address of header-1 word
2740#    la $t1,CLASS_String
2744#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
2748#    lw $t4,($s7) # # data words in source string
2752#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
2753##...slt $at,$t4,$zero
2757##...beq $at,$zero,2776
2760#    and $t4,0xff # mask off object's hash value ...
2761##...lui $at,0
2765##...ori $at,$at,0xff
2769##...and $t4,$t4,$at
2772#    sw $t4,($s7) # ... and store back into -8 header-word
2776:skipMask_intToString:
    
    # store negative of char-count into header-2 word
2776#    subu $t0,$zero,$t0
2780#    sw $t0,4($s7)

2784#    lw $t1,($s7) # number of data words in string
2788#    sll $t1,$t1,2 # number data bytes in string
2792#    subu $t1,$s7,$t1 # first location to store chars in string
2796#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
2800:  itsLoop:
2800#    lw $t2,($sp)
2804#    addu $sp,$sp,4
2808#    sb $t2,($t1)
2812#    addu $t1,$t1,1
2816#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
2820#    lw $ra,4($sp)
2824#    addu $sp,$sp,8
2828#    addu $t0,$t0,15
2832#    and $t0,$t0,0xfffffffc
2833##...lui $at,65535
2837##...ori $at,$at,0xfffc
2841##...and $t0,$t0,$at
2844#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2848:fcn_intToChar_Lib:
    # save return address
2848#    subu $sp,$sp,4
2852#    sw $ra,($sp)

    # allocate object
2856#    li $s6,2
2860#    move $s7,$zero
2864#    jal newObject

    # get n from string.
2868#    lw $t1,8($sp)

    # store "String" tag into class field
2872#    la $t0,CLASS_String
2876#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2880#    lw $t4,-8($s7) # # data words in source string
2884#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
2885##...slt $at,$t4,$zero
2889##...beq $at,$zero,2908
2892#    and $t4,0xff # mask off object's hash value ...
2893##...lui $at,0
2897##...ori $at,$at,0xff
2901##...and $t4,$t4,$at
2904#    sw $t4,-8($s7) # ... and store back into -8 header-word
2908:  skipMask_intToChar:

    # store data in string
2908#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
2912#    li $t0,-1
2916#    sw $t0,-4($s7)

    # we're returning $s7
2920#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
2924#    lw $ra,4($sp)
2928#    addu $sp,$sp,8

    # return
2932#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
2936:fcn_compareTo_String:
    # get string pointers and check parameter for null
2936#    lw $t0,($sp) # second string
2940#    beq $t0,$zero,nullPtrException
2944#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
2948#    lw $t2,-4($t0) # negative length of second string
2952#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
2956#    slt $t4,$t3,$t2
2960#    slt $t5,$t2,$t3
2964#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
2968#    lw $t2,-8($t0) # # data words in second string
2972#    lw $t3,-8($t1) # # data words in first string
2976#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2980#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2984#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
2988#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
2992#    beq $zero,$t5,skipStrCmpLenzz
2996#    move $t2,$t3
3000:  skipStrCmpLenzz:
3000#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
3004:  cmpLoopzz:
3004#    lw $t3,-8($t1) # word from str2
3008#    lw $t4,-8($t0) # word from str1
3012#    bne $t3,$t4,cmpNotEqualzz
3016#    addu $t1,$t1,4
3020#    addu $t0,$t0,4
3024#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
3028#    j cmpHitLimitzz

3032:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
3032#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3036#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
3040#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
3044:  cmpHitLimitzz:
3044#    move $t0, $t5 # store return value
3048#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3052:readLogicalChar:

    # check if we already have a character
3052#    lw $v0,lastCharRead
3056#    li $t0,-2
3060#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
3064#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3068#    jr $ra # return
    
3072:  doReadCh:
    # we need to actually read a character: read and return
3072#    li $v0,12 # use system call to read a character
3076#    syscall
3080#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3084:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
3084#    blt $s7,$zero arraySizeOutOfBounds
3085##...slt $at,$s7,$zero
3089##...bne $at,$zero,4116

    # mark the fact that we have not yet GC'd for this allocation
3092#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

3096:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
3096#    addu $t0,$s6,$s7
3100#    sll $t0,$t0,2
3104#    addu $t0,$t0,8 # amount of memory needed
3108#    addu $t1,$t0,$s3
3112#    bgtu $t1,$s4,doGC
3113##...sltu $at,$s4,$t1
3117##...bne $at,$zero,3240

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
3120#    move $t2,$s3
3124:  zeroObjLoop:
3124#    sw $zero,($s3)
3128#    lw $zero,($s3)

3132#    addu $s3,4
3136#    bltu $s3,$t1,zeroObjLoop
3137##...sltu $at,$s3,$t1
3141##...bne $at,$zero,3124

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
3144#    sll $t0,$s7,2    # number of post-header bytes
3148#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
3152#    li $t2,255
3156#    bgeu $s6,$t2 firstHeaderLarge
3157##...sltu $at,$s6,$t2
3161##...beq $at,$zero,3208
3164#    lw $t1,prevHashConstant
3168#    addu $t1,0x12b68fd2
3169##...lui $at,4791
3173##...addiu $at,$at,-28718
3177##...addu $t1,$at,$t1
3180#    sw $t1,prevHashConstant # update hash constant
3184#    or $t1,0x80000000 # set top bit
3185##...lui $at,32768
3189##...or $t1,$at,$t1
3192#    and $t1,0xffffff00 # clear low bit
3193##...lui $at,65535
3197##...ori $at,$at,0xff00
3201##...and $t1,$t1,$at
3204#    or $s6,$t1
3208:firstHeaderLarge:
3208#    sw $s6,-8($t0) # store header-1 value
3212#    lw $zero,-8($t0)

    # store second header-value
3216#    sw $s7,-4($t0)   # second header-word
3220#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
3224#    move $s7,$t0
3228#    subu $sp,$sp,4
3232#    sw $t0,($sp)

3236#    jr $ra
    
3240:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
3240#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
3244#    lw $t5,gcCount
3248#    addu $t5,1
3252#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
3256#    subu $sp,$sp,4
3260#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
3264#    lw $t0,cur_seg
3268#    move $t7,$s4
3272#    la $t6,seg1_start
3273##...lui $t6,16
3277##...addiu $t6,$t6,4740
3280#    la $s3,seg0_start
3284#    la $s4,seg0_end
3285##...lui $s4,16
3289##...addiu $s4,$s4,4740
3292#    sw $zero,cur_seg
3296#    bne $t0,$zero,skipGc1
3300#    la $t6,seg0_start
3304#    la $s3,seg1_start
3305##...lui $s3,16
3309##...addiu $s3,$s3,4740
3312#    la $s4,seg1_end
3313##...lui $s4,32
3317##...addiu $s4,$s4,4740
3320#    sw $s5,cur_seg
3324:  skipGc1:
3324#    li $t5,0x80000000
3328#    lw $t0,stack_bottom
3332#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

3336:  gcStackCopyLoop:
3336#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
3340#    sll $t2,$t1,31 # zero iff low bit was zero
3344#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
3348#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
3352#    bleu $t1,$t6,gcTestIterDone1
3353##...sltu $at,$t6,$t1
3357##...beq $at,$zero,3520
3360#    bgtu $t1,$t7,gcTestIterDone1
3361##...sltu $at,$t7,$t1
3365##...bne $at,$zero,3520

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3368#    lw $t2,-8($t1) # possible forwarding tag
3372#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
3376#    lw $t2,-4($t1) # forwarding pointer: object's new address
3380#    sw $t2,4($t0) # update stack value
3384#    j gcTestIterDone1 # do next iteration

3388:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
3388#    bge $t2,$zero,gcSkip2
3389##...slt $at,$t2,$zero
3393##...beq $at,$zero,3408
3396#    and $t2,0xff #### mask off hash value
3397##...lui $at,0
3401##...ori $at,$at,0xff
3405##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

3408:  gcSkip2:
3408#    sll $t2,$t2,2
3412#    addu $t2,$t2,8
3416#    subu $t4,$t1,$t2 # address of first word of source
3420#    lw $t3,-4($t1) # number of object words (negative means zero)
3424#    bge $t3,$zero,gcH2Neg1
3425##...slt $at,$t3,$zero
3429##...beq $at,$zero,3436
3432#    move $t3,$zero
3436:  gcH2Neg1:
3436#    sll $t3,$t3,2
3440#    addu $t3,$t3,$t1 # address one word past last word of source

3444#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3448#    lw $s0,($t4)
3452#    lw $s1,-8($t1)
3456#    sw $s1,($t4)
3460#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3464:  gCinnerCopy1:
3464#    lw $s0,($t4)
3468#    sw $s0,($s3)
3472#    addu $t4,$t4,4
3476#    addu $s3,$s3,4
3480#    bltu $t4,$t3,gCinnerCopy1
3481##...sltu $at,$t4,$t3
3485##...bne $at,$zero,3464

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3488#    sw $zero,-8($t1) # 0 in first header-slot
3492#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3496#    sw $t2,4($t0)
3500#    lw $zero,-8($t2)
3504#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3508#    j gcTestIterDone1

3512:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3512#    subu $t0,$t0,$t1
3516#    subu $t0,$t0,3

3520:  gcTestIterDone1:
3520#    bgeu $t0,$sp,gcStackCopyLoop
3521##...sltu $at,$t0,$sp
3525##...beq $at,$zero,3336

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3528#    lw $t1,cur_seg
3532#    la $t0,seg0_start
3536#    beq $t1,$zero,gcSkip4
3540#    la $t0,seg1_start
3541##...lui $t0,16
3545##...addiu $t0,$t0,4740


3548:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3548#    bgeu $t0,$s3,gcFinishUp
3549##...sltu $at,$t0,$s3
3553##...beq $at,$zero,3844

    ###### begin outer loop to copy all non-stack-direct objects ######

3556:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
3556#    lw $t1,($t0) # (what will be) first header word for current object
3560#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
3564#    bge $t2,$zero,gcSkip4a # are there hash bits?
3565##...slt $at,$t2,$zero
3569##...beq $at,$zero,3584
3572#    and $t2,0xff # mask off hash bits
3573##...lui $at,0
3577##...ori $at,$at,0xff
3581##...and $t2,$t2,$at
3584:gcSkip4a:    
3584#    sll $t2,$t2,2 # # data bytes
3588#    addu $t2,$t2,8 # to skip header words
3592#    addu $t2,$t0,$t2 # pointer to new object
3596#    lw $t3,-8($t2) # word to swap
3600#    sw $t1,-8($t2) # store header word
3604#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
3608#    lw $t1,-12($t2) # vtable pointer
3612#    li $t0,dataArrayVTableStart # address of vtable for first data array
3616#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
3617##...slt $at,$t1,$t0
3621##...bne $at,$zero,3640

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
3624:  skipToNextObj:
3624#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
3628#    sll $t1,$t1,2 # convert to byte-count
3632#    addu $t0,$t2,$t1 # skip over object
3636#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
3640:  gcNotDataArray:
3640#    lw $t3,-4($t2) # # object words (negative treated as zero)
3644#    bge $t3,$zero,gcH2Neg2
3645##...slt $at,$t3,$zero
3649##...beq $at,$zero,3656
3652#    move $t3,$zero
3656:  gcH2Neg2:
3656#    sll $t3,$t3,2 # # object bytes
3660#    move $t0,$t2 # address of first pointer in object
3664#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
3668#    beq $t0,$s1,gcTestIterDone2
    
3672:  gcNextPointerInObject:
    # get pointer from object
3672#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
3676#    bleu $t1,$t6,gcGoNextPointerSlot
3677##...sltu $at,$t6,$t1
3681##...beq $at,$zero,3824
3684#    bgtu $t1,$t7,gcGoNextPointerSlot
3685##...sltu $at,$t7,$t1
3689##...bne $at,$zero,3824

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3692#    lw $t8,-8($t1) # possible forwarding tag
3696#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
3700#    lw $t8,-4($t1) # forwarding pointer: object's new address
3704#    sw $t8,($t0) # update pointer in object
3708#    j gcGoNextPointerSlot # do next iteration

3712:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
3712#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
3713##...slt $at,$t8,$zero
3717##...beq $at,$zero,3732
3720#    and $t8,0xff # mask off hash bits
3721##...lui $at,0
3725##...ori $at,$at,0xff
3729##...and $t8,$t8,$at

3732:  gcSkip5:
3732#    sll $t8,$t8,2 # bytes in negative-offset portion ...
3736#    addu $t8,$t8,8 # ... add in bytes for header-words
3740#    subu $t4,$t1,$t8 # address of first word of source object
3744#    lw $t3,-4($t1) # # words in positive-offset portion
3748#    bge $t3,$zero,gcNoNeg
3749##...slt $at,$t3,$zero
3753##...beq $at,$zero,3760
3756#    move $t3,$zero # negative treated as zero
3760:  gcNoNeg:
3760#    sll $t3,$t3,2 # bytes in negative-offset portion
3764#    addu $t3,$t3,$t1 # address one word past last word of source

3768#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
3772#    lw $s0,($t4)
3776#    lw $t9,-8($t1)
3780#    sw $t9,($t4)
3784#    sw $s0,-8($t1)

    # copy all source bytes to the target
3788:  gCinnerCopy2:
3788#    lw $s0,($t4)
3792#    sw $s0,($s3)
3796#    addu $t4,$t4,4
3800#    addu $s3,$s3,4
3804#    bltu $t4,$t3,gCinnerCopy2
3805##...sltu $at,$t4,$t3
3809##...bne $at,$zero,3788

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3812#    sw $zero,-8($t1) # 0 in first header-slot
3816#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
3820#    sw $t8,($t0)

3824:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
3824#    addu $t0,$t0,4
3828#    bltu $t0,$s1,gcNextPointerInObject
3829##...sltu $at,$t0,$s1
3833##...bne $at,$zero,3672

3836:  gcTestIterDone2:
3836#    bltu $t0,$s3,gcHeapCopyLoop
3837##...sltu $at,$t0,$s3
3841##...bne $at,$zero,3556

    ###### end outer loop to copy all non-stack-direct objects ######

3844:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
3844#    lw $s2,($sp)
3848#    addu $sp,$sp,4

    # mark us as having already GC'd
3852#    move $t5,$s5

    # go try and allocate again
3856#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3860:vm_init:

    # mark bottom of stack
3860#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
3864#    move $s2,$zero

    #set up the "five" register
3868#    li $s5,5

3872#    la $s3,seg0_start
3876#    la $s4,seg0_end
3877##...lui $s4,16
3881##...addiu $s4,$s4,4740
    
    # return
3884#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3888:divide:
    # get parameters; abort if divisor zero
3888#    lw $t0,($sp)
3892#    lw $t1,8($sp)
3896#    beq $t0,$zero,divByZeroError
    
    # perform division
3900#    div $t1,$t0
3904#    mflo $t0

    # store result, adjust stack and return
3908#    addu $sp,$sp,8 # adjust stack
3912#    sw $t0,($sp) # store result
3916#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3920:remainder:
    # get parameters; abort if divisor zero
3920#    lw $t0,($sp)
3924#    lw $t1,8($sp)
3928#    beq $t0,$zero,divByZeroError
    
    # perform division
3932#    div $t1,$t0
3936#    mfhi $t0

    # store result, adjust stack and return
3940#    addu $sp,$sp,8 # adjust stack
3944#    sw $t0,($sp) # store result
3948#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3952:checkCast:
    # get object, allow immediately if null
3952#    lw $t2,($sp)
3956#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
3960#    lw $t2,-12($t2) # vtable address
3964#    bge $t2,$t1,castException
3965##...slt $at,$t2,$t1
3969##...beq $at,$zero,4140
3972#    blt $t2,$t0,castException
3973##...slt $at,$t2,$t0
3977##...bne $at,$zero,4140
    
    # return, leaving object unchanged on stack
3980:  checkCastReturn:    
3980#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3984:instanceOf:
    # get object, go return false if null
3984#    lw $t2,($sp)
3988#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
3992#    lw $t2,-12($t2) # vtable address
3996#    sge $t0,$t2,$t0 # are we >= the lower limit?
3997##...slt $t0,$t2,$t0
4001##...xori $t0,$t0,0x1
4004#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
4008#    and $t2,$t0,$t1
4012#    sw $t2,($sp)
4016:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
4016#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4020:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
4020#    li $v0,4 # syscall-code for print-string
4024#    syscall
4028:exit:
    # print termination message
4028#    li $v0,4 # syscall-code for print-string
4032#    la $a0,exitString
4036#    syscall

    # print number of garbage collections
4040#    li $v0,4 # syscall-code for print-string
4044#    la $a0,gcCountMsg
4048#    syscall # print "Number of ..."
4052#    lw $a0,gcCount # number of GC's
4056#    li $v0,1 # code for print-int
4060#    syscall
4064#    li $v0,4 # syscall-code for print-string
4068#    la $a0,newlineString
4072#    syscall # print newline

    # terminate execution
4076#    li $v0,10 #syscall-code for "exit"
4080#    syscall

4084:outOfHeapMemory:
4084#    la $a0,heapMemoryMsg
4088#    j exitError
4092:divByZeroError:
4092#    la $a0,divByZeroMsg
4096#    j exitError
4100:strIndexOutOfBounds:
4100#    la $a0,strIndexOutOfBoundsMsg
4104#    j exitError
4108:arrayIndexOutOfBounds:
4108#    la $a0,arrayIndexOutOfBoundsMsg
4112#    j exitError
4116:arraySizeOutOfBounds:
4116#    la $a0,arraySizeOutOfBoundsMsg
4120#    j exitError
4124:nullPtrException:
4124#    la $a0,nullPtrExceptionMsg
4128#    j exitError
4132:badIntegerFormat:
4132#    la $a0,badIntegerFormatMsg
4136#    j exitError
4140:castException:
4140#    la $a0,castExceptionMsg
4144#    j exitError
############## data section ################
    .data
4368:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4384:cur_seg:
    .word 0

4388:lastCharRead:
    .word -2 # -2 => no buffered character
4392:prevHashConstant:
    .word 0x2785173c
4396:gcCount:
    .word 0

4400:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4427:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4450:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
4485:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
4519:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
4552:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
4583:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
4631:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
4652:gcMsg: 
      .asciiz "\nGC!\n"
4658:gcCountMsg: 
      .asciiz "Number of garbage collections: "

4690:nullStr:
    .asciiz "null"
4695:trueString:
    .asciiz "true"
4700:falseString:
    .asciiz "false"
4706:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
4734:newlineString:
    .asciiz "\n"
    
    .align 2
4736:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

4740:seg0_start:
    .space 0x100000
1053316:seg0_end:
1053316:seg1_start:
    .space 0x100000
2101892:seg1_end:
