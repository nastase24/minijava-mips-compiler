 .data # Program at 2.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
3288:CLASS_Object: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
3308:CLASS_String: # ClassDecl at 0.0
  .word fcn_hashCode_String # MethodDeclNonVoid at 0.0
  .word fcn_equals_String # MethodDeclNonVoid at 0.0
  .word fcn_toString_String # MethodDeclNonVoid at 0.0
  .word fcn_concat_String # MethodDeclNonVoid at 0.0
  .word fcn_substring_String # MethodDeclNonVoid at 0.0
  .word fcn_length_String # MethodDeclNonVoid at 0.0
  .word fcn_charAt_String # MethodDeclNonVoid at 0.0
  .word fcn_compareTo_String # MethodDeclNonVoid at 0.0
3340:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
3344:CLASS_Lib: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 2.7
  .byte 205 # 'M' with high bit set # ClassDecl at 2.7
  .byte 97 # 'a' # ClassDecl at 2.7
  .byte 105 # 'i' # ClassDecl at 2.7
  .byte 110 # 'n' # ClassDecl at 2.7
3392:CLASS_Main: # ClassDecl at 2.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_main_Main # MethodDeclVoid at 3.17
3440:END_CLASS_Main: # ClassDecl at 2.7
3440:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
3448:CLASS_RunMain: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
3460:END_CLASS_RunMain: # ClassDecl at 0.0
3460:dataArrayVTableStart: # IntegerType at 0.0
3460:END_CLASS_Object: # ClassDecl at 0.0
  .byte 72 # StringLiteral at 4.17
  .byte 101 # StringLiteral at 4.17
  .byte 108 # StringLiteral at 4.17
  .byte 108 # StringLiteral at 4.17
  .byte 111 # StringLiteral at 4.17
  .byte 44 # StringLiteral at 4.17
  .byte 32 # StringLiteral at 4.17
  .byte 87 # StringLiteral at 4.17
  .byte 111 # StringLiteral at 4.17
  .byte 114 # StringLiteral at 4.17
  .byte 108 # StringLiteral at 4.17
  .byte 100 # StringLiteral at 4.17
  .byte 46 # StringLiteral at 4.17
  .byte 10 # StringLiteral at 4.17
  .byte 0 # StringLiteral at 4.17
  .byte 0 # StringLiteral at 4.17
  .word CLASS_String # StringLiteral at 4.17
  .word 5 # StringLiteral at 4.17
  .word -14 # StringLiteral at 4.17
3488:strLit_0: # StringLiteral at 4.17
.text
.globl main
0:main:
0#  jal vm_init
4#li $s6,2
8#li $s7,0
12#jal newObject
16#la $t0,CLASS_Main
20#sw $t0,-12($s7)
24#lw $s2,($sp)
28#addu $sp,$sp,4
32#jal fcn_main_Main
36#li $v0,10
40#syscall
44:fcn_main_Main:
44#  subu $sp,$sp,4
48#  sw $ra,($sp)
52#  subu $sp,$sp,4
56#  sw $s2,($sp)
60#  la $t0, strLit_0
64#  subu $sp,$sp,4
68#  sw $t0,($sp)
72#  lw $t0,4($sp)
76#  sw $s2,4($sp)
80#  move $s2, $t0
84#  lw $t0, -12($s2)
88#  lw $t0,24($t0)
92#  jalr $t0
96#  addu $sp,$sp,4
100#  lw $s2,($sp)
104#  addu $sp,$sp,4
108#  subu $sp,$sp,4
112#  sw $t0,($sp)
116#  addu $sp,$sp,4
120#  addu $sp,$sp,0
124#  addu $sp,$sp,0
128#  lw $ra,($sp)
132#  addu $sp,$sp,4
136#  jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
140:fcn_hashCode_Object:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
140#    lw $t0,-8($s2) # get word with hash bits from this
144#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
148#    addu $t0,$t1

152#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
156:fcn_equals_Object:
156#    move $t0,$s2 # first pointer (this)
160#    lw $t1,($sp) # second pointer
164#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
165##...subu $at,$t0,$t1
169##...sltiu $t0,$at,1

172#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
176:fcn_hashCode_String:
176#    move $t0,$s2 # put this pointer in t0

180#    li $t2,0 # current hash value
184#    lw $t1,-4($t0) # negative of number of characters in string
188#    beq $t1,$zero,done_hashCode_String # if zero length => done
192#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
196#    and $t0,0xfffffffc # adjust for padding
197##...lui $at,65535
201##...ori $at,$at,0xfffc
205##...and $t0,$t0,$at
208#    subu $t1,$t0,$t1 # address at end of string +12
212:loop_hashCode_String:    
212#    sll $t4,$t2,5 # multiply by 32
216#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
220#    lbu $t3,-12($t0) # current character
224#    addu $t2,$t3 # add in current character
228#    addu $t0,1 # go to next character's address
232#    bne $t0,$t1,loop_hashCode_String # loop back if more
236:done_hashCode_String:    

    # push int on stack
236#    move $t0, $t2 # put $t2 in return slot
240#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
244:fcn_toString_Object:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
244#    subu $sp,4
248#    sw $ra,($sp)
    
    # get hash value
252#    lw $t2,-12($s2) # vtable address
256#    lw $t0,($t2) # method address
260#    jalr $t0
264#    subu $sp,8 # push result (int in $t0) on stack
268#    sw $s5,4($sp)
272#    sw $t0,($sp)

    # compute print-size of hash value
276#    li $t0, 1
280#    lw $t1, ($sp)
284#    srl $t1,$t1,4
288#    beq $t1,$zero,toString_skip_loop
292:toString_loop_top:
292#    addu $t0,1
296#    srl $t1,$t1,4
300#    bne $t1,$zero,toString_loop_top
304:toString_skip_loop:
304#    subu $sp,8
308#    sw $s5,4($sp)
312#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
316#    lw $t2,-12($s2) # vtable address
320#    move $t0,$t2
324:toString_checkTagBit:
324#    subu $t0,1
328#    lb $t1,($t0)
332#    and $t1,0x80
333##...lui $at,0
337##...ori $at,$at,0x80
341##...and $t1,$t1,$at
344#    beq $t1,$zero,toString_checkTagBit
348#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
352#    subu $sp,8
356#    sw $t1,($sp)
360#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
364#    move $s7,$zero # -4 offset header word
368#    lw $t4,8($sp) # bytes for hash value
372#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
376#    addu $t4,8
380#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
384#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

388#    li $t0,CLASS_String # store string vtable address into ...
392#    sw $t0,-12($s7) # ... -12 offset in object header
396#    lw $t2,-12($s2) # our object's vtable address
400#    lw $t5,4($sp) # number characters in prefix
404#    lw $t1,12($sp) # number of characters in hashcode
408#    addu $t3,$t1,$t5 # number of characters in string ...
412#    addu $t3,1 # ... including the '@' character
416#    subu $t0,$zero,$t3 # store negated length into ...
420#    sw $t0,-4($s7) # ... -4 offset header word
424#    lw $t0,-8($s7) # get -8 offset header-word
428#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
429##...slt $at,$t0,$zero
433##...beq $at,$zero,452
436#    and $t0,0xff # mask off object's hash value ...
437##...lui $at,0
441##...ori $at,$at,0xff
445##...and $t0,$t0,$at
448#    sw $t0,-8($s7) # ... and store back into -8 header-word
452:skipMask_toString:
452#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
456#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
460#    subu $t4,$t2,$t5
464:toString_copyLoop:    
464#    lb $t3,($t4)
468#    and $t3,0x7f # mask off sign bit (in case first word)
469##...lui $at,0
473##...ori $at,$at,0x7f
477##...and $t3,$t3,$at
480#    sb $t3,-8($t0)
484#    addu $t4,1
488#    addu $t0,1
492#    blt $t4,$t2,toString_copyLoop
493##...slt $at,$t4,$t2
497##...bne $at,$zero,464

    # copy the '@' sign
500#    li $t3,'@'
504#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
508#    addu $t2,$t0,$t1 # address of last byte in string to store +8
512#    lw $t3,20($sp) # hash code to print
516:toString_hashCopyLoop:
516#    and $t4,$t3,0xf
520#    srl $t3,4
524#    lb $t4,hexChars($t4)
528#    sb $t4,-8($t2)
532#    subu $t2,$t2,1
536#    bgt $t2,$t0,toString_hashCopyLoop
537##...slt $at,$t0,$t2
541##...bne $at,$zero,516

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
544#    addu $sp,28
548#    lw $ra,($sp)
552#    addu $sp,4
556#    move $t0, $s7 # return string we created
560#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
564:fcn_equals_String:
    
    # quick test for obvious false
564#    lw $t0,($sp) # second parameter
568#    beq $t0,$zero,goEsFalse # go return false if null
572#    lw $t1,-12($t0) # vtable pointer
576#    la $t2,CLASS_String # string vtable pointer
580#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
584#    subu $sp,12
588#    sw $ra,8($sp)
592#    sw $s2,4($sp)
596#    sw $t0,($sp)
600#    jal fcn_compareTo_String
604#    lw $s2, 4($sp) #restore this pointer and pop parameters
608#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
612#    seq $t0,$t0,$zero
613##...subu $at,$t0,$zero
617##...sltiu $t0,$at,1

    # pop return address and return $t0
620#    lw $ra,($sp)
624#    addu $sp,4

628#    jr $ra # return
    
632:goEsFalse:
    # put 0 in $t0 and return
632#    li $t0, 0
636#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
640:fcn_toString_String:
    #we are a string, so return this.
640#    move $t0, $s2
644#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
648:fcn_readLine_Lib:
    
648#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
652#    sw $ra, 4($sp) # save $ra
656#    move $t1,$sp # save "original" sp

660:  doRead:

    # read the character
660#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
664#    subu $t2,$v0,13
668#    bne $t2,$zero,notReturnRL
672#    jal readLogicalChar
676#    subu $t2,$v0,10 # check for newline
680#    beq $t2,$zero,foundNewLine
684#    sw $v0,lastCharRead # push back character into queue
688#    j foundNewLine # go process the line

692:  notReturnRL:

    # at this point, $v0 has our character

692#    subu $t0,$v0,10
696#    beq $t0,$zero,foundNewLine
700#    blt $v0,$zero,foundEof
701##...slt $at,$v0,$zero
705##...bne $at,$zero,720

    # we have a character, so push it onto stack
708#    subu $sp,$sp,4
712#    sw $v0,($sp)

    # loop back up to get next character
716#    j doRead

720:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
720#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
724#    li $s7, 0 # return-value: null
728#    j rlReturn # return

732:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
732#    subu $t0,$t1,$sp # number of chars we read (times 4)
736#    srl $s6,$t0,2 # number of words on stack with chars
740#    subu $sp,$sp,4 # push char-count ...
744#    sw $s6,($sp) # ... onto stack
748#    addu $t2,$t0,5 # GC tag, incl. for count-word
752#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
756#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
760#    srl $s6,$s6,2  # data words in object
764#    move $s7,$zero # object words in object
768#    jal newObject  # allocate space
    
    # store header words
772#    la $t0,CLASS_String
776#    sw $t0,-12($s7)# store class tag (String) into object
780#    lw $t2,4($sp) # char-count
784#    sll $t1,$t2,2 # 4 times number of chars
788#    subu $t2,$zero,$t2 # negative of char-count
792#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
796#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
800#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
801##...slt $at,$t0,$zero
805##...beq $at,$zero,824
808#    and $t0,0xff # mask off object's hash value ...
809##...lui $at,0
813##...ori $at,$at,0xff
817##...and $t0,$t0,$at
820#    sw $t0,-8($s7) # ... and store back into -8 header-word
824:  skipMask_readLine:

824#    sll $t0,$t0,2 # data bytes in object
828#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
832#    subu $t0,$t0,$t2 # place to store last character (plus 9)
836#    addu $sp,$sp,8 # pop redundant object-pointer and count
840#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

844#    beq $sp,$t1,rlReturn
848:  charCopyLoop:
848#    lw $t2,($sp)
852#    sb $t2,-9($t0)
856#    addu $sp,$sp,4
860#    subu $t0,$t0,1
864#    bne $sp,$t1,charCopyLoop
868:  rlReturn:

868#    lw $ra, 4($sp)
872#    addu $sp, 8   # pop $ra and pointless word off stack
876#    move $t0, $s7 # return string we allocated in $s7
880#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
884:fcn_readInt_Lib:

    # save $ra by pushing onto stack
884#    subu $sp,$sp,4
888#    sw $ra,($sp)

892:  riSkipWhiteLoop:
    # read a character
892#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
896#    subu $t0,$v0,32
900#    bgt $t0,$zero,nonWhite
901##...slt $at,$zero,$t0
905##...bne $at,$zero,948
908#    beq $t0,$zero,riSkipWhiteLoop # start over if space
912#    subu $t0,$v0,10
916#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
920#    subu $t0,$v0,9
924#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
928#    subu $t0,$v0,13
932#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
936#    subu $t0,$v0,12
940#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
944#    j badIntegerFormat # illegal integer char: abort program

948:  nonWhite:
948#    subu $t0,$v0,'-'
952#    li $t4,1 # final multiplier
956#    bne $t0,$zero,helpReadInt # go read
960#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
964#    jal readLogicalChar

968:  helpReadInt:
968#    li $t2,10
972#    subu $t1,$v0,'0' # convert digit to 0-9 value
976#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
977##...sltu $at,$t1,$t2
981##...beq $at,$zero,3264
984#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

988:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

988#    jal readLogicalChar # read next character
992#    subu $t1,$v0,'0' # convert digit to 0-9 value
996#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
997##...sltu $at,$t1,$t2
1001##...beq $at,$zero,1020

1004#    mul $t3,$t3,$t2 # multiply old value by 10
1005##...mult $t3,$t2
1009##...mflo $t3
1012#    addu $t3,$t3,$t1 # add in value of new digit
1016#    j digitLoop

1020:  doneDigitLoop:

    # "push back" unused character into queue
1020#    sw $v0,lastCharRead

    # restore return address
1024#    lw $ra,($sp)
1028#    addu $sp, 4

    # multiply by sign and put return value in $t0
1032#    mult $t3,$t4 # multiply to account for poss. minus sign
1036#    mflo $t3
1040#    move $t0, $t3
    
    # return
1044#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1048:fcn_readChar_Lib:

    # save $ra by pushing onto stack
1048#    subu $sp,$sp,4
1052#    sw $ra,($sp)

      # read the character
1056#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
1060#    lw $ra,($sp)
1064#    addu $sp, 4
1068#    move $t0, $v0

    # return
1072#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
1076:fcn_printStr_Lib:
    # check for null, printing "(null)", if so
1076#    lw $t0,($sp)
1080#    bne $t0,$zero,psNotNull

    # print "(null)"
1084#    la $a0,nullStr
1088#    li $v0,4
1092#    syscall
1096#    j donePrintStr
    
1100:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1100#    subu $t0,$t0,8
1104#    lw $t1,($t0) # number of data words, but needs modification
1108#    blt $t1,$zero,skipPrintStr1
1109##...slt $at,$t1,$zero
1113##...bne $at,$zero,1132
1116#    and $t1,0xff # mask out all but low byte
1117##...lui $at,0
1121##...ori $at,$at,0xff
1125##...and $t1,$t1,$at
1128#    b skipPrintStr2
1132:skipPrintStr1:
1132#    and $t1,0x7ffffff
1133##...lui $at,2047
1137##...ori $at,$at,0xffff
1141##...and $t1,$t1,$at
1144:skipPrintStr2:    
1144#    sll $t1,$t1,2
1148#    subu $t1,$t0,$t1 # first word in string
1152#    lw $t0,4($t0) # negative of string-length
1156#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
1160#    beq $t0,$t1,donePrintStr
1164:  psLoop:
1164#    lb $a0,($t1) # next byte
1168#    li $v0,11 # code for printing char
1172#        syscall # print the char
1176#    addu $t1,$t1,1 # go to next char
1180#    blt $t1,$t0,psLoop
1181##...slt $at,$t1,$t0
1185##...bne $at,$zero,1164

1188:  donePrintStr:
1188#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
1192:fcn_printInt_Lib:
1192#    lw $a0,($sp)

    # print it
1196#    li $v0,1 # code for print-int
1200#    syscall

    # return
1204#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
1208:fcn_printBool_Lib:
    # pop value off stack, along with 'this'
1208#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
1212#    la $a0,falseString
1216#    beq $t0,$zero,skipPB
1220#    la $a0,trueString
1224:  skipPB:
1224#    li $v0,4 # code for print-string
1228#    syscall

    # return
1232#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
1236:fcn_substring_String:

    # save $ra by pushing onto stack
1236#    subu $sp,$sp,4
1240#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
1244#    move $t0,$s2
1248#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
1252#    lw $t0,-4($t0) # negative of string length
1256#    subu $t0,$zero,$t0 # string length
1260#    lw $t1,4($sp) # k
1264#    lw $t2,12($sp) # n
1268#    bgt $zero,$t2,strIndexOutOfBounds
1269##...slt $at,$t2,$zero
1273##...bne $at,$zero,3232
1276#    bgt $t2,$t1,strIndexOutOfBounds
1277##...slt $at,$t1,$t2
1281##...bne $at,$zero,3232
1284#    bgt $t1,$t0,strIndexOutOfBounds
1285##...slt $at,$t0,$t1
1289##...bne $at,$zero,3232

    # allocate memory
1292#    subu $s6,$t1,$t2 # # chars in target-string
1296#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1300#    srl $s6,$s6,2 # convert bytes-count to word-count
1304#    move $s7,$zero # (no object-bytes in string)
1308#    jal newObject

    # store "String" tag in object-type field
1312#    la $t0,CLASS_String
1316#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
1320#    lw $t4,-8($s7) # data words in source string
1324#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
1325##...slt $at,$t4,$zero
1329##...beq $at,$zero,1348
1332#    and $t4,0xff # mask off object's hash value ...
1333##...lui $at,0
1337##...ori $at,$at,0xff
1341##...and $t4,$t4,$at
1344#    sw $t4,-8($s7) # ... and store back into -8 header-word
1348:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
1348#    lw $t1,8($sp) # k
1352#    lw $t2,16($sp) # n
1356#    subu $t0,$t2,$t1 # value to store
1360#    sw $t0,-4($s7) # store value
    
1364#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
1368#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
1372#    lw $t4,-8($t3) # data words in source string
1376#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
1380#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1384#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1388#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1392#    lw $t2,-8($s7)   # data words in target string
1396#    sll $t2,$t2,2    # data bytes in target string
1400#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
1404:  subCopyLoopzz:
1404#    lb $t4,-8($t3)
1408#    sb $t4,-8($t2)
1412#    addu $t2,$t2,1
1416#    addu $t3,$t3,1
1420#    blt $t3,$t1,subCopyLoopzz
1421##...slt $at,$t3,$t1
1425##...bne $at,$zero,1404
    
1428:  doneSubCopyzz:
    # restore return address, store return value, pop stack
1428#    lw $ra,4($sp) # restore $ra
1432#    addu $sp,$sp,8 # pop ra, and allocated newObject
1436#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
1440#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
1444:fcn_length_String:

    # the length is the negative of 4($s2)
1444#    lw $t0,-4($s2) # -length
1448#    subu $t0,$zero,$t0

    # return
1452#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
1456:fcn_concat_String:
    # save $ra by pushing onto stack
1456#    subu $sp,$sp,4
1460#    sw $ra, ($sp)

    # get string pointers and check parameter for null
1464#    lw $t0,4($sp)
1468#    beq $t0,$zero,nullPtrException
1472#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
1476#    lw $t0,-4($t0) # negative size of second object
1480#    lw $t1,-4($t1) # negative size of first object
1484#    addu $s6,$t0,$t1 # sum of negative sizes
1488#    sra $s6,$s6,2 # negative word-size of char part
1492#    subu $s6,$zero,$s6 # word size of char part
1496#    addu $s6,$s6,1 # data word size, including v-table word
1500#    move $s7,$zero
1504#    jal newObject

    # store String vtable address in vtable address field
1508#    la $t0,CLASS_String
1512#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
1516#    lw $t4,-8($s7) # # data words in source string
1520#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
1521##...slt $at,$t4,$zero
1525##...beq $at,$zero,1544
1528#    and $t4,0xff # mask off object's hash value ...
1529##...lui $at,0
1533##...ori $at,$at,0xff
1537##...and $t4,$t4,$at
1540#    sw $t4,-8($s7) # ... and store back into -8 header-word
1544:skipMask_concat:

1544#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
1548#    move $t1,$s2   # first object
1552#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
1556#    lw $t2,-4($t0) # negative length of second object
1560#    lw $t3,-4($t1) # negative length of first object
1564#    addu $t4,$t2,$t3 # sum of negative lengths
1568#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
1572#    lw $t4,-8($t1) # # data words in first string
1576#    sll $t4,$t4,2 # # data bytes in first string
1580#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1584#    lw $t4,-8($s7) # # data words in new string
1588#    sll $t4,$t4,2 # # data bytes in new string
1592#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1596#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1600#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
1604:  concatLoop1zz:
1604#    lb $t4,-8($t1)
1608#    sb $t4,-8($s7)
1612#    addu $s7,$s7,1
1616#    addu $t1,$t1,1
1620#    blt $t1,$t3,concatLoop1zz
1621##...slt $at,$t1,$t3
1625##...bne $at,$zero,1604
1628:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1628#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
1632#    lw $t4,-8($t0) # # data words in second string
1636#    sll $t4,$t4,2 # # data bytes in second string
1640#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1644#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
1648:  concatLoop2zz:
1648#    lb $t4,-8($t1)
1652#    sb $t4,-8($s7)
1656#    addu $s7,$s7,1
1660#    addu $t1,$t1,1
1664#    blt $t1,$t3,concatLoop2zz
1665##...slt $at,$t1,$t3
1669##...bne $at,$zero,1648
1672:  doneConcatLoop2zz:
 
1672:  concatRtnzz:
    # return
1672#    move $t0, $t9 # put saved return string in $t0
1676#    lw $ra, 4($sp)
1680#    addu $sp, 8 # pop ra and allocated newObject
1684#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
1688:fcn_charAt_String:
    # get string
1688#    move $t0,$s2

    # check that index is in bounds
1692#    lw $t1,-4($t0) # negative of # data words in string
1696#    subu $t3,$zero,$t1 # # chars in string
1700#    lw $t2,($sp) # index
1704#    bgeu $t2,$t3,strIndexOutOfBounds
1705##...sltu $at,$t2,$t3
1709##...beq $at,$zero,3232

    # access element
1712#    lw $t1,-8($t0) # # data words in object
1716#    sll $t1,$t1,2 # - byte-offset from end of chars
1720#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
1724#    addu $t0,$t0,$t1 # - address of our char, offset by 8
1728#    lb $t0,-8($t0) # our char

    # return
1732#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
1736:fcn_intToString_Lib:

    # save return address on stack; allocate space for dummy GC tag
1736#    subu $sp,$sp,8
1740#    sw $ra,4($sp)

    # save current sp
1744#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
1748#    li $t3,10

    # get argument, negate if negative
1752#    lw $t1,8($sp)
1756#    bge $t1,$zero,itsNonNegLoop
1757##...slt $at,$t1,$zero
1761##...beq $at,$zero,1768
1764#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
1768:  itsNonNegLoop:
1768#    divu $t1,$t3
1772#    mflo $t1 # quotient
1776#    mfhi $t4 # remainder
1780#    addu $t4,$t4,'0' # turn remainder into digit
1784#    subu $sp,$sp,4
1788#    sw $t4,($sp) # push digit onto stack
1792#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
1796#    lw $t4,8($t0)
1800#    bge $t4,$zero,itsSkipNeg
1801##...slt $at,$t4,$zero
1805##...beq $at,$zero,1820
1808#    li $t4,'-'
1812#    subu $sp,$sp,4
1816#    sw $t4,($sp)
1820:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
1820#    subu $s6,$t0,$sp
1824#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
1828#    sw $t3,($t0)
1832#    srl $s6,$s6,2
1836#    subu $sp,$sp,4
1840#    sw $s6,($sp)
    
    # allocate memory
1844#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
1848#    srl $s6,$s6,2
1852#    move $s7,$zero # no "object" words in object
1856#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
1860#    lw $t0,4($sp)
1864#    addu $sp,$sp,8

    # store "String" tag into class field
1868#    subu $s7,$s7,8 # address of header-1 word
1872#    la $t1,CLASS_String
1876#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
1880#    lw $t4,($s7) # # data words in source string
1884#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
1885##...slt $at,$t4,$zero
1889##...beq $at,$zero,1908
1892#    and $t4,0xff # mask off object's hash value ...
1893##...lui $at,0
1897##...ori $at,$at,0xff
1901##...and $t4,$t4,$at
1904#    sw $t4,($s7) # ... and store back into -8 header-word
1908:skipMask_intToString:
    
    # store negative of char-count into header-2 word
1908#    subu $t0,$zero,$t0
1912#    sw $t0,4($s7)

1916#    lw $t1,($s7) # number of data words in string
1920#    sll $t1,$t1,2 # number data bytes in string
1924#    subu $t1,$s7,$t1 # first location to store chars in string
1928#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
1932:  itsLoop:
1932#    lw $t2,($sp)
1936#    addu $sp,$sp,4
1940#    sb $t2,($t1)
1944#    addu $t1,$t1,1
1948#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
1952#    lw $ra,4($sp)
1956#    addu $sp,$sp,8
1960#    addu $t0,$t0,15
1964#    and $t0,$t0,0xfffffffc
1965##...lui $at,65535
1969##...ori $at,$at,0xfffc
1973##...and $t0,$t0,$at
1976#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
1980:fcn_intToChar_Lib:
    # save return address
1980#    subu $sp,$sp,4
1984#    sw $ra,($sp)

    # allocate object
1988#    li $s6,2
1992#    move $s7,$zero
1996#    jal newObject

    # get n from string.
2000#    lw $t1,8($sp)

    # store "String" tag into class field
2004#    la $t0,CLASS_String
2008#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2012#    lw $t4,-8($s7) # # data words in source string
2016#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
2017##...slt $at,$t4,$zero
2021##...beq $at,$zero,2040
2024#    and $t4,0xff # mask off object's hash value ...
2025##...lui $at,0
2029##...ori $at,$at,0xff
2033##...and $t4,$t4,$at
2036#    sw $t4,-8($s7) # ... and store back into -8 header-word
2040:  skipMask_intToChar:

    # store data in string
2040#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
2044#    li $t0,-1
2048#    sw $t0,-4($s7)

    # we're returning $s7
2052#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
2056#    lw $ra,4($sp)
2060#    addu $sp,$sp,8

    # return
2064#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
2068:fcn_compareTo_String:
    # get string pointers and check parameter for null
2068#    lw $t0,($sp) # second string
2072#    beq $t0,$zero,nullPtrException
2076#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
2080#    lw $t2,-4($t0) # negative length of second string
2084#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
2088#    slt $t4,$t3,$t2
2092#    slt $t5,$t2,$t3
2096#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
2100#    lw $t2,-8($t0) # # data words in second string
2104#    lw $t3,-8($t1) # # data words in first string
2108#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2112#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2116#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
2120#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
2124#    beq $zero,$t5,skipStrCmpLenzz
2128#    move $t2,$t3
2132:  skipStrCmpLenzz:
2132#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
2136:  cmpLoopzz:
2136#    lw $t3,-8($t1) # word from str2
2140#    lw $t4,-8($t0) # word from str1
2144#    bne $t3,$t4,cmpNotEqualzz
2148#    addu $t1,$t1,4
2152#    addu $t0,$t0,4
2156#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
2160#    j cmpHitLimitzz

2164:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
2164#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2168#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
2172#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
2176:  cmpHitLimitzz:
2176#    move $t0, $t5 # store return value
2180#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2184:readLogicalChar:

    # check if we already have a character
2184#    lw $v0,lastCharRead
2188#    li $t0,-2
2192#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
2196#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2200#    jr $ra # return
    
2204:  doReadCh:
    # we need to actually read a character: read and return
2204#    li $v0,12 # use system call to read a character
2208#    syscall
2212#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2216:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
2216#    blt $s7,$zero arraySizeOutOfBounds
2217##...slt $at,$s7,$zero
2221##...bne $at,$zero,3248

    # mark the fact that we have not yet GC'd for this allocation
2224#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

2228:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
2228#    addu $t0,$s6,$s7
2232#    sll $t0,$t0,2
2236#    addu $t0,$t0,8 # amount of memory needed
2240#    addu $t1,$t0,$s3
2244#    bgtu $t1,$s4,doGC
2245##...sltu $at,$s4,$t1
2249##...bne $at,$zero,2372

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
2252#    move $t2,$s3
2256:  zeroObjLoop:
2256#    sw $zero,($s3)
2260#    lw $zero,($s3)

2264#    addu $s3,4
2268#    bltu $s3,$t1,zeroObjLoop
2269##...sltu $at,$s3,$t1
2273##...bne $at,$zero,2256

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
2276#    sll $t0,$s7,2    # number of post-header bytes
2280#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
2284#    li $t2,255
2288#    bgeu $s6,$t2 firstHeaderLarge
2289##...sltu $at,$s6,$t2
2293##...beq $at,$zero,2340
2296#    lw $t1,prevHashConstant
2300#    addu $t1,0x12b68fd2
2301##...lui $at,4791
2305##...addiu $at,$at,-28718
2309##...addu $t1,$at,$t1
2312#    sw $t1,prevHashConstant # update hash constant
2316#    or $t1,0x80000000 # set top bit
2317##...lui $at,32768
2321##...or $t1,$at,$t1
2324#    and $t1,0xffffff00 # clear low bit
2325##...lui $at,65535
2329##...ori $at,$at,0xff00
2333##...and $t1,$t1,$at
2336#    or $s6,$t1
2340:firstHeaderLarge:
2340#    sw $s6,-8($t0) # store header-1 value
2344#    lw $zero,-8($t0)

    # store second header-value
2348#    sw $s7,-4($t0)   # second header-word
2352#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
2356#    move $s7,$t0
2360#    subu $sp,$sp,4
2364#    sw $t0,($sp)

2368#    jr $ra
    
2372:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
2372#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
2376#    lw $t5,gcCount
2380#    addu $t5,1
2384#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
2388#    subu $sp,$sp,4
2392#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
2396#    lw $t0,cur_seg
2400#    move $t7,$s4
2404#    la $t6,seg1_start
2405##...lui $t6,16
2409##...addiu $t6,$t6,3860
2412#    la $s3,seg0_start
2416#    la $s4,seg0_end
2417##...lui $s4,16
2421##...addiu $s4,$s4,3860
2424#    sw $zero,cur_seg
2428#    bne $t0,$zero,skipGc1
2432#    la $t6,seg0_start
2436#    la $s3,seg1_start
2437##...lui $s3,16
2441##...addiu $s3,$s3,3860
2444#    la $s4,seg1_end
2445##...lui $s4,32
2449##...addiu $s4,$s4,3860
2452#    sw $s5,cur_seg
2456:  skipGc1:
2456#    li $t5,0x80000000
2460#    lw $t0,stack_bottom
2464#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

2468:  gcStackCopyLoop:
2468#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
2472#    sll $t2,$t1,31 # zero iff low bit was zero
2476#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
2480#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
2484#    bleu $t1,$t6,gcTestIterDone1
2485##...sltu $at,$t6,$t1
2489##...beq $at,$zero,2652
2492#    bgtu $t1,$t7,gcTestIterDone1
2493##...sltu $at,$t7,$t1
2497##...bne $at,$zero,2652

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
2500#    lw $t2,-8($t1) # possible forwarding tag
2504#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
2508#    lw $t2,-4($t1) # forwarding pointer: object's new address
2512#    sw $t2,4($t0) # update stack value
2516#    j gcTestIterDone1 # do next iteration

2520:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
2520#    bge $t2,$zero,gcSkip2
2521##...slt $at,$t2,$zero
2525##...beq $at,$zero,2540
2528#    and $t2,0xff #### mask off hash value
2529##...lui $at,0
2533##...ori $at,$at,0xff
2537##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

2540:  gcSkip2:
2540#    sll $t2,$t2,2
2544#    addu $t2,$t2,8
2548#    subu $t4,$t1,$t2 # address of first word of source
2552#    lw $t3,-4($t1) # number of object words (negative means zero)
2556#    bge $t3,$zero,gcH2Neg1
2557##...slt $at,$t3,$zero
2561##...beq $at,$zero,2568
2564#    move $t3,$zero
2568:  gcH2Neg1:
2568#    sll $t3,$t3,2
2572#    addu $t3,$t3,$t1 # address one word past last word of source

2576#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
2580#    lw $s0,($t4)
2584#    lw $s1,-8($t1)
2588#    sw $s1,($t4)
2592#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
2596:  gCinnerCopy1:
2596#    lw $s0,($t4)
2600#    sw $s0,($s3)
2604#    addu $t4,$t4,4
2608#    addu $s3,$s3,4
2612#    bltu $t4,$t3,gCinnerCopy1
2613##...sltu $at,$t4,$t3
2617##...bne $at,$zero,2596

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
2620#    sw $zero,-8($t1) # 0 in first header-slot
2624#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
2628#    sw $t2,4($t0)
2632#    lw $zero,-8($t2)
2636#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
2640#    j gcTestIterDone1

2644:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
2644#    subu $t0,$t0,$t1
2648#    subu $t0,$t0,3

2652:  gcTestIterDone1:
2652#    bgeu $t0,$sp,gcStackCopyLoop
2653##...sltu $at,$t0,$sp
2657##...beq $at,$zero,2468

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
2660#    lw $t1,cur_seg
2664#    la $t0,seg0_start
2668#    beq $t1,$zero,gcSkip4
2672#    la $t0,seg1_start
2673##...lui $t0,16
2677##...addiu $t0,$t0,3860


2680:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
2680#    bgeu $t0,$s3,gcFinishUp
2681##...sltu $at,$t0,$s3
2685##...beq $at,$zero,2976

    ###### begin outer loop to copy all non-stack-direct objects ######

2688:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
2688#    lw $t1,($t0) # (what will be) first header word for current object
2692#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
2696#    bge $t2,$zero,gcSkip4a # are there hash bits?
2697##...slt $at,$t2,$zero
2701##...beq $at,$zero,2716
2704#    and $t2,0xff # mask off hash bits
2705##...lui $at,0
2709##...ori $at,$at,0xff
2713##...and $t2,$t2,$at
2716:gcSkip4a:    
2716#    sll $t2,$t2,2 # # data bytes
2720#    addu $t2,$t2,8 # to skip header words
2724#    addu $t2,$t0,$t2 # pointer to new object
2728#    lw $t3,-8($t2) # word to swap
2732#    sw $t1,-8($t2) # store header word
2736#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
2740#    lw $t1,-12($t2) # vtable pointer
2744#    li $t0,dataArrayVTableStart # address of vtable for first data array
2748#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
2749##...slt $at,$t1,$t0
2753##...bne $at,$zero,2772

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
2756:  skipToNextObj:
2756#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
2760#    sll $t1,$t1,2 # convert to byte-count
2764#    addu $t0,$t2,$t1 # skip over object
2768#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
2772:  gcNotDataArray:
2772#    lw $t3,-4($t2) # # object words (negative treated as zero)
2776#    bge $t3,$zero,gcH2Neg2
2777##...slt $at,$t3,$zero
2781##...beq $at,$zero,2788
2784#    move $t3,$zero
2788:  gcH2Neg2:
2788#    sll $t3,$t3,2 # # object bytes
2792#    move $t0,$t2 # address of first pointer in object
2796#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
2800#    beq $t0,$s1,gcTestIterDone2
    
2804:  gcNextPointerInObject:
    # get pointer from object
2804#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
2808#    bleu $t1,$t6,gcGoNextPointerSlot
2809##...sltu $at,$t6,$t1
2813##...beq $at,$zero,2956
2816#    bgtu $t1,$t7,gcGoNextPointerSlot
2817##...sltu $at,$t7,$t1
2821##...bne $at,$zero,2956

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
2824#    lw $t8,-8($t1) # possible forwarding tag
2828#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
2832#    lw $t8,-4($t1) # forwarding pointer: object's new address
2836#    sw $t8,($t0) # update pointer in object
2840#    j gcGoNextPointerSlot # do next iteration

2844:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
2844#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
2845##...slt $at,$t8,$zero
2849##...beq $at,$zero,2864
2852#    and $t8,0xff # mask off hash bits
2853##...lui $at,0
2857##...ori $at,$at,0xff
2861##...and $t8,$t8,$at

2864:  gcSkip5:
2864#    sll $t8,$t8,2 # bytes in negative-offset portion ...
2868#    addu $t8,$t8,8 # ... add in bytes for header-words
2872#    subu $t4,$t1,$t8 # address of first word of source object
2876#    lw $t3,-4($t1) # # words in positive-offset portion
2880#    bge $t3,$zero,gcNoNeg
2881##...slt $at,$t3,$zero
2885##...beq $at,$zero,2892
2888#    move $t3,$zero # negative treated as zero
2892:  gcNoNeg:
2892#    sll $t3,$t3,2 # bytes in negative-offset portion
2896#    addu $t3,$t3,$t1 # address one word past last word of source

2900#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
2904#    lw $s0,($t4)
2908#    lw $t9,-8($t1)
2912#    sw $t9,($t4)
2916#    sw $s0,-8($t1)

    # copy all source bytes to the target
2920:  gCinnerCopy2:
2920#    lw $s0,($t4)
2924#    sw $s0,($s3)
2928#    addu $t4,$t4,4
2932#    addu $s3,$s3,4
2936#    bltu $t4,$t3,gCinnerCopy2
2937##...sltu $at,$t4,$t3
2941##...bne $at,$zero,2920

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
2944#    sw $zero,-8($t1) # 0 in first header-slot
2948#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
2952#    sw $t8,($t0)

2956:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
2956#    addu $t0,$t0,4
2960#    bltu $t0,$s1,gcNextPointerInObject
2961##...sltu $at,$t0,$s1
2965##...bne $at,$zero,2804

2968:  gcTestIterDone2:
2968#    bltu $t0,$s3,gcHeapCopyLoop
2969##...sltu $at,$t0,$s3
2973##...bne $at,$zero,2688

    ###### end outer loop to copy all non-stack-direct objects ######

2976:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
2976#    lw $s2,($sp)
2980#    addu $sp,$sp,4

    # mark us as having already GC'd
2984#    move $t5,$s5

    # go try and allocate again
2988#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
2992:vm_init:

    # mark bottom of stack
2992#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
2996#    move $s2,$zero

    #set up the "five" register
3000#    li $s5,5

3004#    la $s3,seg0_start
3008#    la $s4,seg0_end
3009##...lui $s4,16
3013##...addiu $s4,$s4,3860
    
    # return
3016#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3020:divide:
    # get parameters; abort if divisor zero
3020#    lw $t0,($sp)
3024#    lw $t1,8($sp)
3028#    beq $t0,$zero,divByZeroError
    
    # perform division
3032#    div $t1,$t0
3036#    mflo $t0

    # store result, adjust stack and return
3040#    addu $sp,$sp,8 # adjust stack
3044#    sw $t0,($sp) # store result
3048#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3052:remainder:
    # get parameters; abort if divisor zero
3052#    lw $t0,($sp)
3056#    lw $t1,8($sp)
3060#    beq $t0,$zero,divByZeroError
    
    # perform division
3064#    div $t1,$t0
3068#    mfhi $t0

    # store result, adjust stack and return
3072#    addu $sp,$sp,8 # adjust stack
3076#    sw $t0,($sp) # store result
3080#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3084:checkCast:
    # get object, allow immediately if null
3084#    lw $t2,($sp)
3088#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
3092#    lw $t2,-12($t2) # vtable address
3096#    bge $t2,$t1,castException
3097##...slt $at,$t2,$t1
3101##...beq $at,$zero,3272
3104#    blt $t2,$t0,castException
3105##...slt $at,$t2,$t0
3109##...bne $at,$zero,3272
    
    # return, leaving object unchanged on stack
3112:  checkCastReturn:    
3112#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3116:instanceOf:
    # get object, go return false if null
3116#    lw $t2,($sp)
3120#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
3124#    lw $t2,-12($t2) # vtable address
3128#    sge $t0,$t2,$t0 # are we >= the lower limit?
3129##...slt $t0,$t2,$t0
3133##...xori $t0,$t0,0x1
3136#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
3140#    and $t2,$t0,$t1
3144#    sw $t2,($sp)
3148:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
3148#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3152:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
3152#    li $v0,4 # syscall-code for print-string
3156#    syscall
3160:exit:
    # print termination message
3160#    li $v0,4 # syscall-code for print-string
3164#    la $a0,exitString
3168#    syscall

    # print number of garbage collections
3172#    li $v0,4 # syscall-code for print-string
3176#    la $a0,gcCountMsg
3180#    syscall # print "Number of ..."
3184#    lw $a0,gcCount # number of GC's
3188#    li $v0,1 # code for print-int
3192#    syscall
3196#    li $v0,4 # syscall-code for print-string
3200#    la $a0,newlineString
3204#    syscall # print newline

    # terminate execution
3208#    li $v0,10 #syscall-code for "exit"
3212#    syscall

3216:outOfHeapMemory:
3216#    la $a0,heapMemoryMsg
3220#    j exitError
3224:divByZeroError:
3224#    la $a0,divByZeroMsg
3228#    j exitError
3232:strIndexOutOfBounds:
3232#    la $a0,strIndexOutOfBoundsMsg
3236#    j exitError
3240:arrayIndexOutOfBounds:
3240#    la $a0,arrayIndexOutOfBoundsMsg
3244#    j exitError
3248:arraySizeOutOfBounds:
3248#    la $a0,arraySizeOutOfBoundsMsg
3252#    j exitError
3256:nullPtrException:
3256#    la $a0,nullPtrExceptionMsg
3260#    j exitError
3264:badIntegerFormat:
3264#    la $a0,badIntegerFormatMsg
3268#    j exitError
3272:castException:
3272#    la $a0,castExceptionMsg
3276#    j exitError
############## data section ################
    .data
3488:hexChars:
    .ascii "0123456789abcdef"
    .align 2
3504:cur_seg:
    .word 0

3508:lastCharRead:
    .word -2 # -2 => no buffered character
3512:prevHashConstant:
    .word 0x2785173c
3516:gcCount:
    .word 0

3520:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
3547:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
3570:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
3605:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
3639:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
3672:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
3703:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
3751:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
3772:gcMsg: 
      .asciiz "\nGC!\n"
3778:gcCountMsg: 
      .asciiz "Number of garbage collections: "

3810:nullStr:
    .asciiz "null"
3815:trueString:
    .asciiz "true"
3820:falseString:
    .asciiz "false"
3826:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
3854:newlineString:
    .asciiz "\n"
    
    .align 2
3856:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

3860:seg0_start:
    .space 0x100000
1052436:seg0_end:
1052436:seg1_start:
    .space 0x100000
2101012:seg1_end:
