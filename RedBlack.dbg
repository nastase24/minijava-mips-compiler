 .data # Program at 8.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
18564:CLASS_Object: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
18584:CLASS_String: # ClassDecl at 0.0
  .word fcn_hashCode_String # MethodDeclNonVoid at 0.0
  .word fcn_equals_String # MethodDeclNonVoid at 0.0
  .word fcn_toString_String # MethodDeclNonVoid at 0.0
  .word fcn_concat_String # MethodDeclNonVoid at 0.0
  .word fcn_substring_String # MethodDeclNonVoid at 0.0
  .word fcn_length_String # MethodDeclNonVoid at 0.0
  .word fcn_charAt_String # MethodDeclNonVoid at 0.0
  .word fcn_compareTo_String # MethodDeclNonVoid at 0.0
18616:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
18620:CLASS_Lib: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 8.7
  .byte 205 # 'M' with high bit set # ClassDecl at 8.7
  .byte 97 # 'a' # ClassDecl at 8.7
  .byte 105 # 'i' # ClassDecl at 8.7
  .byte 110 # 'n' # ClassDecl at 8.7
18668:CLASS_Main: # ClassDecl at 8.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_readLine_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readInt_Lib # MethodDeclNonVoid at 0.0
  .word fcn_readChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_printStr_Lib # MethodDeclVoid at 0.0
  .word fcn_printBool_Lib # MethodDeclVoid at 0.0
  .word fcn_printInt_Lib # MethodDeclVoid at 0.0
  .word fcn_intToString_Lib # MethodDeclNonVoid at 0.0
  .word fcn_intToChar_Lib # MethodDeclNonVoid at 0.0
  .word fcn_main_Main # MethodDeclVoid at 11.17
18716:END_CLASS_Main: # ClassDecl at 8.7
18716:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
18724:CLASS_RunMain: # ClassDecl at 0.0
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
18736:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class RedBlackTree ****** # ClassDecl at 43.7
  .byte 210 # 'R' with high bit set # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 100 # 'd' # ClassDecl at 43.7
  .byte 66 # 'B' # ClassDecl at 43.7
  .byte 108 # 'l' # ClassDecl at 43.7
  .byte 97 # 'a' # ClassDecl at 43.7
  .byte 99 # 'c' # ClassDecl at 43.7
  .byte 107 # 'k' # ClassDecl at 43.7
  .byte 84 # 'T' # ClassDecl at 43.7
  .byte 114 # 'r' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
18748:CLASS_RedBlackTree: # ClassDecl at 43.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_isNull_RedBlackTree # MethodDeclNonVoid at 46.20
  .word fcn_isBlack_RedBlackTree # MethodDeclNonVoid at 51.20
  .word fcn_setBlack_RedBlackTree # MethodDeclVoid at 56.17
  .word fcn_isRed_RedBlackTree # MethodDeclNonVoid at 60.20
  .word fcn_helpInsert_RedBlackTree # MethodDeclNonVoid at 65.25
  .word fcn_insert_RedBlackTree # MethodDeclNonVoid at 70.25
  .word fcn_asNonNull_RedBlackTree # MethodDeclNonVoid at 79.32
  .word fcn_print_RedBlackTree # MethodDeclVoid at 84.17
  .word fcn_helpPrint_RedBlackTree # MethodDeclVoid at 90.17
  .word fcn_lookup_RedBlackTree # MethodDeclNonVoid at 94.20
  .word fcn_delete_RedBlackTree # MethodDeclNonVoid at 99.25
  .word fcn_helpDelete_RedBlackTree # MethodDeclNonVoid at 106.25
# ****** class NullRedBlackTree ****** # ClassDecl at 112.7
  .byte 206 # 'N' with high bit set # ClassDecl at 112.7
  .byte 117 # 'u' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 82 # 'R' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 100 # 'd' # ClassDecl at 112.7
  .byte 66 # 'B' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 97 # 'a' # ClassDecl at 112.7
  .byte 99 # 'c' # ClassDecl at 112.7
  .byte 107 # 'k' # ClassDecl at 112.7
  .byte 84 # 'T' # ClassDecl at 112.7
  .byte 114 # 'r' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
18824:CLASS_NullRedBlackTree: # ClassDecl at 112.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_isNull_NullRedBlackTree # MethodDeclNonVoid at 115.20
  .word fcn_isBlack_RedBlackTree # MethodDeclNonVoid at 51.20
  .word fcn_setBlack_RedBlackTree # MethodDeclVoid at 56.17
  .word fcn_isRed_RedBlackTree # MethodDeclNonVoid at 60.20
  .word fcn_helpInsert_NullRedBlackTree # MethodDeclNonVoid at 120.25
  .word fcn_insert_RedBlackTree # MethodDeclNonVoid at 70.25
  .word fcn_asNonNull_RedBlackTree # MethodDeclNonVoid at 79.32
  .word fcn_print_RedBlackTree # MethodDeclVoid at 84.17
  .word fcn_helpPrint_RedBlackTree # MethodDeclVoid at 90.17
  .word fcn_lookup_RedBlackTree # MethodDeclNonVoid at 94.20
  .word fcn_delete_RedBlackTree # MethodDeclNonVoid at 99.25
  .word fcn_helpDelete_RedBlackTree # MethodDeclNonVoid at 106.25
18884:END_CLASS_NullRedBlackTree: # ClassDecl at 112.7
# ****** class NonNullRedBlackTree ****** # ClassDecl at 125.7
  .byte 0 # ClassDecl at 125.7
  .byte 206 # 'N' with high bit set # ClassDecl at 125.7
  .byte 111 # 'o' # ClassDecl at 125.7
  .byte 110 # 'n' # ClassDecl at 125.7
  .byte 78 # 'N' # ClassDecl at 125.7
  .byte 117 # 'u' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 82 # 'R' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 100 # 'd' # ClassDecl at 125.7
  .byte 66 # 'B' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 97 # 'a' # ClassDecl at 125.7
  .byte 99 # 'c' # ClassDecl at 125.7
  .byte 107 # 'k' # ClassDecl at 125.7
  .byte 84 # 'T' # ClassDecl at 125.7
  .byte 114 # 'r' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
18904:CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_isNull_RedBlackTree # MethodDeclNonVoid at 46.20
  .word fcn_isBlack_NonNullRedBlackTree # MethodDeclNonVoid at 134.20
  .word fcn_setBlack_NonNullRedBlackTree # MethodDeclVoid at 139.17
  .word fcn_isRed_RedBlackTree # MethodDeclNonVoid at 60.20
  .word fcn_helpInsert_NonNullRedBlackTree # MethodDeclNonVoid at 159.25
  .word fcn_insert_RedBlackTree # MethodDeclNonVoid at 70.25
  .word fcn_asNonNull_NonNullRedBlackTree # MethodDeclNonVoid at 374.32
  .word fcn_print_RedBlackTree # MethodDeclVoid at 84.17
  .word fcn_helpPrint_NonNullRedBlackTree # MethodDeclVoid at 460.17
  .word fcn_lookup_NonNullRedBlackTree # MethodDeclNonVoid at 181.20
  .word fcn_delete_RedBlackTree # MethodDeclNonVoid at 99.25
  .word fcn_helpDelete_NonNullRedBlackTree # MethodDeclNonVoid at 195.25
  .word fcn_setRed_NonNullRedBlackTree # MethodDeclVoid at 144.17
  .word fcn_init_NonNullRedBlackTree # MethodDeclNonVoid at 149.32
  .word fcn_adjustAfterDelete_NonNullRedBlackTree # MethodDeclNonVoid at 259.32
  .word fcn_getRight_NonNullRedBlackTree # MethodDeclNonVoid at 379.25
  .word fcn_getLeft_NonNullRedBlackTree # MethodDeclNonVoid at 388.25
  .word fcn_setRight_NonNullRedBlackTree # MethodDeclVoid at 393.17
  .word fcn_setLeft_NonNullRedBlackTree # MethodDeclVoid at 403.17
  .word fcn_rebalanceAfterInsert_NonNullRedBlackTree # MethodDeclNonVoid at 410.25
  .word fcn_helpPrintIndent_NonNullRedBlackTree # MethodDeclVoid at 483.17
19000:END_CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
19000:END_CLASS_RedBlackTree: # ClassDecl at 43.7
# ****** class BooleanList ****** # ClassDecl at 501.7
  .byte 0 # ClassDecl at 501.7
  .byte 194 # 'B' with high bit set # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 108 # 'l' # ClassDecl at 501.7
  .byte 101 # 'e' # ClassDecl at 501.7
  .byte 97 # 'a' # ClassDecl at 501.7
  .byte 110 # 'n' # ClassDecl at 501.7
  .byte 76 # 'L' # ClassDecl at 501.7
  .byte 105 # 'i' # ClassDecl at 501.7
  .byte 115 # 's' # ClassDecl at 501.7
  .byte 116 # 't' # ClassDecl at 501.7
19012:CLASS_BooleanList: # ClassDecl at 501.7
  .word fcn_hashCode_Object # MethodDeclNonVoid at 0.0
  .word fcn_equals_Object # MethodDeclNonVoid at 0.0
  .word fcn_toString_Object # MethodDeclNonVoid at 0.0
  .word fcn_init_BooleanList # MethodDeclNonVoid at 505.24
19028:END_CLASS_BooleanList: # ClassDecl at 501.7
19028:dataArrayVTableStart: # IntegerType at 0.0
  .byte 0 # ArrayType at 100.26
  .byte 0 # ArrayType at 100.26
  .byte 219 # '[' with high bit set # ArrayType at 100.26
  .byte 90 # 'Z' # ArrayType at 100.26
19032:CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
  .word fcn_hashCode_Object # ArrayType at 100.26
  .word fcn_toString_Object # ArrayType at 100.26
  .word fcn_equals_Object # ArrayType at 100.26
19044:END_CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
19044:END_CLASS_Object: # ClassDecl at 0.0
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 115 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 114 # StringLiteral at 20.15
  .byte 116 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .word CLASS_String # StringLiteral at 20.15
  .word 6 # StringLiteral at 20.15
  .word -18 # StringLiteral at 20.15
19076:strLit_21: # StringLiteral at 20.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 10 # StringLiteral at 22.15
  .word CLASS_String # StringLiteral at 22.15
  .word 4 # StringLiteral at 22.15
  .word -12 # StringLiteral at 22.15
19100:strLit_29: # StringLiteral at 22.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 100 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 108 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 114 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 10 # StringLiteral at 29.15
  .byte 0 # StringLiteral at 29.15
  .word CLASS_String # StringLiteral at 29.15
  .word 10 # StringLiteral at 29.15
  .word -35 # StringLiteral at 29.15
19148:strLit_57: # StringLiteral at 29.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 97 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 109 # StringLiteral at 32.15
  .byte 112 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 111 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 100 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 108 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .word CLASS_String # StringLiteral at 32.15
  .word 9 # StringLiteral at 32.15
  .word -29 # StringLiteral at 32.15
19192:strLit_71: # StringLiteral at 32.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 10 # StringLiteral at 34.15
  .word CLASS_String # StringLiteral at 34.15
  .word 4 # StringLiteral at 34.15
  .word -12 # StringLiteral at 34.15
19216:strLit_79: # StringLiteral at 34.15
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 0 # StringLiteral at 464.19
  .word CLASS_String # StringLiteral at 464.19
  .word 2 # StringLiteral at 464.19
  .word -3 # StringLiteral at 464.19
19232:strLit_933: # StringLiteral at 464.19
  .byte 32 # StringLiteral at 467.19
  .byte 47 # StringLiteral at 467.19
  .byte 45 # StringLiteral at 467.19
  .byte 0 # StringLiteral at 467.19
  .word CLASS_String # StringLiteral at 467.19
  .word 2 # StringLiteral at 467.19
  .word -3 # StringLiteral at 467.19
19248:strLit_940: # StringLiteral at 467.19
  .byte 32 # StringLiteral at 470.19
  .byte 92 # StringLiteral at 470.19
  .byte 45 # StringLiteral at 470.19
  .byte 0 # StringLiteral at 470.19
  .word CLASS_String # StringLiteral at 470.19
  .word 2 # StringLiteral at 470.19
  .word -3 # StringLiteral at 470.19
19264:strLit_945: # StringLiteral at 470.19
  .byte 35 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .word CLASS_String # StringLiteral at 473.19
  .word 2 # StringLiteral at 473.19
  .word -1 # StringLiteral at 473.19
19280:strLit_954: # StringLiteral at 473.19
  .byte 42 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .word CLASS_String # StringLiteral at 476.19
  .word 2 # StringLiteral at 476.19
  .word -1 # StringLiteral at 476.19
19296:strLit_959: # StringLiteral at 476.19
  .byte 10 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .word CLASS_String # StringLiteral at 479.15
  .word 2 # StringLiteral at 479.15
  .word -1 # StringLiteral at 479.15
19312:strLit_969: # StringLiteral at 479.15
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 0 # StringLiteral at 488.20
  .word CLASS_String # StringLiteral at 488.20
  .word 2 # StringLiteral at 488.20
  .word -3 # StringLiteral at 488.20
19328:strLit_1008: # StringLiteral at 488.20
  .byte 124 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 0 # StringLiteral at 491.20
  .word CLASS_String # StringLiteral at 491.20
  .word 2 # StringLiteral at 491.20
  .word -3 # StringLiteral at 491.20
19344:strLit_1013: # StringLiteral at 491.20
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 0 # StringLiteral at 495.16
  .word CLASS_String # StringLiteral at 495.16
  .word 2 # StringLiteral at 495.16
  .word -3 # StringLiteral at 495.16
19360:strLit_1020: # StringLiteral at 495.16
.text
.globl main
0:main:
0#  jal vm_init
4#li $s6,2
8#li $s7,0
12#jal newObject
16#la $t0,CLASS_Main
20#sw $t0,-12($s7)
24#lw $s2,($sp)
28#addu $sp,$sp,4
32#jal fcn_main_Main
36#li $v0,10
40#syscall
44:fcn_main_Main:
44#  subu $sp,$sp,4
48#  sw $ra,($sp)
52#  li $s6,1
56#  li $s7,0
60#  jal newObject
64#  la $t0,CLASS_NullRedBlackTree
68#  sw $t0,-12($s7)
72#  lw $0,($sp)
76#  li $t0,20
80#  subu $sp,$sp,8
84#  sw $s5,4($sp)
88#  sw $t0,($sp)
92#  lw $0,($sp)
96#  li $t0,0
100#  subu $sp,$sp,8
104#  sw $s5,4($sp)
108#  sw $t0,($sp)
112#  lw $0,($sp)
116:while_cond_43:
116#  lw $t0,0($sp)
120#  subu $sp,$sp,8
124#  sw $s5,4($sp)
128#  sw $t0,($sp)
132#  lw $t0,16($sp)
136#  subu $sp,$sp,8
140#  sw $s5,4($sp)
144#  sw $t0,($sp)
148#  lw $t2,($sp)
152#  addu $sp,$sp,8
156#  lw $t1,($sp)
160#  addu $sp,$sp,8
164#slt $t0,$t1,$t2
168#  subu $sp,$sp,4
172#  sw $t0,($sp)
176#  lw $t0,($sp)
180#  addu $sp,$sp,4
184#  beq $t0, $0,break_target_43
188#  subu $sp,$sp,4
192#  sw $s2,($sp)
196#  la $t0, strLit_21
200#  subu $sp,$sp,4
204#  sw $t0,($sp)
208#  lw $t0,4($sp)
212#  sw $s2,4($sp)
216#  move $s2, $t0
220#  lw $t0, -12($s2)
224#  lw $t0,24($t0)
228#  jalr $t0
232#  addu $sp,$sp,4
236#  lw $s2,($sp)
240#  addu $sp,$sp,4
244#  subu $sp,$sp,4
248#  sw $t0,($sp)
252#  addu $sp,$sp,4
256#  subu $sp,$sp,4
260#  sw $s2,($sp)
264#  lw $t0,4($sp)
268#  subu $sp,$sp,8
272#  sw $s5,4($sp)
276#  sw $t0,($sp)
280#  lw $t0,8($sp)
284#  sw $s2,8($sp)
288#  move $s2, $t0
292#  lw $t0, -12($s2)
296#  lw $t0,32($t0)
300#  jalr $t0
304#  addu $sp,$sp,8
308#  lw $s2,($sp)
312#  addu $sp,$sp,4
316#  subu $sp,$sp,4
320#  sw $t0,($sp)
324#  addu $sp,$sp,4
328#  subu $sp,$sp,4
332#  sw $s2,($sp)
336#  la $t0, strLit_29
340#  subu $sp,$sp,4
344#  sw $t0,($sp)
348#  lw $t0,4($sp)
352#  sw $s2,4($sp)
356#  move $s2, $t0
360#  lw $t0, -12($s2)
364#  lw $t0,24($t0)
368#  jalr $t0
372#  addu $sp,$sp,4
376#  lw $s2,($sp)
380#  addu $sp,$sp,4
384#  subu $sp,$sp,4
388#  sw $t0,($sp)
392#  addu $sp,$sp,4
396#  lw $t0,16($sp)
400#  subu $sp,$sp,4
404#  sw $t0,($sp)
408#  lw $t0,20($sp)
412#  subu $sp,$sp,4
416#  sw $t0,($sp)
420#  lw $t0,8($sp)
424#  subu $sp,$sp,8
428#  sw $s5,4($sp)
432#  sw $t0,($sp)
436#  lw $t0,8($sp)
440#  sw $s2,8($sp)
444#  move $s2, $t0
448#  lw $t0, -12($s2)
452#  lw $t0,32($t0)
456#  jalr $t0
460#  addu $sp,$sp,8
464#  lw $s2,($sp)
468#  addu $sp,$sp,4
472#  subu $sp,$sp,4
476#  sw $t0,($sp)
480#  lw $t0,($sp)
484#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 23.11; stackHeight = 28
488#  sw $t0,20($sp)
492#  lw $t0,20($sp)
496#  subu $sp,$sp,4
500#  sw $t0,($sp)
504#  lw $t0,0($sp)
508#  sw $s2,0($sp)
512#  move $s2, $t0
516#  lw $t0, -12($s2)
520#  lw $t0,40($t0)
524#  jalr $t0
528#  addu $sp,$sp,0
532#  lw $s2,($sp)
536#  addu $sp,$sp,4
540#  subu $sp,$sp,4
544#  sw $t0,($sp)
548#  addu $sp,$sp,4
552#  lw $t0,4($sp)
556#  subu $sp,$sp,8
560#  sw $s5,4($sp)
564#  sw $t0,($sp)
568#  lw $t0,12($sp)
572#  subu $sp,$sp,8
576#  sw $s5,4($sp)
580#  sw $t0,($sp)
584#  li $t0,1
588#  subu $sp,$sp,8
592#  sw $s5,4($sp)
596#  sw $t0,($sp)
600#  lw $t2,($sp)
604#  addu $sp,$sp,8
608#  lw $t1,($sp)
612#  addu $sp,$sp,8
616#  addu $t0,$t1,$t2
620#  subu $sp,$sp,8
624#  sw $s5,4($sp)
628#  sw $t0,($sp)
632#  lw $t0,($sp)
636#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 19.35; stackHeight = 36
640#  sw $t0,12($sp)
644#  j while_cond_43
648:break_target_43:
648#  li $t0,0
652#  subu $sp,$sp,8
656#  sw $s5,4($sp)
660#  sw $t0,($sp)
664#  lw $0,($sp)
668:while_cond_93:
668#  lw $t0,36($sp)
672#  subu $sp,$sp,4
676#  sw $t0,($sp)
680#  lw $t0,0($sp)
684#  sw $s2,0($sp)
688#  move $s2, $t0
692#  lw $t0, -12($s2)
696#  lw $t0,12($t0)
700#  jalr $t0
704#  addu $sp,$sp,0
708#  lw $s2,($sp)
712#  addu $sp,$sp,4
716#  subu $sp,$sp,4
720#  sw $t0,($sp)
724#lw $t0,($sp)
728#xor $t0,$t0,1
732#sw $t0,($sp)
736#  lw $t0,($sp)
740#  addu $sp,$sp,4
744#  beq $t0, $0,break_target_93
748#  subu $sp,$sp,4
752#  sw $s2,($sp)
756#  la $t0, strLit_57
760#  subu $sp,$sp,4
764#  sw $t0,($sp)
768#  lw $t0,4($sp)
772#  sw $s2,4($sp)
776#  move $s2, $t0
780#  lw $t0, -12($s2)
784#  lw $t0,24($t0)
788#  jalr $t0
792#  addu $sp,$sp,4
796#  lw $s2,($sp)
800#  addu $sp,$sp,4
804#  subu $sp,$sp,4
808#  sw $t0,($sp)
812#  addu $sp,$sp,4
816#  lw $t0,36($sp)
820#  subu $sp,$sp,4
824#  sw $t0,($sp)
828#  lw $t0,40($sp)
832#  subu $sp,$sp,4
836#  sw $t0,($sp)
840#  lw $t0,44($sp)
844#  subu $sp,$sp,4
848#  sw $t0,($sp)
852#  lw $t0,0($sp)
856#  sw $s2,0($sp)
860#  move $s2, $t0
864#  lw $t0, -12($s2)
868#  lw $t0,36($t0)
872#  jalr $t0
876#  addu $sp,$sp,0
880#  lw $s2,($sp)
884#  addu $sp,$sp,4
888#  subu $sp,$sp,4
892#  sw $t0,($sp)
896#  lw $t0,($sp)
900#  addu $sp,$sp,8
904#  beq $t0,$0,nullPtrException
908#lw $t0,-16($s2)
912#  subu $sp,$sp,8
916#  sw $s5,4($sp)
920#  sw $t0,($sp)
924#  lw $t0,4($sp)
928#  sw $s2,4($sp)
932#  move $s2, $t0
936#  lw $t0, -12($s2)
940#  lw $t0,52($t0)
944#  jalr $t0
948#  addu $sp,$sp,4
952#  lw $s2,($sp)
956#  addu $sp,$sp,4
960#  subu $sp,$sp,4
964#  sw $t0,($sp)
968#  lw $t0,($sp)
972#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 30.11; stackHeight = 48
976#  sw $t0,40($sp)
980#  lw $t0,40($sp)
984#  subu $sp,$sp,4
988#  sw $t0,($sp)
992#  lw $t0,0($sp)
996#  sw $s2,0($sp)
1000#  move $s2, $t0
1004#  lw $t0, -12($s2)
1008#  lw $t0,40($t0)
1012#  jalr $t0
1016#  addu $sp,$sp,0
1020#  lw $s2,($sp)
1024#  addu $sp,$sp,4
1028#  subu $sp,$sp,4
1032#  sw $t0,($sp)
1036#  addu $sp,$sp,4
1040#  subu $sp,$sp,4
1044#  sw $s2,($sp)
1048#  la $t0, strLit_71
1052#  subu $sp,$sp,4
1056#  sw $t0,($sp)
1060#  lw $t0,4($sp)
1064#  sw $s2,4($sp)
1068#  move $s2, $t0
1072#  lw $t0, -12($s2)
1076#  lw $t0,24($t0)
1080#  jalr $t0
1084#  addu $sp,$sp,4
1088#  lw $s2,($sp)
1092#  addu $sp,$sp,4
1096#  subu $sp,$sp,4
1100#  sw $t0,($sp)
1104#  addu $sp,$sp,4
1108#  subu $sp,$sp,4
1112#  sw $s2,($sp)
1116#  lw $t0,8($sp)
1120#  subu $sp,$sp,8
1124#  sw $s5,4($sp)
1128#  sw $t0,($sp)
1132#  lw $t0,8($sp)
1136#  sw $s2,8($sp)
1140#  move $s2, $t0
1144#  lw $t0, -12($s2)
1148#  lw $t0,32($t0)
1152#  jalr $t0
1156#  addu $sp,$sp,8
1160#  lw $s2,($sp)
1164#  addu $sp,$sp,4
1168#  subu $sp,$sp,4
1172#  sw $t0,($sp)
1176#  addu $sp,$sp,4
1180#  subu $sp,$sp,4
1184#  sw $s2,($sp)
1188#  la $t0, strLit_79
1192#  subu $sp,$sp,4
1196#  sw $t0,($sp)
1200#  lw $t0,4($sp)
1204#  sw $s2,4($sp)
1208#  move $s2, $t0
1212#  lw $t0, -12($s2)
1216#  lw $t0,24($t0)
1220#  jalr $t0
1224#  addu $sp,$sp,4
1228#  lw $s2,($sp)
1232#  addu $sp,$sp,4
1236#  subu $sp,$sp,4
1240#  sw $t0,($sp)
1244#  addu $sp,$sp,4
1248#  lw $t0,40($sp)
1252#  subu $sp,$sp,4
1256#  sw $t0,($sp)
1260#  lw $t0,44($sp)
1264#  subu $sp,$sp,4
1268#  sw $t0,($sp)
1272#  lw $t0,12($sp)
1276#  subu $sp,$sp,8
1280#  sw $s5,4($sp)
1284#  sw $t0,($sp)
1288#  lw $t0,8($sp)
1292#  sw $s2,8($sp)
1296#  move $s2, $t0
1300#  lw $t0, -12($s2)
1304#  lw $t0,52($t0)
1308#  jalr $t0
1312#  addu $sp,$sp,8
1316#  lw $s2,($sp)
1320#  addu $sp,$sp,4
1324#  subu $sp,$sp,4
1328#  sw $t0,($sp)
1332#  lw $t0,($sp)
1336#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 35.11; stackHeight = 52
1340#  sw $t0,44($sp)
1344#  lw $t0,44($sp)
1348#  subu $sp,$sp,4
1352#  sw $t0,($sp)
1356#  lw $t0,0($sp)
1360#  sw $s2,0($sp)
1364#  move $s2, $t0
1368#  lw $t0, -12($s2)
1372#  lw $t0,40($t0)
1376#  jalr $t0
1380#  addu $sp,$sp,0
1384#  lw $s2,($sp)
1388#  addu $sp,$sp,4
1392#  subu $sp,$sp,4
1396#  sw $t0,($sp)
1400#  addu $sp,$sp,4
1404#  lw $t0,8($sp)
1408#  subu $sp,$sp,8
1412#  sw $s5,4($sp)
1416#  sw $t0,($sp)
1420#  lw $t0,16($sp)
1424#  subu $sp,$sp,8
1428#  sw $s5,4($sp)
1432#  sw $t0,($sp)
1436#  li $t0,1
1440#  subu $sp,$sp,8
1444#  sw $s5,4($sp)
1448#  sw $t0,($sp)
1452#  lw $t2,($sp)
1456#  addu $sp,$sp,8
1460#  lw $t1,($sp)
1464#  addu $sp,$sp,8
1468#  addu $t0,$t1,$t2
1472#  subu $sp,$sp,8
1476#  sw $s5,4($sp)
1480#  sw $t0,($sp)
1484#  lw $t0,($sp)
1488#  addu $sp,$sp,8
# IdentifierExp Assignment: Assign at 28.34; stackHeight = 60
1492#  sw $t0,16($sp)
1496#  j while_cond_93
1500:break_target_93:
1500#  addu $sp,$sp,56
1504#  addu $sp,$sp,0
1508#  lw $ra,($sp)
1512#  addu $sp,$sp,4
1516#  jr $ra
.globl fcn_isNull_RedBlackTree
1520:fcn_isNull_RedBlackTree:
1520#  subu $sp,$sp,4
1524#  sw $ra,($sp)
1528#  addu $sp,$sp,0
1532#  subu $sp,$sp,4
1536#  sw $0,($sp)
1540#  lw $t0,($sp)
1544#  addu $sp,$sp,4
1548#  addu $sp,$sp,0
1552#  lw $ra,($sp)
1556#  addu $sp,$sp,4
1560#  jr $ra
.globl fcn_isBlack_RedBlackTree
1564:fcn_isBlack_RedBlackTree:
1564#  subu $sp,$sp,4
1568#  sw $ra,($sp)
1572#  addu $sp,$sp,0
1576#  li $t0,1
1580#  subu $sp,$sp,4
1584#  sw $t0,($sp)
1588#  lw $t0,($sp)
1592#  addu $sp,$sp,4
1596#  addu $sp,$sp,0
1600#  lw $ra,($sp)
1604#  addu $sp,$sp,4
1608#  jr $ra
1612:fcn_setBlack_RedBlackTree:
1612#  subu $sp,$sp,4
1616#  sw $ra,($sp)
1620#  addu $sp,$sp,0
1624#  addu $sp,$sp,0
1628#  lw $ra,($sp)
1632#  addu $sp,$sp,4
1636#  jr $ra
.globl fcn_isRed_RedBlackTree
1640:fcn_isRed_RedBlackTree:
1640#  subu $sp,$sp,4
1644#  sw $ra,($sp)
1648#  addu $sp,$sp,0
1652#  subu $sp,$sp,4
1656#  sw $s2,($sp)
1660#  lw $t0,0($sp)
1664#  sw $s2,0($sp)
1668#  move $s2, $t0
1672#  lw $t0, -12($s2)
1676#  lw $t0,16($t0)
1680#  jalr $t0
1684#  addu $sp,$sp,0
1688#  lw $s2,($sp)
1692#  addu $sp,$sp,4
1696#  subu $sp,$sp,4
1700#  sw $t0,($sp)
1704#lw $t0,($sp)
1708#xor $t0,$t0,1
1712#sw $t0,($sp)
1716#  lw $t0,($sp)
1720#  addu $sp,$sp,4
1724#  addu $sp,$sp,0
1728#  lw $ra,($sp)
1732#  addu $sp,$sp,4
1736#  jr $ra
.globl fcn_helpInsert_RedBlackTree
1740:fcn_helpInsert_RedBlackTree:
1740#  subu $sp,$sp,4
1744#  sw $ra,($sp)
1748#  addu $sp,$sp,0
1752#  subu $sp,$sp,4
1756#  sw $0,($sp)
1760#  lw $t0,($sp)
1764#  addu $sp,$sp,4
1768#  addu $sp,$sp,0
1772#  lw $ra,($sp)
1776#  addu $sp,$sp,4
1780#  jr $ra
.globl fcn_insert_RedBlackTree
1784:fcn_insert_RedBlackTree:
1784#  subu $sp,$sp,4
1788#  sw $ra,($sp)
1792#  subu $sp,$sp,4
1796#  sw $s2,($sp)
1800#  lw $t0,8($sp)
1804#  subu $sp,$sp,8
1808#  sw $s5,4($sp)
1812#  sw $t0,($sp)
1816#  lw $t0,8($sp)
1820#  sw $s2,8($sp)
1824#  move $s2, $t0
1828#  lw $t0, -12($s2)
1832#  lw $t0,28($t0)
1836#  jalr $t0
1840#  addu $sp,$sp,8
1844#  lw $s2,($sp)
1848#  addu $sp,$sp,4
1852#  subu $sp,$sp,4
1856#  sw $t0,($sp)
1860#  lw $0,($sp)
1864#  lw $t0,0($sp)
1868#  subu $sp,$sp,4
1872#  sw $t0,($sp)
1876#  lw $t0,0($sp)
1880#  sw $s2,0($sp)
1884#  move $s2, $t0
1888#  lw $t0, -12($s2)
1892#  lw $t0,20($t0)
1896#  jalr $t0
1900#  addu $sp,$sp,0
1904#  lw $s2,($sp)
1908#  addu $sp,$sp,4
1912#  subu $sp,$sp,4
1916#  sw $t0,($sp)
1920#  addu $sp,$sp,4
1924#  addu $sp,$sp,4
1928#  lw $t0,-4($sp)
1932#  subu $sp,$sp,4
1936#  sw $t0,($sp)
1940#  lw $t0,($sp)
1944#  addu $sp,$sp,4
1948#  addu $sp,$sp,0
1952#  lw $ra,($sp)
1956#  addu $sp,$sp,4
1960#  jr $ra
.globl fcn_asNonNull_RedBlackTree
1964:fcn_asNonNull_RedBlackTree:
1964#  subu $sp,$sp,4
1968#  sw $ra,($sp)
1972#  addu $sp,$sp,0
1976#  subu $sp,$sp,4
1980#  sw $0,($sp)
1984#  lw $t0,($sp)
1988#  addu $sp,$sp,4
1992#  addu $sp,$sp,0
1996#  lw $ra,($sp)
2000#  addu $sp,$sp,4
2004#  jr $ra
2008:fcn_print_RedBlackTree:
2008#  subu $sp,$sp,4
2012#  sw $ra,($sp)
2016#  li $s6,1
2020#  li $s7,0
2024#  jal newObject
2028#  la $t0,CLASS_Lib
2032#  sw $t0,-12($s7)
2036#  lw $0,($sp)
2040#  subu $sp,$sp,4
2044#  sw $s2,($sp)
2048#  subu $sp,$sp,4
2052#  sw $0,($sp)
2056#  lw $t0,8($sp)
2060#  subu $sp,$sp,4
2064#  sw $t0,($sp)
2068#  lw $t0,8($sp)
2072#  sw $s2,8($sp)
2076#  move $s2, $t0
2080#  lw $t0, -12($s2)
2084#  lw $t0,44($t0)
2088#  jalr $t0
2092#  addu $sp,$sp,8
2096#  lw $s2,($sp)
2100#  addu $sp,$sp,4
2104#  subu $sp,$sp,4
2108#  sw $t0,($sp)
2112#  addu $sp,$sp,4
2116#  addu $sp,$sp,4
2120#  addu $sp,$sp,0
2124#  lw $ra,($sp)
2128#  addu $sp,$sp,4
2132#  jr $ra
2136:fcn_helpPrint_RedBlackTree:
2136#  subu $sp,$sp,4
2140#  sw $ra,($sp)
2144#  addu $sp,$sp,0
2148#  addu $sp,$sp,0
2152#  lw $ra,($sp)
2156#  addu $sp,$sp,4
2160#  jr $ra
.globl fcn_lookup_RedBlackTree
2164:fcn_lookup_RedBlackTree:
2164#  subu $sp,$sp,4
2168#  sw $ra,($sp)
2172#  addu $sp,$sp,0
2176#  subu $sp,$sp,4
2180#  sw $0,($sp)
2184#  lw $t0,($sp)
2188#  addu $sp,$sp,4
2192#  addu $sp,$sp,0
2196#  lw $ra,($sp)
2200#  addu $sp,$sp,4
2204#  jr $ra
.globl fcn_delete_RedBlackTree
2208:fcn_delete_RedBlackTree:
2208#  subu $sp,$sp,4
2212#  sw $ra,($sp)
2216#  addu $sp,$sp,0
2220#  subu $sp,$sp,4
2224#  sw $s2,($sp)
2228#  lw $t0,8($sp)
2232#  subu $sp,$sp,8
2236#  sw $s5,4($sp)
2240#  sw $t0,($sp)
2244#  li $t0,1
2248#  subu $sp,$sp,8
2252#  sw $s5,4($sp)
2256#  sw $t0,($sp)
2260#li $s6,1
2264#  lw $s7,($sp)
2268#  addu $sp,$sp,8
2272#jal newObject
2276#la $t0, CLASS_ARRAY_BOOLEAN
2280#sw $t0, -12($s7)
2284#  lw $t0,12($sp)
2288#  sw $s2,12($sp)
2292#  move $s2, $t0
2296#  lw $t0, -12($s2)
2300#  lw $t0,56($t0)
2304#  jalr $t0
2308#  addu $sp,$sp,12
2312#  lw $s2,($sp)
2316#  addu $sp,$sp,4
2320#  subu $sp,$sp,4
2324#  sw $t0,($sp)
2328#  lw $t0,($sp)
2332#  addu $sp,$sp,4
2336#  addu $sp,$sp,0
2340#  lw $ra,($sp)
2344#  addu $sp,$sp,4
2348#  jr $ra
.globl fcn_helpDelete_RedBlackTree
2352:fcn_helpDelete_RedBlackTree:
2352#  subu $sp,$sp,4
2356#  sw $ra,($sp)
2360#  addu $sp,$sp,0
2364#  subu $sp,$sp,4
2368#  sw $s2,($sp)
2372#  lw $t0,($sp)
2376#  addu $sp,$sp,4
2380#  addu $sp,$sp,0
2384#  lw $ra,($sp)
2388#  addu $sp,$sp,4
2392#  jr $ra
.globl fcn_isNull_NullRedBlackTree
2396:fcn_isNull_NullRedBlackTree:
2396#  subu $sp,$sp,4
2400#  sw $ra,($sp)
2404#  addu $sp,$sp,0
2408#  li $t0,1
2412#  subu $sp,$sp,4
2416#  sw $t0,($sp)
2420#  lw $t0,($sp)
2424#  addu $sp,$sp,4
2428#  addu $sp,$sp,0
2432#  lw $ra,($sp)
2436#  addu $sp,$sp,4
2440#  jr $ra
.globl fcn_helpInsert_NullRedBlackTree
2444:fcn_helpInsert_NullRedBlackTree:
2444#  subu $sp,$sp,4
2448#  sw $ra,($sp)
2452#  addu $sp,$sp,0
2456#  li $s6,3
2460#  li $s7,2
2464#  jal newObject
2468#  la $t0,CLASS_NonNullRedBlackTree
2472#  sw $t0,-12($s7)
2476#  lw $t0,8($sp)
2480#  subu $sp,$sp,8
2484#  sw $s5,4($sp)
2488#  sw $t0,($sp)
2492#  subu $sp,$sp,4
2496#  sw $s2,($sp)
2500#  subu $sp,$sp,4
2504#  sw $s2,($sp)
2508#  subu $sp,$sp,4
2512#  sw $0,($sp)
2516#  lw $t0,20($sp)
2520#  sw $s2,20($sp)
2524#  move $s2, $t0
2528#  lw $t0, -12($s2)
2532#  lw $t0,64($t0)
2536#  jalr $t0
2540#  addu $sp,$sp,20
2544#  lw $s2,($sp)
2548#  addu $sp,$sp,4
2552#  subu $sp,$sp,4
2556#  sw $t0,($sp)
2560#  lw $t0,($sp)
2564#  addu $sp,$sp,4
2568#  addu $sp,$sp,0
2572#  lw $ra,($sp)
2576#  addu $sp,$sp,4
2580#  jr $ra
.globl fcn_isBlack_NonNullRedBlackTree
2584:fcn_isBlack_NonNullRedBlackTree:
2584#  subu $sp,$sp,4
2588#  sw $ra,($sp)
2592#  addu $sp,$sp,0
2596#  lw $t0,24($sp)
2600#  subu $sp,$sp,4
2604#  sw $t0,($sp)
2608#  lw $t0,($sp)
2612#  addu $sp,$sp,4
2616#  addu $sp,$sp,0
2620#  lw $ra,($sp)
2624#  addu $sp,$sp,4
2628#  jr $ra
2632:fcn_setBlack_NonNullRedBlackTree:
2632#  subu $sp,$sp,4
2636#  sw $ra,($sp)
2640#  lw $t0,24($sp)
2644#  subu $sp,$sp,4
2648#  sw $t0,($sp)
2652#  li $t0,1
2656#  subu $sp,$sp,4
2660#  sw $t0,($sp)
2664#  lw $t0,($sp)
2668#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 140.10; stackHeight = 8
2672#  sw $t0,-20($sp)
2676#  addu $sp,$sp,4
2680#  addu $sp,$sp,0
2684#  lw $ra,($sp)
2688#  addu $sp,$sp,4
2692#  jr $ra
2696:fcn_setRed_NonNullRedBlackTree:
2696#  subu $sp,$sp,4
2700#  sw $ra,($sp)
2704#  lw $t0,24($sp)
2708#  subu $sp,$sp,4
2712#  sw $t0,($sp)
2716#  subu $sp,$sp,4
2720#  sw $0,($sp)
2724#  lw $t0,($sp)
2728#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 145.10; stackHeight = 8
2732#  sw $t0,-20($sp)
2736#  addu $sp,$sp,4
2740#  addu $sp,$sp,0
2744#  lw $ra,($sp)
2748#  addu $sp,$sp,4
2752#  jr $ra
.globl fcn_init_NonNullRedBlackTree
2756:fcn_init_NonNullRedBlackTree:
2756#  subu $sp,$sp,4
2760#  sw $ra,($sp)
2764#  subu $sp,$sp,4
2768#  sw $s2,($sp)
2772#  lw $t0,($sp)
2776#  addu $sp,$sp,8
2780#  beq $t0,$0,nullPtrException
2784#lw $t0,-16($s2)
2788#  subu $sp,$sp,8
2792#  sw $s5,4($sp)
2796#  sw $t0,($sp)
2800#  lw $t0,20($sp)
2804#  subu $sp,$sp,8
2808#  sw $s5,4($sp)
2812#  sw $t0,($sp)
# InstVar Assignment: Assign at 151.12; stackHeight = 36
2816#  lw $t0,($sp)
2820#  addu $sp,$sp,8
2824#  lw $t1,($sp)
2828#  addu $sp,$sp,4
2832#  beq $t1,$0,nullPtrException
2836#  sw $t0,-16($s2)
2840#  subu $sp,$sp,4
2844#  sw $s2,($sp)
2848#  lw $t0,($sp)
2852#  addu $sp,$sp,4
2856#  beq $t0,$0,nullPtrException
2860#lw $t0,0($s2)
2864#  subu $sp,$sp,4
2868#  sw $t0,($sp)
2872#  lw $t0,16($sp)
2876#  subu $sp,$sp,4
2880#  sw $t0,($sp)
# InstVar Assignment: Assign at 152.12; stackHeight = 32
2884#  lw $t0,($sp)
2888#  addu $sp,$sp,4
2892#  lw $t1,($sp)
2896#  addu $sp,$sp,4
2900#  beq $t1,$0,nullPtrException
2904#  sw $t0,0($s2)
2908#  subu $sp,$sp,4
2912#  sw $s2,($sp)
2916#  lw $t0,($sp)
2920#  addu $sp,$sp,4
2924#  beq $t0,$0,nullPtrException
2928#lw $t0,4($s2)
2932#  subu $sp,$sp,4
2936#  sw $t0,($sp)
2940#  lw $t0,12($sp)
2944#  subu $sp,$sp,4
2948#  sw $t0,($sp)
# InstVar Assignment: Assign at 153.13; stackHeight = 32
2952#  lw $t0,($sp)
2956#  addu $sp,$sp,4
2960#  lw $t1,($sp)
2964#  addu $sp,$sp,4
2968#  beq $t1,$0,nullPtrException
2972#  sw $t0,4($s2)
2976#  subu $sp,$sp,4
2980#  sw $s2,($sp)
2984#  lw $t0,($sp)
2988#  addu $sp,$sp,4
2992#  beq $t0,$0,nullPtrException
2996#lw $t0,-20($s2)
3000#  subu $sp,$sp,4
3004#  sw $t0,($sp)
3008#  lw $t0,8($sp)
3012#  subu $sp,$sp,4
3016#  sw $t0,($sp)
# InstVar Assignment: Assign at 154.15; stackHeight = 32
3020#  lw $t0,($sp)
3024#  addu $sp,$sp,4
3028#  lw $t1,($sp)
3032#  addu $sp,$sp,4
3036#  beq $t1,$0,nullPtrException
3040#  sw $t0,-20($s2)
3044#  addu $sp,$sp,0
3048#  subu $sp,$sp,4
3052#  sw $s2,($sp)
3056#  lw $t0,($sp)
3060#  addu $sp,$sp,4
3064#  addu $sp,$sp,0
3068#  lw $ra,($sp)
3072#  addu $sp,$sp,4
3076#  jr $ra
.globl fcn_helpInsert_NonNullRedBlackTree
3080:fcn_helpInsert_NonNullRedBlackTree:
3080#  subu $sp,$sp,4
3084#  sw $ra,($sp)
3088#  subu $sp,$sp,4
3092#  sw $s2,($sp)
3096#  lw $0,($sp)
3100#  lw $t0,8($sp)
3104#  subu $sp,$sp,8
3108#  sw $s5,4($sp)
3112#  sw $t0,($sp)
3116#  subu $sp,$sp,4
3120#  sw $s2,($sp)
3124#  lw $t0,($sp)
3128#  addu $sp,$sp,8
3132#  beq $t0,$0,nullPtrException
3136#lw $t0,-16($s2)
3140#  subu $sp,$sp,8
3144#  sw $s5,4($sp)
3148#  sw $t0,($sp)
3152#  lw $t2,($sp)
3156#  addu $sp,$sp,8
3160#  lw $t1,($sp)
3164#  addu $sp,$sp,8
3168#  sgt $t0,$t1,$t2
3172#  subu $sp,$sp,4
3176#  sw $t0,($sp)
3180#  lw $t0,($sp)
3184#  addu $sp,$sp,4
3188#  beq $t0,$0,if_else_271
3192#  lw $t0,8($sp)
3196#  subu $sp,$sp,4
3200#  sw $t0,($sp)
3204#  lw $t0,12($sp)
3208#  subu $sp,$sp,4
3212#  sw $t0,($sp)
3216#  lw $t0,12($sp)
3220#  subu $sp,$sp,8
3224#  sw $s5,4($sp)
3228#  sw $t0,($sp)
3232#  lw $t0,8($sp)
3236#  sw $s2,8($sp)
3240#  move $s2, $t0
3244#  lw $t0, -12($s2)
3248#  lw $t0,28($t0)
3252#  jalr $t0
3256#  addu $sp,$sp,8
3260#  lw $s2,($sp)
3264#  addu $sp,$sp,4
3268#  subu $sp,$sp,4
3272#  sw $t0,($sp)
3276#  lw $t0,($sp)
3280#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 167.12; stackHeight = 16
3284#  sw $t0,4($sp)
3288#  lw $t0,0($sp)
3292#  subu $sp,$sp,4
3296#  sw $t0,($sp)
3300#  subu $sp,$sp,4
3304#  sw $s2,($sp)
3308#  subu $sp,$sp,4
3312#  sw $0,($sp)
3316#  lw $t0,4($sp)
3320#  sw $s2,4($sp)
3324#  move $s2, $t0
3328#  lw $t0, -12($s2)
3332#  lw $t0,88($t0)
3336#  jalr $t0
3340#  addu $sp,$sp,4
3344#  lw $s2,($sp)
3348#  addu $sp,$sp,4
3352#  subu $sp,$sp,4
3356#  sw $t0,($sp)
3360#  lw $t0,($sp)
3364#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 168.13; stackHeight = 20
3368#  sw $t0,4($sp)
3372#j if_done_271
3376:if_else_271:
3376#  lw $t0,12($sp)
3380#  subu $sp,$sp,8
3384#  sw $s5,4($sp)
3388#  sw $t0,($sp)
3392#  subu $sp,$sp,4
3396#  sw $s2,($sp)
3400#  lw $t0,($sp)
3404#  addu $sp,$sp,8
3408#  beq $t0,$0,nullPtrException
3412#lw $t0,-16($s2)
3416#  subu $sp,$sp,8
3420#  sw $s5,4($sp)
3424#  sw $t0,($sp)
3428#  lw $t2,($sp)
3432#  addu $sp,$sp,8
3436#  lw $t1,($sp)
3440#  addu $sp,$sp,8
3444#slt $t0,$t1,$t2
3448#  subu $sp,$sp,4
3452#  sw $t0,($sp)
3456#  lw $t0,($sp)
3460#  addu $sp,$sp,4
3464#  beq $t0,$0,if_else_270
3468#  lw $t0,16($sp)
3472#  subu $sp,$sp,4
3476#  sw $t0,($sp)
3480#  lw $t0,20($sp)
3484#  subu $sp,$sp,4
3488#  sw $t0,($sp)
3492#  lw $t0,16($sp)
3496#  subu $sp,$sp,8
3500#  sw $s5,4($sp)
3504#  sw $t0,($sp)
3508#  lw $t0,8($sp)
3512#  sw $s2,8($sp)
3516#  move $s2, $t0
3520#  lw $t0, -12($s2)
3524#  lw $t0,28($t0)
3528#  jalr $t0
3532#  addu $sp,$sp,8
3536#  lw $s2,($sp)
3540#  addu $sp,$sp,4
3544#  subu $sp,$sp,4
3548#  sw $t0,($sp)
3552#  lw $t0,($sp)
3556#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 172.11; stackHeight = 20
3560#  sw $t0,0($sp)
3564#  lw $t0,4($sp)
3568#  subu $sp,$sp,4
3572#  sw $t0,($sp)
3576#  subu $sp,$sp,4
3580#  sw $s2,($sp)
3584#  li $t0,1
3588#  subu $sp,$sp,4
3592#  sw $t0,($sp)
3596#  lw $t0,4($sp)
3600#  sw $s2,4($sp)
3604#  move $s2, $t0
3608#  lw $t0, -12($s2)
3612#  lw $t0,88($t0)
3616#  jalr $t0
3620#  addu $sp,$sp,4
3624#  lw $s2,($sp)
3628#  addu $sp,$sp,4
3632#  subu $sp,$sp,4
3636#  sw $t0,($sp)
3640#  lw $t0,($sp)
3644#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 173.13; stackHeight = 24
3648#  sw $t0,8($sp)
3652#j if_done_270
3656:if_else_270:
3656:if_done_270:
3656:if_done_271:
3656#  addu $sp,$sp,12
3660#  lw $t0,-4($sp)
3664#  subu $sp,$sp,4
3668#  sw $t0,($sp)
3672#  lw $t0,($sp)
3676#  addu $sp,$sp,4
3680#  addu $sp,$sp,0
3684#  lw $ra,($sp)
3688#  addu $sp,$sp,4
3692#  jr $ra
.globl fcn_lookup_NonNullRedBlackTree
3696:fcn_lookup_NonNullRedBlackTree:
3696#  subu $sp,$sp,4
3700#  sw $ra,($sp)
3704#  li $t0,1
3708#  subu $sp,$sp,4
3712#  sw $t0,($sp)
3716#  lw $0,($sp)
3720#  lw $t0,8($sp)
3724#  subu $sp,$sp,8
3728#  sw $s5,4($sp)
3732#  sw $t0,($sp)
3736#  subu $sp,$sp,4
3740#  sw $s2,($sp)
3744#  lw $t0,($sp)
3748#  addu $sp,$sp,8
3752#  beq $t0,$0,nullPtrException
3756#lw $t0,-16($s2)
3760#  subu $sp,$sp,8
3764#  sw $s5,4($sp)
3768#  sw $t0,($sp)
3772#  lw $t2,($sp)
3776#  addu $sp,$sp,8
3780#  lw $t1,($sp)
3784#  addu $sp,$sp,8
3788#slt $t0,$t1,$t2
3792#  subu $sp,$sp,4
3796#  sw $t0,($sp)
3800#  lw $t0,($sp)
3804#  addu $sp,$sp,4
3808#  beq $t0,$0,if_else_303
3812#  lw $t0,-4($sp)
3816#  subu $sp,$sp,4
3820#  sw $t0,($sp)
3824#  lw $t0,16($sp)
3828#  subu $sp,$sp,4
3832#  sw $t0,($sp)
3836#  lw $t0,12($sp)
3840#  subu $sp,$sp,8
3844#  sw $s5,4($sp)
3848#  sw $t0,($sp)
3852#  lw $t0,8($sp)
3856#  sw $s2,8($sp)
3860#  move $s2, $t0
3864#  lw $t0, -12($s2)
3868#  lw $t0,48($t0)
3872#  jalr $t0
3876#  addu $sp,$sp,8
3880#  lw $s2,($sp)
3884#  addu $sp,$sp,4
3888#  subu $sp,$sp,4
3892#  sw $t0,($sp)
3896#  lw $t0,($sp)
3900#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 184.13; stackHeight = 16
3904#  sw $t0,0($sp)
3908#j if_done_303
3912:if_else_303:
3912#  lw $t0,8($sp)
3916#  subu $sp,$sp,8
3920#  sw $s5,4($sp)
3924#  sw $t0,($sp)
3928#  subu $sp,$sp,4
3932#  sw $s2,($sp)
3936#  lw $t0,($sp)
3940#  addu $sp,$sp,8
3944#  beq $t0,$0,nullPtrException
3948#lw $t0,-16($s2)
3952#  subu $sp,$sp,8
3956#  sw $s5,4($sp)
3960#  sw $t0,($sp)
3964#  lw $t2,($sp)
3968#  addu $sp,$sp,8
3972#  lw $t1,($sp)
3976#  addu $sp,$sp,8
3980#  sgt $t0,$t1,$t2
3984#  subu $sp,$sp,4
3988#  sw $t0,($sp)
3992#  lw $t0,($sp)
3996#  addu $sp,$sp,4
4000#  beq $t0,$0,if_else_302
4004#  lw $t0,-4($sp)
4008#  subu $sp,$sp,4
4012#  sw $t0,($sp)
4016#  lw $t0,12($sp)
4020#  subu $sp,$sp,4
4024#  sw $t0,($sp)
4028#  lw $t0,12($sp)
4032#  subu $sp,$sp,8
4036#  sw $s5,4($sp)
4040#  sw $t0,($sp)
4044#  lw $t0,8($sp)
4048#  sw $s2,8($sp)
4052#  move $s2, $t0
4056#  lw $t0, -12($s2)
4060#  lw $t0,48($t0)
4064#  jalr $t0
4068#  addu $sp,$sp,8
4072#  lw $s2,($sp)
4076#  addu $sp,$sp,4
4080#  subu $sp,$sp,4
4084#  sw $t0,($sp)
4088#  lw $t0,($sp)
4092#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 187.13; stackHeight = 16
4096#  sw $t0,0($sp)
4100#j if_done_302
4104:if_else_302:
4104:if_done_302:
4104:if_done_303:
4104#  addu $sp,$sp,4
4108#  lw $t0,-4($sp)
4112#  subu $sp,$sp,4
4116#  sw $t0,($sp)
4120#  lw $t0,($sp)
4124#  addu $sp,$sp,4
4128#  addu $sp,$sp,0
4132#  lw $ra,($sp)
4136#  addu $sp,$sp,4
4140#  jr $ra
.globl fcn_helpDelete_NonNullRedBlackTree
4144:fcn_helpDelete_NonNullRedBlackTree:
4144#  subu $sp,$sp,4
4148#  sw $ra,($sp)
4152#  subu $sp,$sp,4
4156#  sw $0,($sp)
4160#  lw $0,($sp)
4164#  subu $sp,$sp,4
4168#  sw $s2,($sp)
4172#  lw $0,($sp)
4176#  lw $t0,16($sp)
4180#  subu $sp,$sp,8
4184#  sw $s5,4($sp)
4188#  sw $t0,($sp)
4192#  subu $sp,$sp,4
4196#  sw $s2,($sp)
4200#  lw $t0,($sp)
4204#  addu $sp,$sp,8
4208#  beq $t0,$0,nullPtrException
4212#lw $t0,-16($s2)
4216#  subu $sp,$sp,8
4220#  sw $s5,4($sp)
4224#  sw $t0,($sp)
4228#  lw $t2,($sp)
4232#  addu $sp,$sp,8
4236#  lw $t1,($sp)
4240#  addu $sp,$sp,8
4244#seq $t0,$t1,$t2
4245##...subu $at,$t1,$t2
4249##...sltiu $t0,$at,1
4252#  subu $sp,$sp,4
4256#  sw $t0,($sp)
4260#  lw $t0,($sp)
4264#  addu $sp,$sp,4
4268#  beq $t0,$0,if_else_446
4272#  lw $t0,16($sp)
4276#  subu $sp,$sp,4
4280#  sw $t0,($sp)
4284#  lw $t0,0($sp)
4288#  sw $s2,0($sp)
4292#  move $s2, $t0
4296#  lw $t0, -12($s2)
4300#  lw $t0,12($t0)
4304#  jalr $t0
4308#  addu $sp,$sp,0
4312#  lw $s2,($sp)
4316#  addu $sp,$sp,4
4320#  subu $sp,$sp,4
4324#  sw $t0,($sp)
4328#  lw $t0,($sp)
4332#  addu $sp,$sp,4
4336#  beq $t0,$0,if_else_411
4340#  lw $t0,20($sp)
4344#  subu $sp,$sp,4
4348#  sw $t0,($sp)
4352#  lw $t0,0($sp)
4356#  sw $s2,0($sp)
4360#  move $s2, $t0
4364#  lw $t0, -12($s2)
4368#  lw $t0,12($t0)
4372#  jalr $t0
4376#  addu $sp,$sp,0
4380#  lw $s2,($sp)
4384#  addu $sp,$sp,4
4388#  subu $sp,$sp,4
4392#  sw $t0,($sp)
4396#  lw $t0,($sp)
4400#  addu $sp,$sp,4
4404#  beq $t0,$0,if_else_344
4408#  lw $t0,8($sp)
4412#  subu $sp,$sp,4
4416#  sw $t0,($sp)
4420#  li $t0,0
4424#  subu $sp,$sp,8
4428#  sw $s5,4($sp)
4432#  sw $t0,($sp)
4436#  lw $t0,($sp)
4440#  addu $sp,$sp,4
4444#  lw $t1,($sp)
4448#  addu $sp,$sp,4
4452#  beq $t0,$0,nullPtrException
4456#lw $t3, -4($t0)
4460#bgeu $t1,$t3,arrayIndexOutOfBounds
4461##...sltu $at,$t1,$t3
4465##...beq $at,$zero,18516
4468#sll $t1,$t1,2
4472#addu $t1,$t1,$t0
4476#lw $t0,($t1)
4480#  subu $sp,$sp,4
4484#  sw $t0,($sp)
4488#  lw $t0,48($sp)
4492#  subu $sp,$sp,4
4496#  sw $t0,($sp)
# ArrayLookup Assignment: Assign at 208.18; stackHeight = 32
4500#  lw $t0,($sp)
4504#  addu $sp,$sp,4
4508#  lw $t1,($sp)
4512#  addu $sp,$sp,8
4516#  lw $t2,($sp)
4520#  addu $sp,$sp,4
4524#  beq $t2,$0,nullPtrException
4528#lw $t3, -4($t2)
4532#bgeu $t1,$t3,arrayIndexOutOfBounds
4533##...sltu $at,$t1,$t3
4537##...beq $at,$zero,18516
4540#sll $t1,$t1,2
4544#addu $t1,$t1,$t2
4548#  sw $t0, ($t1)
4552#  lw $t0,-4($sp)
4556#  subu $sp,$sp,4
4560#  sw $t0,($sp)
4564#  lw $t0,16($sp)
4568#  subu $sp,$sp,4
4572#  sw $t0,($sp)
4576#  lw $t0,($sp)
4580#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 209.14; stackHeight = 20
4584#  sw $t0,0($sp)
4588#j if_done_344
4592:if_else_344:
4592#  lw $t0,0($sp)
4596#  subu $sp,$sp,4
4600#  sw $t0,($sp)
4604#  lw $t0,24($sp)
4608#  subu $sp,$sp,4
4612#  sw $t0,($sp)
4616#  lw $t0,($sp)
4620#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 213.14; stackHeight = 24
4624#  sw $t0,4($sp)
4628#  lw $t0,4($sp)
4632#  subu $sp,$sp,4
4636#  sw $t0,($sp)
4640#  lw $t0,0($sp)
4644#  sw $s2,0($sp)
4648#  move $s2, $t0
4652#  lw $t0, -12($s2)
4656#  lw $t0,20($t0)
4660#  jalr $t0
4664#  addu $sp,$sp,0
4668#  lw $s2,($sp)
4672#  addu $sp,$sp,4
4676#  subu $sp,$sp,4
4680#  sw $t0,($sp)
4684#  addu $sp,$sp,4
4688:if_done_344:
4688#j if_done_411
4692:if_else_411:
4692#  lw $t0,24($sp)
4696#  subu $sp,$sp,4
4700#  sw $t0,($sp)
4704#  lw $t0,0($sp)
4708#  sw $s2,0($sp)
4712#  move $s2, $t0
4716#  lw $t0, -12($s2)
4720#  lw $t0,12($t0)
4724#  jalr $t0
4728#  addu $sp,$sp,0
4732#  lw $s2,($sp)
4736#  addu $sp,$sp,4
4740#  subu $sp,$sp,4
4744#  sw $t0,($sp)
4748#  lw $t0,($sp)
4752#  addu $sp,$sp,4
4756#  beq $t0,$0,if_else_410
4760#  lw $t0,4($sp)
4764#  subu $sp,$sp,4
4768#  sw $t0,($sp)
4772#  lw $t0,24($sp)
4776#  subu $sp,$sp,4
4780#  sw $t0,($sp)
4784#  lw $t0,($sp)
4788#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 219.10; stackHeight = 28
4792#  sw $t0,8($sp)
4796#  lw $t0,8($sp)
4800#  subu $sp,$sp,4
4804#  sw $t0,($sp)
4808#  lw $t0,0($sp)
4812#  sw $s2,0($sp)
4816#  move $s2, $t0
4820#  lw $t0, -12($s2)
4824#  lw $t0,20($t0)
4828#  jalr $t0
4832#  addu $sp,$sp,0
4836#  lw $s2,($sp)
4840#  addu $sp,$sp,4
4844#  subu $sp,$sp,4
4848#  sw $t0,($sp)
4852#  addu $sp,$sp,4
4856#j if_done_410
4860:if_else_410:
4860#  lw $t0,24($sp)
4864#  subu $sp,$sp,4
4868#  sw $t0,($sp)
4872#  lw $t0,0($sp)
4876#  sw $s2,0($sp)
4880#  move $s2, $t0
4884#  lw $t0, -12($s2)
4888#  lw $t0,36($t0)
4892#  jalr $t0
4896#  addu $sp,$sp,0
4900#  lw $s2,($sp)
4904#  addu $sp,$sp,4
4908#  subu $sp,$sp,4
4912#  sw $t0,($sp)
4916#  lw $0,($sp)
4920:while_cond_380:
4920#  li $t0,1
4924#  subu $sp,$sp,4
4928#  sw $t0,($sp)
4932#  lw $t0,($sp)
4936#  addu $sp,$sp,4
4940#  beq $t0, $0,break_target_380
4944#  lw $t0,0($sp)
4948#  subu $sp,$sp,4
4952#  sw $t0,($sp)
4956#  lw $t0,($sp)
4960#  addu $sp,$sp,4
4964#  beq $t0,$0,nullPtrException
4968#lw $t0,0($s2)
4972#  subu $sp,$sp,4
4976#  sw $t0,($sp)
4980#  lw $t0,0($sp)
4984#  sw $s2,0($sp)
4988#  move $s2, $t0
4992#  lw $t0, -12($s2)
4996#  lw $t0,36($t0)
5000#  jalr $t0
5004#  addu $sp,$sp,0
5008#  lw $s2,($sp)
5012#  addu $sp,$sp,4
5016#  subu $sp,$sp,4
5020#  sw $t0,($sp)
5024#  lw $0,($sp)
5028#  lw $t0,0($sp)
5032#  subu $sp,$sp,4
5036#  sw $t0,($sp)
5040#  subu $sp,$sp,4
5044#  sw $0,($sp)
5048#  lw $t2,($sp)
5052#  addu $sp,$sp,4
5056#  lw $t1,($sp)
5060#  addu $sp,$sp,4
5064#seq $t0,$t1,$t2
5065##...subu $at,$t1,$t2
5069##...sltiu $t0,$at,1
5072#  subu $sp,$sp,4
5076#  sw $t0,($sp)
5080#  lw $t0,($sp)
5084#  addu $sp,$sp,4
5088#  beq $t0,$0,if_else_371
5092#  addu $sp,$sp,4
5096#j break_target_380
5100#j if_done_371
5104:if_else_371:
5104:if_done_371:
5104#  lw $t0,0($sp)
5108#  subu $sp,$sp,4
5112#  sw $t0,($sp)
5116#  lw $t0,0($sp)
5120#  subu $sp,$sp,4
5124#  sw $t0,($sp)
5128#  lw $t0,($sp)
5132#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 227.12; stackHeight = 36
5136#  sw $t0,4($sp)
5140#  j while_cond_380
5144:break_target_380:
5144#  lw $t0,4($sp)
5148#  subu $sp,$sp,4
5152#  sw $t0,($sp)
5156#  lw $t0,($sp)
5160#  addu $sp,$sp,8
5164#  beq $t0,$0,nullPtrException
5168#lw $t0,-16($s2)
5172#  subu $sp,$sp,8
5176#  sw $s5,4($sp)
5180#  sw $t0,($sp)
5184#  lw $0,($sp)
5188#  lw $t0,8($sp)
5192#  subu $sp,$sp,4
5196#  sw $t0,($sp)
5200#  lw $t0,($sp)
5204#  addu $sp,$sp,8
5208#  beq $t0,$0,nullPtrException
5212#lw $t0,-16($s2)
5216#  subu $sp,$sp,8
5220#  sw $s5,4($sp)
5224#  sw $t0,($sp)
5228#  subu $sp,$sp,4
5232#  sw $s2,($sp)
5236#  lw $t0,($sp)
5240#  addu $sp,$sp,8
5244#  beq $t0,$0,nullPtrException
5248#lw $t0,-16($s2)
5252#  subu $sp,$sp,8
5256#  sw $s5,4($sp)
5260#  sw $t0,($sp)
# InstVar Assignment: Assign at 232.13; stackHeight = 48
5264#  lw $t0,($sp)
5268#  addu $sp,$sp,8
5272#  lw $t1,($sp)
5276#  addu $sp,$sp,4
5280#  beq $t1,$0,nullPtrException
5284#  sw $t0,-16($s2)
5288#  subu $sp,$sp,4
5292#  sw $s2,($sp)
5296#  lw $t0,($sp)
5300#  addu $sp,$sp,8
5304#  beq $t0,$0,nullPtrException
5308#lw $t0,-16($s2)
5312#  subu $sp,$sp,8
5316#  sw $s5,4($sp)
5320#  sw $t0,($sp)
5324#  lw $t0,0($sp)
5328#  subu $sp,$sp,8
5332#  sw $s5,4($sp)
5336#  sw $t0,($sp)
# InstVar Assignment: Assign at 233.13; stackHeight = 48
5340#  lw $t0,($sp)
5344#  addu $sp,$sp,8
5348#  lw $t1,($sp)
5352#  addu $sp,$sp,4
5356#  beq $t1,$0,nullPtrException
5360#  sw $t0,-16($s2)
5364#  lw $t0,12($sp)
5368#  subu $sp,$sp,4
5372#  sw $t0,($sp)
5376#  lw $t0,($sp)
5380#  addu $sp,$sp,4
5384#  beq $t0,$0,nullPtrException
5388#lw $t0,4($s2)
5392#  subu $sp,$sp,4
5396#  sw $t0,($sp)
5400#  lw $t0,36($sp)
5404#  subu $sp,$sp,4
5408#  sw $t0,($sp)
5412#  lw $t0,36($sp)
5416#  subu $sp,$sp,8
5420#  sw $s5,4($sp)
5424#  sw $t0,($sp)
5428#  lw $t0,40($sp)
5432#  subu $sp,$sp,4
5436#  sw $t0,($sp)
5440#  lw $t0,12($sp)
5444#  sw $s2,12($sp)
5448#  move $s2, $t0
5452#  lw $t0, -12($s2)
5456#  lw $t0,56($t0)
5460#  jalr $t0
5464#  addu $sp,$sp,12
5468#  lw $s2,($sp)
5472#  addu $sp,$sp,4
5476#  subu $sp,$sp,4
5480#  sw $t0,($sp)
# InstVar Assignment: Assign at 236.17; stackHeight = 44
5484#  lw $t0,($sp)
5488#  addu $sp,$sp,4
5492#  lw $t1,($sp)
5496#  addu $sp,$sp,4
5500#  beq $t1,$0,nullPtrException
5504#  sw $t0,4($s2)
5508#  lw $t0,16($sp)
5512#  subu $sp,$sp,4
5516#  sw $t0,($sp)
5520#  lw $t0,16($sp)
5524#  subu $sp,$sp,4
5528#  sw $t0,($sp)
5532#  li $t0,1
5536#  subu $sp,$sp,4
5540#  sw $t0,($sp)
5544#  lw $t0,36($sp)
5548#  subu $sp,$sp,4
5552#  sw $t0,($sp)
5556#  lw $t0,8($sp)
5560#  sw $s2,8($sp)
5564#  move $s2, $t0
5568#  lw $t0, -12($s2)
5572#  lw $t0,68($t0)
5576#  jalr $t0
5580#  addu $sp,$sp,8
5584#  lw $s2,($sp)
5588#  addu $sp,$sp,4
5592#  subu $sp,$sp,4
5596#  sw $t0,($sp)
5600#  lw $t0,($sp)
5604#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 239.10; stackHeight = 40
5608#  sw $t0,20($sp)
5612:if_done_410:
5612:if_done_411:
5612#j if_done_446
5616:if_else_446:
5616#  lw $t0,32($sp)
5620#  subu $sp,$sp,8
5624#  sw $s5,4($sp)
5628#  sw $t0,($sp)
5632#  subu $sp,$sp,4
5636#  sw $s2,($sp)
5640#  lw $t0,($sp)
5644#  addu $sp,$sp,8
5648#  beq $t0,$0,nullPtrException
5652#lw $t0,-16($s2)
5656#  subu $sp,$sp,8
5660#  sw $s5,4($sp)
5664#  sw $t0,($sp)
5668#  lw $t2,($sp)
5672#  addu $sp,$sp,8
5676#  lw $t1,($sp)
5680#  addu $sp,$sp,8
5684#slt $t0,$t1,$t2
5688#  subu $sp,$sp,4
5692#  sw $t0,($sp)
5696#  lw $t0,($sp)
5700#  addu $sp,$sp,4
5704#  beq $t0,$0,if_else_445
5708#  lw $t0,12($sp)
5712#  subu $sp,$sp,4
5716#  sw $t0,($sp)
5720#  lw $t0,($sp)
5724#  addu $sp,$sp,4
5728#  beq $t0,$0,nullPtrException
5732#lw $t0,0($s2)
5736#  subu $sp,$sp,4
5740#  sw $t0,($sp)
5744#  lw $t0,40($sp)
5748#  subu $sp,$sp,4
5752#  sw $t0,($sp)
5756#  lw $t0,36($sp)
5760#  subu $sp,$sp,8
5764#  sw $s5,4($sp)
5768#  sw $t0,($sp)
5772#  lw $t0,40($sp)
5776#  subu $sp,$sp,4
5780#  sw $t0,($sp)
5784#  lw $t0,12($sp)
5788#  sw $s2,12($sp)
5792#  move $s2, $t0
5796#  lw $t0, -12($s2)
5800#  lw $t0,56($t0)
5804#  jalr $t0
5808#  addu $sp,$sp,12
5812#  lw $s2,($sp)
5816#  addu $sp,$sp,4
5820#  subu $sp,$sp,4
5824#  sw $t0,($sp)
# InstVar Assignment: Assign at 244.19; stackHeight = 44
5828#  lw $t0,($sp)
5832#  addu $sp,$sp,4
5836#  lw $t1,($sp)
5840#  addu $sp,$sp,4
5844#  beq $t1,$0,nullPtrException
5848#  sw $t0,0($s2)
5852#  lw $t0,16($sp)
5856#  subu $sp,$sp,4
5860#  sw $t0,($sp)
5864#  lw $t0,16($sp)
5868#  subu $sp,$sp,4
5872#  sw $t0,($sp)
5876#  subu $sp,$sp,4
5880#  sw $0,($sp)
5884#  lw $t0,36($sp)
5888#  subu $sp,$sp,4
5892#  sw $t0,($sp)
5896#  lw $t0,8($sp)
5900#  sw $s2,8($sp)
5904#  move $s2, $t0
5908#  lw $t0, -12($s2)
5912#  lw $t0,68($t0)
5916#  jalr $t0
5920#  addu $sp,$sp,8
5924#  lw $s2,($sp)
5928#  addu $sp,$sp,4
5932#  subu $sp,$sp,4
5936#  sw $t0,($sp)
5940#  lw $t0,($sp)
5944#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 245.13; stackHeight = 40
5948#  sw $t0,20($sp)
5952#j if_done_445
5956:if_else_445:
5956#  lw $t0,16($sp)
5960#  subu $sp,$sp,4
5964#  sw $t0,($sp)
5968#  lw $t0,($sp)
5972#  addu $sp,$sp,4
5976#  beq $t0,$0,nullPtrException
5980#lw $t0,4($s2)
5984#  subu $sp,$sp,4
5988#  sw $t0,($sp)
5992#  lw $t0,40($sp)
5996#  subu $sp,$sp,4
6000#  sw $t0,($sp)
6004#  lw $t0,40($sp)
6008#  subu $sp,$sp,8
6012#  sw $s5,4($sp)
6016#  sw $t0,($sp)
6020#  lw $t0,44($sp)
6024#  subu $sp,$sp,4
6028#  sw $t0,($sp)
6032#  lw $t0,12($sp)
6036#  sw $s2,12($sp)
6040#  move $s2, $t0
6044#  lw $t0, -12($s2)
6048#  lw $t0,56($t0)
6052#  jalr $t0
6056#  addu $sp,$sp,12
6060#  lw $s2,($sp)
6064#  addu $sp,$sp,4
6068#  subu $sp,$sp,4
6072#  sw $t0,($sp)
# InstVar Assignment: Assign at 249.20; stackHeight = 48
6076#  lw $t0,($sp)
6080#  addu $sp,$sp,4
6084#  lw $t1,($sp)
6088#  addu $sp,$sp,4
6092#  beq $t1,$0,nullPtrException
6096#  sw $t0,4($s2)
6100#  lw $t0,20($sp)
6104#  subu $sp,$sp,4
6108#  sw $t0,($sp)
6112#  lw $t0,20($sp)
6116#  subu $sp,$sp,4
6120#  sw $t0,($sp)
6124#  li $t0,1
6128#  subu $sp,$sp,4
6132#  sw $t0,($sp)
6136#  lw $t0,40($sp)
6140#  subu $sp,$sp,4
6144#  sw $t0,($sp)
6148#  lw $t0,8($sp)
6152#  sw $s2,8($sp)
6156#  move $s2, $t0
6160#  lw $t0, -12($s2)
6164#  lw $t0,68($t0)
6168#  jalr $t0
6172#  addu $sp,$sp,8
6176#  lw $s2,($sp)
6180#  addu $sp,$sp,4
6184#  subu $sp,$sp,4
6188#  sw $t0,($sp)
6192#  lw $t0,($sp)
6196#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 250.13; stackHeight = 44
6200#  sw $t0,24($sp)
6204:if_done_445:
6204:if_done_446:
6204#  addu $sp,$sp,28
6208#  lw $t0,-4($sp)
6212#  subu $sp,$sp,4
6216#  sw $t0,($sp)
6220#  lw $t0,($sp)
6224#  addu $sp,$sp,4
6228#  addu $sp,$sp,0
6232#  lw $ra,($sp)
6236#  addu $sp,$sp,4
6240#  jr $ra
.globl fcn_adjustAfterDelete_NonNullRedBlackTree
6244:fcn_adjustAfterDelete_NonNullRedBlackTree:
6244#  subu $sp,$sp,4
6248#  sw $ra,($sp)
6252#  subu $sp,$sp,4
6256#  sw $s2,($sp)
6260#  lw $0,($sp)
6264#  lw $t0,8($sp)
6268#  subu $sp,$sp,4
6272#  sw $t0,($sp)
6276#  li $t0,0
6280#  subu $sp,$sp,8
6284#  sw $s5,4($sp)
6288#  sw $t0,($sp)
6292#  lw $t0,($sp)
6296#  addu $sp,$sp,4
6300#  lw $t1,($sp)
6304#  addu $sp,$sp,4
6308#  beq $t0,$0,nullPtrException
6312#lw $t3, -4($t0)
6316#bgeu $t1,$t3,arrayIndexOutOfBounds
6317##...sltu $at,$t1,$t3
6321##...beq $at,$zero,18516
6324#sll $t1,$t1,2
6328#addu $t1,$t1,$t0
6332#lw $t0,($t1)
6336#  subu $sp,$sp,4
6340#  sw $t0,($sp)
6344#  lw $t0,($sp)
6348#  addu $sp,$sp,4
6352#  beq $t0,$0,if_else_716
6356#  lw $t0,12($sp)
6360#  subu $sp,$sp,4
6364#  sw $t0,($sp)
6368#  li $t0,0
6372#  subu $sp,$sp,8
6376#  sw $s5,4($sp)
6380#  sw $t0,($sp)
6384#  lw $t0,($sp)
6388#  addu $sp,$sp,4
6392#  lw $t1,($sp)
6396#  addu $sp,$sp,4
6400#  beq $t0,$0,nullPtrException
6404#lw $t3, -4($t0)
6408#bgeu $t1,$t3,arrayIndexOutOfBounds
6409##...sltu $at,$t1,$t3
6413##...beq $at,$zero,18516
6416#sll $t1,$t1,2
6420#addu $t1,$t1,$t0
6424#lw $t0,($t1)
6428#  subu $sp,$sp,4
6432#  sw $t0,($sp)
6436#  subu $sp,$sp,4
6440#  sw $0,($sp)
# ArrayLookup Assignment: Assign at 274.17; stackHeight = 32
6444#  lw $t0,($sp)
6448#  addu $sp,$sp,4
6452#  lw $t1,($sp)
6456#  addu $sp,$sp,8
6460#  lw $t2,($sp)
6464#  addu $sp,$sp,4
6468#  beq $t2,$0,nullPtrException
6472#lw $t3, -4($t2)
6476#bgeu $t1,$t3,arrayIndexOutOfBounds
6477##...sltu $at,$t1,$t3
6481##...beq $at,$zero,18516
6484#sll $t1,$t1,2
6488#addu $t1,$t1,$t2
6492#  sw $t0, ($t1)
6496#  subu $sp,$sp,4
6500#  sw $s2,($sp)
6504#  lw $0,($sp)
6508#  lw $t0,0($sp)
6512#  subu $sp,$sp,4
6516#  sw $t0,($sp)
6520#  lw $t0,20($sp)
6524#  subu $sp,$sp,4
6528#  sw $t0,($sp)
6532#  lw $t0,4($sp)
6536#  sw $s2,4($sp)
6540#  move $s2, $t0
6544#  lw $t0, -12($s2)
6548#  lw $t0,72($t0)
6552#  jalr $t0
6556#  addu $sp,$sp,4
6560#  lw $s2,($sp)
6564#  addu $sp,$sp,4
6568#  subu $sp,$sp,4
6572#  sw $t0,($sp)
6576#  lw $t0,0($sp)
6580#  sw $s2,0($sp)
6584#  move $s2, $t0
6588#  lw $t0, -12($s2)
6592#  lw $t0,36($t0)
6596#  jalr $t0
6600#  addu $sp,$sp,0
6604#  lw $s2,($sp)
6608#  addu $sp,$sp,4
6612#  subu $sp,$sp,4
6616#  sw $t0,($sp)
6620#  lw $0,($sp)
6624#  lw $t0,0($sp)
6628#  subu $sp,$sp,4
6632#  sw $t0,($sp)
6636#  lw $t0,24($sp)
6640#  subu $sp,$sp,4
6644#  sw $t0,($sp)
6648#  lw $t0,4($sp)
6652#  sw $s2,4($sp)
6656#  move $s2, $t0
6660#  lw $t0, -12($s2)
6664#  lw $t0,76($t0)
6668#  jalr $t0
6672#  addu $sp,$sp,4
6676#  lw $s2,($sp)
6680#  addu $sp,$sp,4
6684#  subu $sp,$sp,4
6688#  sw $t0,($sp)
6692#  lw $0,($sp)
6696#  lw $t0,4($sp)
6700#  subu $sp,$sp,4
6704#  sw $t0,($sp)
6708#  lw $t0,28($sp)
6712#  subu $sp,$sp,4
6716#  sw $t0,($sp)
6720#  lw $t0,4($sp)
6724#  sw $s2,4($sp)
6728#  move $s2, $t0
6732#  lw $t0, -12($s2)
6736#  lw $t0,72($t0)
6740#  jalr $t0
6744#  addu $sp,$sp,4
6748#  lw $s2,($sp)
6752#  addu $sp,$sp,4
6756#  subu $sp,$sp,4
6760#  sw $t0,($sp)
6764#  lw $0,($sp)
6768#  lw $t0,12($sp)
6772#  subu $sp,$sp,4
6776#  sw $t0,($sp)
6780#  lw $t0,0($sp)
6784#  sw $s2,0($sp)
6788#  move $s2, $t0
6792#  lw $t0, -12($s2)
6796#  lw $t0,24($t0)
6800#  jalr $t0
6804#  addu $sp,$sp,0
6808#  lw $s2,($sp)
6812#  addu $sp,$sp,4
6816#  subu $sp,$sp,4
6820#  sw $t0,($sp)
6824#  lw $t0,($sp)
6828#  addu $sp,$sp,4
6832#  beq $t0,$0,if_else_713
6836#  lw $t0,4($sp)
6840#  subu $sp,$sp,4
6844#  sw $t0,($sp)
6848#  lw $t0,0($sp)
6852#  sw $s2,0($sp)
6856#  move $s2, $t0
6860#  lw $t0, -12($s2)
6864#  lw $t0,16($t0)
6868#  jalr $t0
6872#  addu $sp,$sp,0
6876#  lw $s2,($sp)
6880#  addu $sp,$sp,4
6884#  subu $sp,$sp,4
6888#  sw $t0,($sp)
6892#  lw $t0,($sp)
6896#  addu $sp,$sp,4
6900#  beq $t0,$0,if_else_573
6904#  lw $t0,12($sp)
6908#  subu $sp,$sp,4
6912#  sw $t0,($sp)
6916#  lw $t0,8($sp)
6920#  subu $sp,$sp,4
6924#  sw $t0,($sp)
6928#  lw $t0,36($sp)
6932#  subu $sp,$sp,4
6936#  sw $t0,($sp)
6940#  lw $t0,8($sp)
6944#  sw $s2,8($sp)
6948#  move $s2, $t0
6952#  lw $t0, -12($s2)
6956#  lw $t0,80($t0)
6960#  jalr $t0
6964#  addu $sp,$sp,8
6968#  lw $s2,($sp)
6972#  addu $sp,$sp,4
6976#  subu $sp,$sp,4
6980#  sw $t0,($sp)
6984#  addu $sp,$sp,4
6988#  lw $t0,8($sp)
6992#  subu $sp,$sp,4
6996#  sw $t0,($sp)
7000#  lw $t0,16($sp)
7004#  subu $sp,$sp,4
7008#  sw $t0,($sp)
7012#  lw $t0,36($sp)
7016#  subu $sp,$sp,4
7020#  sw $t0,($sp)
7024#  lw $t0,8($sp)
7028#  sw $s2,8($sp)
7032#  move $s2, $t0
7036#  lw $t0, -12($s2)
7040#  lw $t0,84($t0)
7044#  jalr $t0
7048#  addu $sp,$sp,8
7052#  lw $s2,($sp)
7056#  addu $sp,$sp,4
7060#  subu $sp,$sp,4
7064#  sw $t0,($sp)
7068#  addu $sp,$sp,4
7072#  lw $t0,16($sp)
7076#  subu $sp,$sp,4
7080#  sw $t0,($sp)
7084#  lw $t0,12($sp)
7088#  subu $sp,$sp,4
7092#  sw $t0,($sp)
7096#  lw $t0,($sp)
7100#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 289.14; stackHeight = 36
7104#  sw $t0,20($sp)
7108#j if_done_573
7112:if_else_573:
7112#  lw $t0,4($sp)
7116#  subu $sp,$sp,4
7120#  sw $t0,($sp)
7124#  lw $t0,0($sp)
7128#  sw $s2,0($sp)
7132#  move $s2, $t0
7136#  lw $t0, -12($s2)
7140#  lw $t0,24($t0)
7144#  jalr $t0
7148#  addu $sp,$sp,0
7152#  lw $s2,($sp)
7156#  addu $sp,$sp,4
7160#  subu $sp,$sp,4
7164#  sw $t0,($sp)
7168#  lw $t0,($sp)
7172#  addu $sp,$sp,4
7176#  beq $t0,$0,if_else_572
7180#  lw $t0,16($sp)
7184#  subu $sp,$sp,4
7188#  sw $t0,($sp)
7192#  lw $t0,12($sp)
7196#  subu $sp,$sp,4
7200#  sw $t0,($sp)
7204#  lw $t0,40($sp)
7208#  subu $sp,$sp,4
7212#  sw $t0,($sp)
7216#  lw $t0,8($sp)
7220#  sw $s2,8($sp)
7224#  move $s2, $t0
7228#  lw $t0, -12($s2)
7232#  lw $t0,80($t0)
7236#  jalr $t0
7240#  addu $sp,$sp,8
7244#  lw $s2,($sp)
7248#  addu $sp,$sp,4
7252#  subu $sp,$sp,4
7256#  sw $t0,($sp)
7260#  addu $sp,$sp,4
7264#  lw $t0,12($sp)
7268#  subu $sp,$sp,4
7272#  sw $t0,($sp)
7276#  lw $t0,20($sp)
7280#  subu $sp,$sp,4
7284#  sw $t0,($sp)
7288#  lw $t0,40($sp)
7292#  subu $sp,$sp,4
7296#  sw $t0,($sp)
7300#  lw $t0,8($sp)
7304#  sw $s2,8($sp)
7308#  move $s2, $t0
7312#  lw $t0, -12($s2)
7316#  lw $t0,84($t0)
7320#  jalr $t0
7324#  addu $sp,$sp,8
7328#  lw $s2,($sp)
7332#  addu $sp,$sp,4
7336#  subu $sp,$sp,4
7340#  sw $t0,($sp)
7344#  addu $sp,$sp,4
7348#  lw $t0,16($sp)
7352#  subu $sp,$sp,4
7356#  sw $t0,($sp)
7360#  lw $t0,0($sp)
7364#  sw $s2,0($sp)
7368#  move $s2, $t0
7372#  lw $t0, -12($s2)
7376#  lw $t0,20($t0)
7380#  jalr $t0
7384#  addu $sp,$sp,0
7388#  lw $s2,($sp)
7392#  addu $sp,$sp,4
7396#  subu $sp,$sp,4
7400#  sw $t0,($sp)
7404#  addu $sp,$sp,4
7408#  lw $t0,12($sp)
7412#  subu $sp,$sp,4
7416#  sw $t0,($sp)
7420#  lw $t0,0($sp)
7424#  sw $s2,0($sp)
7428#  move $s2, $t0
7432#  lw $t0, -12($s2)
7436#  lw $t0,60($t0)
7440#  jalr $t0
7444#  addu $sp,$sp,0
7448#  lw $s2,($sp)
7452#  addu $sp,$sp,4
7456#  subu $sp,$sp,4
7460#  sw $t0,($sp)
7464#  addu $sp,$sp,4
7468#  lw $t0,4($sp)
7472#  subu $sp,$sp,4
7476#  sw $t0,($sp)
7480#  lw $t0,0($sp)
7484#  sw $s2,0($sp)
7488#  move $s2, $t0
7492#  lw $t0, -12($s2)
7496#  lw $t0,20($t0)
7500#  jalr $t0
7504#  addu $sp,$sp,0
7508#  lw $s2,($sp)
7512#  addu $sp,$sp,4
7516#  subu $sp,$sp,4
7520#  sw $t0,($sp)
7524#  addu $sp,$sp,4
7528#  lw $t0,20($sp)
7532#  subu $sp,$sp,4
7536#  sw $t0,($sp)
7540#  lw $t0,16($sp)
7544#  subu $sp,$sp,4
7548#  sw $t0,($sp)
7552#  lw $t0,($sp)
7556#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 298.14; stackHeight = 40
7560#  sw $t0,24($sp)
7564#j if_done_572
7568:if_else_572:
7568#  lw $t0,12($sp)
7572#  subu $sp,$sp,4
7576#  sw $t0,($sp)
7580#  lw $t0,0($sp)
7584#  sw $s2,0($sp)
7588#  move $s2, $t0
7592#  lw $t0, -12($s2)
7596#  lw $t0,36($t0)
7600#  jalr $t0
7604#  addu $sp,$sp,0
7608#  lw $s2,($sp)
7612#  addu $sp,$sp,4
7616#  subu $sp,$sp,4
7620#  sw $t0,($sp)
7624#  lw $0,($sp)
7628#  lw $t0,24($sp)
7632#  subu $sp,$sp,4
7636#  sw $t0,($sp)
7640#  lw $t0,4($sp)
7644#  subu $sp,$sp,4
7648#  sw $t0,($sp)
7652#  lw $t0,48($sp)
7656#  subu $sp,$sp,4
7660#  sw $t0,($sp)
7664#  lw $t0,4($sp)
7668#  sw $s2,4($sp)
7672#  move $s2, $t0
7676#  lw $t0, -12($s2)
7680#  lw $t0,76($t0)
7684#  jalr $t0
7688#  addu $sp,$sp,4
7692#  lw $s2,($sp)
7696#  addu $sp,$sp,4
7700#  subu $sp,$sp,4
7704#  sw $t0,($sp)
7708#  lw $t0,48($sp)
7712#  subu $sp,$sp,4
7716#  sw $t0,($sp)
7720#  lw $t0,8($sp)
7724#  sw $s2,8($sp)
7728#  move $s2, $t0
7732#  lw $t0, -12($s2)
7736#  lw $t0,80($t0)
7740#  jalr $t0
7744#  addu $sp,$sp,8
7748#  lw $s2,($sp)
7752#  addu $sp,$sp,4
7756#  subu $sp,$sp,4
7760#  sw $t0,($sp)
7764#  addu $sp,$sp,4
7768#  lw $t0,20($sp)
7772#  subu $sp,$sp,4
7776#  sw $t0,($sp)
7780#  lw $t0,4($sp)
7784#  subu $sp,$sp,4
7788#  sw $t0,($sp)
7792#  lw $t0,48($sp)
7796#  subu $sp,$sp,4
7800#  sw $t0,($sp)
7804#  lw $t0,4($sp)
7808#  sw $s2,4($sp)
7812#  move $s2, $t0
7816#  lw $t0, -12($s2)
7820#  lw $t0,72($t0)
7824#  jalr $t0
7828#  addu $sp,$sp,4
7832#  lw $s2,($sp)
7836#  addu $sp,$sp,4
7840#  subu $sp,$sp,4
7844#  sw $t0,($sp)
7848#  lw $t0,48($sp)
7852#  subu $sp,$sp,4
7856#  sw $t0,($sp)
7860#  lw $t0,8($sp)
7864#  sw $s2,8($sp)
7868#  move $s2, $t0
7872#  lw $t0, -12($s2)
7876#  lw $t0,84($t0)
7880#  jalr $t0
7884#  addu $sp,$sp,8
7888#  lw $s2,($sp)
7892#  addu $sp,$sp,4
7896#  subu $sp,$sp,4
7900#  sw $t0,($sp)
7904#  addu $sp,$sp,4
7908#  lw $t0,0($sp)
7912#  subu $sp,$sp,4
7916#  sw $t0,($sp)
7920#  lw $t0,28($sp)
7924#  subu $sp,$sp,4
7928#  sw $t0,($sp)
7932#  lw $t0,48($sp)
7936#  subu $sp,$sp,4
7940#  sw $t0,($sp)
7944#  lw $t0,8($sp)
7948#  sw $s2,8($sp)
7952#  move $s2, $t0
7956#  lw $t0, -12($s2)
7960#  lw $t0,84($t0)
7964#  jalr $t0
7968#  addu $sp,$sp,8
7972#  lw $s2,($sp)
7976#  addu $sp,$sp,4
7980#  subu $sp,$sp,4
7984#  sw $t0,($sp)
7988#  addu $sp,$sp,4
7992#  lw $t0,0($sp)
7996#  subu $sp,$sp,4
8000#  sw $t0,($sp)
8004#  lw $t0,24($sp)
8008#  subu $sp,$sp,4
8012#  sw $t0,($sp)
8016#  lw $t0,48($sp)
8020#  subu $sp,$sp,4
8024#  sw $t0,($sp)
8028#  lw $t0,8($sp)
8032#  sw $s2,8($sp)
8036#  move $s2, $t0
8040#  lw $t0, -12($s2)
8044#  lw $t0,80($t0)
8048#  jalr $t0
8052#  addu $sp,$sp,8
8056#  lw $s2,($sp)
8060#  addu $sp,$sp,4
8064#  subu $sp,$sp,4
8068#  sw $t0,($sp)
8072#  addu $sp,$sp,4
8076#  lw $t0,20($sp)
8080#  subu $sp,$sp,4
8084#  sw $t0,($sp)
8088#  lw $t0,0($sp)
8092#  sw $s2,0($sp)
8096#  move $s2, $t0
8100#  lw $t0, -12($s2)
8104#  lw $t0,60($t0)
8108#  jalr $t0
8112#  addu $sp,$sp,0
8116#  lw $s2,($sp)
8120#  addu $sp,$sp,4
8124#  subu $sp,$sp,4
8128#  sw $t0,($sp)
8132#  addu $sp,$sp,4
8136#  lw $t0,16($sp)
8140#  subu $sp,$sp,4
8144#  sw $t0,($sp)
8148#  lw $t0,0($sp)
8152#  sw $s2,0($sp)
8156#  move $s2, $t0
8160#  lw $t0, -12($s2)
8164#  lw $t0,20($t0)
8168#  jalr $t0
8172#  addu $sp,$sp,0
8176#  lw $s2,($sp)
8180#  addu $sp,$sp,4
8184#  subu $sp,$sp,4
8188#  sw $t0,($sp)
8192#  addu $sp,$sp,4
8196#  lw $t0,28($sp)
8200#  subu $sp,$sp,4
8204#  sw $t0,($sp)
8208#  lw $t0,24($sp)
8212#  subu $sp,$sp,4
8216#  sw $t0,($sp)
8220#  lw $t0,($sp)
8224#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 311.14; stackHeight = 48
8228#  sw $t0,32($sp)
8232:if_done_572:
8232:if_done_573:
8232#j if_done_713
8236:if_else_713:
8236#  lw $t0,24($sp)
8240#  subu $sp,$sp,4
8244#  sw $t0,($sp)
8248#  lw $t0,0($sp)
8252#  sw $s2,0($sp)
8256#  move $s2, $t0
8260#  lw $t0, -12($s2)
8264#  lw $t0,24($t0)
8268#  jalr $t0
8272#  addu $sp,$sp,0
8276#  lw $s2,($sp)
8280#  addu $sp,$sp,4
8284#  subu $sp,$sp,4
8288#  sw $t0,($sp)
8292#  lw $t0,($sp)
8296#  addu $sp,$sp,4
8300#  beq $t0,$0,if_else_712
8304#  lw $t0,20($sp)
8308#  subu $sp,$sp,4
8312#  sw $t0,($sp)
8316#  lw $t0,0($sp)
8320#  sw $s2,0($sp)
8324#  move $s2, $t0
8328#  lw $t0, -12($s2)
8332#  lw $t0,36($t0)
8336#  jalr $t0
8340#  addu $sp,$sp,0
8344#  lw $s2,($sp)
8348#  addu $sp,$sp,4
8352#  subu $sp,$sp,4
8356#  sw $t0,($sp)
8360#  lw $0,($sp)
8364#  lw $t0,0($sp)
8368#  subu $sp,$sp,4
8372#  sw $t0,($sp)
8376#  lw $t0,52($sp)
8380#  subu $sp,$sp,4
8384#  sw $t0,($sp)
8388#  lw $t0,4($sp)
8392#  sw $s2,4($sp)
8396#  move $s2, $t0
8400#  lw $t0, -12($s2)
8404#  lw $t0,76($t0)
8408#  jalr $t0
8412#  addu $sp,$sp,4
8416#  lw $s2,($sp)
8420#  addu $sp,$sp,4
8424#  subu $sp,$sp,4
8428#  sw $t0,($sp)
8432#  lw $0,($sp)
8436#  lw $t0,0($sp)
8440#  subu $sp,$sp,4
8444#  sw $t0,($sp)
8448#  lw $t0,0($sp)
8452#  sw $s2,0($sp)
8456#  move $s2, $t0
8460#  lw $t0, -12($s2)
8464#  lw $t0,24($t0)
8468#  jalr $t0
8472#  addu $sp,$sp,0
8476#  lw $s2,($sp)
8480#  addu $sp,$sp,4
8484#  subu $sp,$sp,4
8488#  sw $t0,($sp)
8492#  lw $t0,($sp)
8496#  addu $sp,$sp,4
8500#  beq $t0,$0,if_else_638
8504#  lw $t0,0($sp)
8508#  subu $sp,$sp,4
8512#  sw $t0,($sp)
8516#  lw $t0,0($sp)
8520#  sw $s2,0($sp)
8524#  move $s2, $t0
8528#  lw $t0, -12($s2)
8532#  lw $t0,36($t0)
8536#  jalr $t0
8540#  addu $sp,$sp,0
8544#  lw $s2,($sp)
8548#  addu $sp,$sp,4
8552#  subu $sp,$sp,4
8556#  sw $t0,($sp)
8560#  lw $0,($sp)
8564#  lw $t0,40($sp)
8568#  subu $sp,$sp,4
8572#  sw $t0,($sp)
8576#  lw $t0,4($sp)
8580#  subu $sp,$sp,4
8584#  sw $t0,($sp)
8588#  lw $t0,64($sp)
8592#  subu $sp,$sp,4
8596#  sw $t0,($sp)
8600#  lw $t0,4($sp)
8604#  sw $s2,4($sp)
8608#  move $s2, $t0
8612#  lw $t0, -12($s2)
8616#  lw $t0,76($t0)
8620#  jalr $t0
8624#  addu $sp,$sp,4
8628#  lw $s2,($sp)
8632#  addu $sp,$sp,4
8636#  subu $sp,$sp,4
8640#  sw $t0,($sp)
8644#  lw $t0,64($sp)
8648#  subu $sp,$sp,4
8652#  sw $t0,($sp)
8656#  lw $t0,8($sp)
8660#  sw $s2,8($sp)
8664#  move $s2, $t0
8668#  lw $t0, -12($s2)
8672#  lw $t0,80($t0)
8676#  jalr $t0
8680#  addu $sp,$sp,8
8684#  lw $s2,($sp)
8688#  addu $sp,$sp,4
8692#  subu $sp,$sp,4
8696#  sw $t0,($sp)
8700#  addu $sp,$sp,4
8704#  lw $t0,8($sp)
8708#  subu $sp,$sp,4
8712#  sw $t0,($sp)
8716#  lw $t0,4($sp)
8720#  subu $sp,$sp,4
8724#  sw $t0,($sp)
8728#  lw $t0,64($sp)
8732#  subu $sp,$sp,4
8736#  sw $t0,($sp)
8740#  lw $t0,4($sp)
8744#  sw $s2,4($sp)
8748#  move $s2, $t0
8752#  lw $t0, -12($s2)
8756#  lw $t0,72($t0)
8760#  jalr $t0
8764#  addu $sp,$sp,4
8768#  lw $s2,($sp)
8772#  addu $sp,$sp,4
8776#  subu $sp,$sp,4
8780#  sw $t0,($sp)
8784#  lw $t0,64($sp)
8788#  subu $sp,$sp,4
8792#  sw $t0,($sp)
8796#  lw $t0,8($sp)
8800#  sw $s2,8($sp)
8804#  move $s2, $t0
8808#  lw $t0, -12($s2)
8812#  lw $t0,84($t0)
8816#  jalr $t0
8820#  addu $sp,$sp,8
8824#  lw $s2,($sp)
8828#  addu $sp,$sp,4
8832#  subu $sp,$sp,4
8836#  sw $t0,($sp)
8840#  addu $sp,$sp,4
8844#  lw $t0,0($sp)
8848#  subu $sp,$sp,4
8852#  sw $t0,($sp)
8856#  lw $t0,0($sp)
8860#  sw $s2,0($sp)
8864#  move $s2, $t0
8868#  lw $t0, -12($s2)
8872#  lw $t0,20($t0)
8876#  jalr $t0
8880#  addu $sp,$sp,0
8884#  lw $s2,($sp)
8888#  addu $sp,$sp,4
8892#  subu $sp,$sp,4
8896#  sw $t0,($sp)
8900#  addu $sp,$sp,4
8904#  lw $t0,44($sp)
8908#  subu $sp,$sp,4
8912#  sw $t0,($sp)
8916#  lw $t0,4($sp)
8920#  subu $sp,$sp,4
8924#  sw $t0,($sp)
8928#  lw $t0,($sp)
8932#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 328.14; stackHeight = 64
8936#  sw $t0,48($sp)
8940#j if_done_638
8944:if_else_638:
8944#  lw $t0,44($sp)
8948#  subu $sp,$sp,4
8952#  sw $t0,($sp)
8956#  lw $t0,16($sp)
8960#  subu $sp,$sp,4
8964#  sw $t0,($sp)
8968#  lw $t0,68($sp)
8972#  subu $sp,$sp,4
8976#  sw $t0,($sp)
8980#  lw $t0,4($sp)
8984#  sw $s2,4($sp)
8988#  move $s2, $t0
8992#  lw $t0, -12($s2)
8996#  lw $t0,76($t0)
9000#  jalr $t0
9004#  addu $sp,$sp,4
9008#  lw $s2,($sp)
9012#  addu $sp,$sp,4
9016#  subu $sp,$sp,4
9020#  sw $t0,($sp)
9024#  lw $t0,68($sp)
9028#  subu $sp,$sp,4
9032#  sw $t0,($sp)
9036#  lw $t0,8($sp)
9040#  sw $s2,8($sp)
9044#  move $s2, $t0
9048#  lw $t0, -12($s2)
9052#  lw $t0,80($t0)
9056#  jalr $t0
9060#  addu $sp,$sp,8
9064#  lw $s2,($sp)
9068#  addu $sp,$sp,4
9072#  subu $sp,$sp,4
9076#  sw $t0,($sp)
9080#  addu $sp,$sp,4
9084#  lw $t0,12($sp)
9088#  subu $sp,$sp,4
9092#  sw $t0,($sp)
9096#  lw $t0,48($sp)
9100#  subu $sp,$sp,4
9104#  sw $t0,($sp)
9108#  lw $t0,68($sp)
9112#  subu $sp,$sp,4
9116#  sw $t0,($sp)
9120#  lw $t0,8($sp)
9124#  sw $s2,8($sp)
9128#  move $s2, $t0
9132#  lw $t0, -12($s2)
9136#  lw $t0,84($t0)
9140#  jalr $t0
9144#  addu $sp,$sp,8
9148#  lw $s2,($sp)
9152#  addu $sp,$sp,4
9156#  subu $sp,$sp,4
9160#  sw $t0,($sp)
9164#  addu $sp,$sp,4
9168#  lw $t0,44($sp)
9172#  subu $sp,$sp,4
9176#  sw $t0,($sp)
9180#  lw $t0,0($sp)
9184#  sw $s2,0($sp)
9188#  move $s2, $t0
9192#  lw $t0, -12($s2)
9196#  lw $t0,60($t0)
9200#  jalr $t0
9204#  addu $sp,$sp,0
9208#  lw $s2,($sp)
9212#  addu $sp,$sp,4
9216#  subu $sp,$sp,4
9220#  sw $t0,($sp)
9224#  addu $sp,$sp,4
9228#  lw $t0,40($sp)
9232#  subu $sp,$sp,4
9236#  sw $t0,($sp)
9240#  lw $t0,0($sp)
9244#  sw $s2,0($sp)
9248#  move $s2, $t0
9252#  lw $t0, -12($s2)
9256#  lw $t0,20($t0)
9260#  jalr $t0
9264#  addu $sp,$sp,0
9268#  lw $s2,($sp)
9272#  addu $sp,$sp,4
9276#  subu $sp,$sp,4
9280#  sw $t0,($sp)
9284#  addu $sp,$sp,4
9288#  lw $t0,48($sp)
9292#  subu $sp,$sp,4
9296#  sw $t0,($sp)
9300#  lw $t0,44($sp)
9304#  subu $sp,$sp,4
9308#  sw $t0,($sp)
9312#  lw $t0,($sp)
9316#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 337.14; stackHeight = 68
9320#  sw $t0,52($sp)
9324:if_done_638:
9324#j if_done_712
9328:if_else_712:
9328#  lw $t0,36($sp)
9332#  subu $sp,$sp,4
9336#  sw $t0,($sp)
9340#  lw $t0,0($sp)
9344#  sw $s2,0($sp)
9348#  move $s2, $t0
9352#  lw $t0, -12($s2)
9356#  lw $t0,24($t0)
9360#  jalr $t0
9364#  addu $sp,$sp,0
9368#  lw $s2,($sp)
9372#  addu $sp,$sp,4
9376#  subu $sp,$sp,4
9380#  sw $t0,($sp)
9384#  lw $t0,($sp)
9388#  addu $sp,$sp,4
9392#  beq $t0,$0,if_else_710
9396#  lw $t0,48($sp)
9400#  subu $sp,$sp,4
9404#  sw $t0,($sp)
9408#  lw $t0,48($sp)
9412#  subu $sp,$sp,4
9416#  sw $t0,($sp)
9420#  lw $t0,72($sp)
9424#  subu $sp,$sp,4
9428#  sw $t0,($sp)
9432#  lw $t0,4($sp)
9436#  sw $s2,4($sp)
9440#  move $s2, $t0
9444#  lw $t0, -12($s2)
9448#  lw $t0,76($t0)
9452#  jalr $t0
9456#  addu $sp,$sp,4
9460#  lw $s2,($sp)
9464#  addu $sp,$sp,4
9468#  subu $sp,$sp,4
9472#  sw $t0,($sp)
9476#  lw $t0,72($sp)
9480#  subu $sp,$sp,4
9484#  sw $t0,($sp)
9488#  lw $t0,8($sp)
9492#  sw $s2,8($sp)
9496#  move $s2, $t0
9500#  lw $t0, -12($s2)
9504#  lw $t0,80($t0)
9508#  jalr $t0
9512#  addu $sp,$sp,8
9516#  lw $s2,($sp)
9520#  addu $sp,$sp,4
9524#  subu $sp,$sp,4
9528#  sw $t0,($sp)
9532#  addu $sp,$sp,4
9536#  lw $t0,44($sp)
9540#  subu $sp,$sp,4
9544#  sw $t0,($sp)
9548#  lw $t0,52($sp)
9552#  subu $sp,$sp,4
9556#  sw $t0,($sp)
9560#  lw $t0,72($sp)
9564#  subu $sp,$sp,4
9568#  sw $t0,($sp)
9572#  lw $t0,8($sp)
9576#  sw $s2,8($sp)
9580#  move $s2, $t0
9584#  lw $t0, -12($s2)
9588#  lw $t0,84($t0)
9592#  jalr $t0
9596#  addu $sp,$sp,8
9600#  lw $s2,($sp)
9604#  addu $sp,$sp,4
9608#  subu $sp,$sp,4
9612#  sw $t0,($sp)
9616#  addu $sp,$sp,4
9620#  lw $t0,36($sp)
9624#  subu $sp,$sp,4
9628#  sw $t0,($sp)
9632#  lw $t0,0($sp)
9636#  sw $s2,0($sp)
9640#  move $s2, $t0
9644#  lw $t0, -12($s2)
9648#  lw $t0,36($t0)
9652#  jalr $t0
9656#  addu $sp,$sp,0
9660#  lw $s2,($sp)
9664#  addu $sp,$sp,4
9668#  subu $sp,$sp,4
9672#  sw $t0,($sp)
9676#  lw $t0,0($sp)
9680#  sw $s2,0($sp)
9684#  move $s2, $t0
9688#  lw $t0, -12($s2)
9692#  lw $t0,20($t0)
9696#  jalr $t0
9700#  addu $sp,$sp,0
9704#  lw $s2,($sp)
9708#  addu $sp,$sp,4
9712#  subu $sp,$sp,4
9716#  sw $t0,($sp)
9720#  addu $sp,$sp,4
9724#  lw $t0,52($sp)
9728#  subu $sp,$sp,4
9732#  sw $t0,($sp)
9736#  lw $t0,48($sp)
9740#  subu $sp,$sp,4
9744#  sw $t0,($sp)
9748#  lw $t0,($sp)
9752#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 346.14; stackHeight = 72
9756#  sw $t0,56($sp)
9760#j if_done_710
9764:if_else_710:
9764#  lw $t0,44($sp)
9768#  subu $sp,$sp,4
9772#  sw $t0,($sp)
9776#  lw $t0,0($sp)
9780#  sw $s2,0($sp)
9784#  move $s2, $t0
9788#  lw $t0, -12($s2)
9792#  lw $t0,24($t0)
9796#  jalr $t0
9800#  addu $sp,$sp,0
9804#  lw $s2,($sp)
9808#  addu $sp,$sp,4
9812#  subu $sp,$sp,4
9816#  sw $t0,($sp)
9820#  lw $t0,($sp)
9824#  addu $sp,$sp,4
9828#  beq $t0,$0,if_else_709
9832#  lw $t0,44($sp)
9836#  subu $sp,$sp,4
9840#  sw $t0,($sp)
9844#  lw $t0,0($sp)
9848#  sw $s2,0($sp)
9852#  move $s2, $t0
9856#  lw $t0, -12($s2)
9860#  lw $t0,36($t0)
9864#  jalr $t0
9868#  addu $sp,$sp,0
9872#  lw $s2,($sp)
9876#  addu $sp,$sp,4
9880#  subu $sp,$sp,4
9884#  sw $t0,($sp)
9888#  lw $0,($sp)
9892#  lw $t0,56($sp)
9896#  subu $sp,$sp,4
9900#  sw $t0,($sp)
9904#  lw $t0,4($sp)
9908#  subu $sp,$sp,4
9912#  sw $t0,($sp)
9916#  lw $t0,80($sp)
9920#  subu $sp,$sp,4
9924#  sw $t0,($sp)
9928#  lw $t0,4($sp)
9932#  sw $s2,4($sp)
9936#  move $s2, $t0
9940#  lw $t0, -12($s2)
9944#  lw $t0,76($t0)
9948#  jalr $t0
9952#  addu $sp,$sp,4
9956#  lw $s2,($sp)
9960#  addu $sp,$sp,4
9964#  subu $sp,$sp,4
9968#  sw $t0,($sp)
9972#  lw $t0,80($sp)
9976#  subu $sp,$sp,4
9980#  sw $t0,($sp)
9984#  lw $t0,8($sp)
9988#  sw $s2,8($sp)
9992#  move $s2, $t0
9996#  lw $t0, -12($s2)
10000#  lw $t0,80($t0)
10004#  jalr $t0
10008#  addu $sp,$sp,8
10012#  lw $s2,($sp)
10016#  addu $sp,$sp,4
10020#  subu $sp,$sp,4
10024#  sw $t0,($sp)
10028#  addu $sp,$sp,4
10032#  lw $t0,52($sp)
10036#  subu $sp,$sp,4
10040#  sw $t0,($sp)
10044#  lw $t0,4($sp)
10048#  subu $sp,$sp,4
10052#  sw $t0,($sp)
10056#  lw $t0,80($sp)
10060#  subu $sp,$sp,4
10064#  sw $t0,($sp)
10068#  lw $t0,4($sp)
10072#  sw $s2,4($sp)
10076#  move $s2, $t0
10080#  lw $t0, -12($s2)
10084#  lw $t0,72($t0)
10088#  jalr $t0
10092#  addu $sp,$sp,4
10096#  lw $s2,($sp)
10100#  addu $sp,$sp,4
10104#  subu $sp,$sp,4
10108#  sw $t0,($sp)
10112#  lw $t0,80($sp)
10116#  subu $sp,$sp,4
10120#  sw $t0,($sp)
10124#  lw $t0,8($sp)
10128#  sw $s2,8($sp)
10132#  move $s2, $t0
10136#  lw $t0, -12($s2)
10140#  lw $t0,84($t0)
10144#  jalr $t0
10148#  addu $sp,$sp,8
10152#  lw $s2,($sp)
10156#  addu $sp,$sp,4
10160#  subu $sp,$sp,4
10164#  sw $t0,($sp)
10168#  addu $sp,$sp,4
10172#  lw $t0,0($sp)
10176#  subu $sp,$sp,4
10180#  sw $t0,($sp)
10184#  lw $t0,60($sp)
10188#  subu $sp,$sp,4
10192#  sw $t0,($sp)
10196#  lw $t0,80($sp)
10200#  subu $sp,$sp,4
10204#  sw $t0,($sp)
10208#  lw $t0,8($sp)
10212#  sw $s2,8($sp)
10216#  move $s2, $t0
10220#  lw $t0, -12($s2)
10224#  lw $t0,84($t0)
10228#  jalr $t0
10232#  addu $sp,$sp,8
10236#  lw $s2,($sp)
10240#  addu $sp,$sp,4
10244#  subu $sp,$sp,4
10248#  sw $t0,($sp)
10252#  addu $sp,$sp,4
10256#  lw $t0,0($sp)
10260#  subu $sp,$sp,4
10264#  sw $t0,($sp)
10268#  lw $t0,56($sp)
10272#  subu $sp,$sp,4
10276#  sw $t0,($sp)
10280#  lw $t0,80($sp)
10284#  subu $sp,$sp,4
10288#  sw $t0,($sp)
10292#  lw $t0,8($sp)
10296#  sw $s2,8($sp)
10300#  move $s2, $t0
10304#  lw $t0, -12($s2)
10308#  lw $t0,80($t0)
10312#  jalr $t0
10316#  addu $sp,$sp,8
10320#  lw $s2,($sp)
10324#  addu $sp,$sp,4
10328#  subu $sp,$sp,4
10332#  sw $t0,($sp)
10336#  addu $sp,$sp,4
10340#  lw $t0,0($sp)
10344#  subu $sp,$sp,4
10348#  sw $t0,($sp)
10352#  lw $t0,0($sp)
10356#  sw $s2,0($sp)
10360#  move $s2, $t0
10364#  lw $t0, -12($s2)
10368#  lw $t0,20($t0)
10372#  jalr $t0
10376#  addu $sp,$sp,0
10380#  lw $s2,($sp)
10384#  addu $sp,$sp,4
10388#  subu $sp,$sp,4
10392#  sw $t0,($sp)
10396#  addu $sp,$sp,4
10400#  lw $t0,60($sp)
10404#  subu $sp,$sp,4
10408#  sw $t0,($sp)
10412#  lw $t0,4($sp)
10416#  subu $sp,$sp,4
10420#  sw $t0,($sp)
10424#  lw $t0,($sp)
10428#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 358.14; stackHeight = 80
10432#  sw $t0,64($sp)
10436#j if_done_709
10440:if_else_709:
10440#  lw $t0,56($sp)
10444#  subu $sp,$sp,4
10448#  sw $t0,($sp)
10452#  lw $t0,0($sp)
10456#  sw $s2,0($sp)
10460#  move $s2, $t0
10464#  lw $t0, -12($s2)
10468#  lw $t0,60($t0)
10472#  jalr $t0
10476#  addu $sp,$sp,0
10480#  lw $s2,($sp)
10484#  addu $sp,$sp,4
10488#  subu $sp,$sp,4
10492#  sw $t0,($sp)
10496#  addu $sp,$sp,4
10500#  lw $t0,72($sp)
10504#  subu $sp,$sp,4
10508#  sw $t0,($sp)
10512#  li $t0,0
10516#  subu $sp,$sp,8
10520#  sw $s5,4($sp)
10524#  sw $t0,($sp)
10528#  lw $t0,($sp)
10532#  addu $sp,$sp,4
10536#  lw $t1,($sp)
10540#  addu $sp,$sp,4
10544#  beq $t0,$0,nullPtrException
10548#lw $t3, -4($t0)
10552#bgeu $t1,$t3,arrayIndexOutOfBounds
10553##...sltu $at,$t1,$t3
10557##...beq $at,$zero,18516
10560#sll $t1,$t1,2
10564#addu $t1,$t1,$t0
10568#lw $t0,($t1)
10572#  subu $sp,$sp,4
10576#  sw $t0,($sp)
10580#  li $t0,1
10584#  subu $sp,$sp,4
10588#  sw $t0,($sp)
# ArrayLookup Assignment: Assign at 363.18; stackHeight = 92
10592#  lw $t0,($sp)
10596#  addu $sp,$sp,4
10600#  lw $t1,($sp)
10604#  addu $sp,$sp,8
10608#  lw $t2,($sp)
10612#  addu $sp,$sp,4
10616#  beq $t2,$0,nullPtrException
10620#lw $t3, -4($t2)
10624#bgeu $t1,$t3,arrayIndexOutOfBounds
10625##...sltu $at,$t1,$t3
10629##...beq $at,$zero,18516
10632#sll $t1,$t1,2
10636#addu $t1,$t1,$t2
10640#  sw $t0, ($t1)
10644:if_done_709:
10644:if_done_710:
10644:if_done_712:
10644:if_done_713:
10644#j if_done_716
10648:if_else_716:
10648:if_done_716:
10648#  addu $sp,$sp,64
10652#  lw $t0,-4($sp)
10656#  subu $sp,$sp,4
10660#  sw $t0,($sp)
10664#  lw $t0,($sp)
10668#  addu $sp,$sp,4
10672#  addu $sp,$sp,0
10676#  lw $ra,($sp)
10680#  addu $sp,$sp,4
10684#  jr $ra
.globl fcn_asNonNull_NonNullRedBlackTree
10688:fcn_asNonNull_NonNullRedBlackTree:
10688#  subu $sp,$sp,4
10692#  sw $ra,($sp)
10696#  addu $sp,$sp,0
10700#  subu $sp,$sp,4
10704#  sw $s2,($sp)
10708#  lw $t0,($sp)
10712#  addu $sp,$sp,4
10716#  addu $sp,$sp,0
10720#  lw $ra,($sp)
10724#  addu $sp,$sp,4
10728#  jr $ra
.globl fcn_getRight_NonNullRedBlackTree
10732:fcn_getRight_NonNullRedBlackTree:
10732#  subu $sp,$sp,4
10736#  sw $ra,($sp)
10740#  lw $t0,4($sp)
10744#  subu $sp,$sp,4
10748#  sw $t0,($sp)
10752#  lw $0,($sp)
10756#  lw $t0,8($sp)
10760#  subu $sp,$sp,4
10764#  sw $t0,($sp)
10768#  lw $t0,($sp)
10772#  addu $sp,$sp,4
10776#  beq $t0,$0,if_else_735
10780#  lw $t0,0($sp)
10784#  subu $sp,$sp,4
10788#  sw $t0,($sp)
10792#  lw $t0,16($sp)
10796#  subu $sp,$sp,4
10800#  sw $t0,($sp)
10804#  lw $t0,($sp)
10808#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 382.13; stackHeight = 16
10812#  sw $t0,4($sp)
10816#j if_done_735
10820:if_else_735:
10820:if_done_735:
10820#  addu $sp,$sp,8
10824#  lw $t0,-4($sp)
10828#  subu $sp,$sp,4
10832#  sw $t0,($sp)
10836#  lw $t0,($sp)
10840#  addu $sp,$sp,4
10844#  addu $sp,$sp,0
10848#  lw $ra,($sp)
10852#  addu $sp,$sp,4
10856#  jr $ra
.globl fcn_getLeft_NonNullRedBlackTree
10860:fcn_getLeft_NonNullRedBlackTree:
10860#  subu $sp,$sp,4
10864#  sw $ra,($sp)
10868#  addu $sp,$sp,0
10872#  subu $sp,$sp,4
10876#  sw $s2,($sp)
10880#  lw $t0,8($sp)
10884#  subu $sp,$sp,4
10888#  sw $t0,($sp)
10892#lw $t0,($sp)
10896#xor $t0,$t0,1
10900#sw $t0,($sp)
10904#  lw $t0,4($sp)
10908#  sw $s2,4($sp)
10912#  move $s2, $t0
10916#  lw $t0, -12($s2)
10920#  lw $t0,72($t0)
10924#  jalr $t0
10928#  addu $sp,$sp,4
10932#  lw $s2,($sp)
10936#  addu $sp,$sp,4
10940#  subu $sp,$sp,4
10944#  sw $t0,($sp)
10948#  lw $t0,($sp)
10952#  addu $sp,$sp,4
10956#  addu $sp,$sp,0
10960#  lw $ra,($sp)
10964#  addu $sp,$sp,4
10968#  jr $ra
10972:fcn_setRight_NonNullRedBlackTree:
10972#  subu $sp,$sp,4
10976#  sw $ra,($sp)
10980#  lw $t0,4($sp)
10984#  subu $sp,$sp,4
10988#  sw $t0,($sp)
10992#  lw $t0,($sp)
10996#  addu $sp,$sp,4
11000#  beq $t0,$0,if_else_759
11004#  lw $t0,12($sp)
11008#  subu $sp,$sp,4
11012#  sw $t0,($sp)
11016#  lw $t0,12($sp)
11020#  subu $sp,$sp,4
11024#  sw $t0,($sp)
11028#  lw $t0,($sp)
11032#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 395.11; stackHeight = 16
11036#  sw $t0,0($sp)
11040#j if_done_759
11044:if_else_759:
11044#  lw $t0,12($sp)
11048#  subu $sp,$sp,4
11052#  sw $t0,($sp)
11056#  lw $t0,16($sp)
11060#  subu $sp,$sp,4
11064#  sw $t0,($sp)
11068#  lw $t0,($sp)
11072#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 398.12; stackHeight = 20
11076#  sw $t0,4($sp)
11080:if_done_759:
11080#  addu $sp,$sp,8
11084#  addu $sp,$sp,0
11088#  lw $ra,($sp)
11092#  addu $sp,$sp,4
11096#  jr $ra
11100:fcn_setLeft_NonNullRedBlackTree:
11100#  subu $sp,$sp,4
11104#  sw $ra,($sp)
11108#  subu $sp,$sp,4
11112#  sw $s2,($sp)
11116#  lw $t0,12($sp)
11120#  subu $sp,$sp,4
11124#  sw $t0,($sp)
11128#  lw $t0,12($sp)
11132#  subu $sp,$sp,4
11136#  sw $t0,($sp)
11140#lw $t0,($sp)
11144#xor $t0,$t0,1
11148#sw $t0,($sp)
11152#  lw $t0,8($sp)
11156#  sw $s2,8($sp)
11160#  move $s2, $t0
11164#  lw $t0, -12($s2)
11168#  lw $t0,80($t0)
11172#  jalr $t0
11176#  addu $sp,$sp,8
11180#  lw $s2,($sp)
11184#  addu $sp,$sp,4
11188#  subu $sp,$sp,4
11192#  sw $t0,($sp)
11196#  addu $sp,$sp,4
11200#  addu $sp,$sp,0
11204#  addu $sp,$sp,0
11208#  lw $ra,($sp)
11212#  addu $sp,$sp,4
11216#  jr $ra
.globl fcn_rebalanceAfterInsert_NonNullRedBlackTree
11220:fcn_rebalanceAfterInsert_NonNullRedBlackTree:
11220#  subu $sp,$sp,4
11224#  sw $ra,($sp)
11228#  subu $sp,$sp,4
11232#  sw $s2,($sp)
11236#  lw $0,($sp)
11240#  subu $sp,$sp,4
11244#  sw $s2,($sp)
11248#  lw $t0,12($sp)
11252#  subu $sp,$sp,4
11256#  sw $t0,($sp)
11260#  lw $t0,4($sp)
11264#  sw $s2,4($sp)
11268#  move $s2, $t0
11272#  lw $t0, -12($s2)
11276#  lw $t0,72($t0)
11280#  jalr $t0
11284#  addu $sp,$sp,4
11288#  lw $s2,($sp)
11292#  addu $sp,$sp,4
11296#  subu $sp,$sp,4
11300#  sw $t0,($sp)
11304#  lw $0,($sp)
11308#  subu $sp,$sp,4
11312#  sw $s2,($sp)
11316#  lw $t0,16($sp)
11320#  subu $sp,$sp,4
11324#  sw $t0,($sp)
11328#  lw $t0,4($sp)
11332#  sw $s2,4($sp)
11336#  move $s2, $t0
11340#  lw $t0, -12($s2)
11344#  lw $t0,76($t0)
11348#  jalr $t0
11352#  addu $sp,$sp,4
11356#  lw $s2,($sp)
11360#  addu $sp,$sp,4
11364#  subu $sp,$sp,4
11368#  sw $t0,($sp)
11372#  lw $0,($sp)
11376#  lw $t0,4($sp)
11380#  subu $sp,$sp,4
11384#  sw $t0,($sp)
11388#  lw $t0,0($sp)
11392#  sw $s2,0($sp)
11396#  move $s2, $t0
11400#  lw $t0, -12($s2)
11404#  lw $t0,24($t0)
11408#  jalr $t0
11412#  addu $sp,$sp,0
11416#  lw $s2,($sp)
11420#  addu $sp,$sp,4
11424#  subu $sp,$sp,4
11428#  sw $t0,($sp)
11432#  lw $t0,($sp)
11436#  addu $sp,$sp,4
11440#  beq $t0,$0,if_else_908
11444#  lw $t0,4($sp)
11448#  subu $sp,$sp,4
11452#  sw $t0,($sp)
11456#  lw $t0,0($sp)
11460#  sw $s2,0($sp)
11464#  move $s2, $t0
11468#  lw $t0, -12($s2)
11472#  lw $t0,36($t0)
11476#  jalr $t0
11480#  addu $sp,$sp,0
11484#  lw $s2,($sp)
11488#  addu $sp,$sp,4
11492#  subu $sp,$sp,4
11496#  sw $t0,($sp)
11500#  lw $t0,20($sp)
11504#  subu $sp,$sp,4
11508#  sw $t0,($sp)
11512#  lw $t0,4($sp)
11516#  sw $s2,4($sp)
11520#  move $s2, $t0
11524#  lw $t0, -12($s2)
11528#  lw $t0,72($t0)
11532#  jalr $t0
11536#  addu $sp,$sp,4
11540#  lw $s2,($sp)
11544#  addu $sp,$sp,4
11548#  subu $sp,$sp,4
11552#  sw $t0,($sp)
11556#  lw $0,($sp)
11560#  lw $t0,8($sp)
11564#  subu $sp,$sp,4
11568#  sw $t0,($sp)
11572#  lw $t0,0($sp)
11576#  sw $s2,0($sp)
11580#  move $s2, $t0
11584#  lw $t0, -12($s2)
11588#  lw $t0,36($t0)
11592#  jalr $t0
11596#  addu $sp,$sp,0
11600#  lw $s2,($sp)
11604#  addu $sp,$sp,4
11608#  subu $sp,$sp,4
11612#  sw $t0,($sp)
11616#  lw $t0,24($sp)
11620#  subu $sp,$sp,4
11624#  sw $t0,($sp)
11628#  lw $t0,4($sp)
11632#  sw $s2,4($sp)
11636#  move $s2, $t0
11640#  lw $t0, -12($s2)
11644#  lw $t0,76($t0)
11648#  jalr $t0
11652#  addu $sp,$sp,4
11656#  lw $s2,($sp)
11660#  addu $sp,$sp,4
11664#  subu $sp,$sp,4
11668#  sw $t0,($sp)
11672#  lw $0,($sp)
11676#  lw $t0,4($sp)
11680#  subu $sp,$sp,4
11684#  sw $t0,($sp)
11688#  lw $t0,0($sp)
11692#  sw $s2,0($sp)
11696#  move $s2, $t0
11700#  lw $t0, -12($s2)
11704#  lw $t0,24($t0)
11708#  jalr $t0
11712#  addu $sp,$sp,0
11716#  lw $s2,($sp)
11720#  addu $sp,$sp,4
11724#  subu $sp,$sp,4
11728#  sw $t0,($sp)
11732#  lw $t0,($sp)
11736#  addu $sp,$sp,4
11740#  beq $t0,$0,if_else_905
11744#  lw $t0,8($sp)
11748#  subu $sp,$sp,4
11752#  sw $t0,($sp)
11756#  lw $t0,0($sp)
11760#  sw $s2,0($sp)
11764#  move $s2, $t0
11768#  lw $t0, -12($s2)
11772#  lw $t0,24($t0)
11776#  jalr $t0
11780#  addu $sp,$sp,0
11784#  lw $s2,($sp)
11788#  addu $sp,$sp,4
11792#  subu $sp,$sp,4
11796#  sw $t0,($sp)
11800#  lw $t0,($sp)
11804#  addu $sp,$sp,4
11808#  beq $t0,$0,if_else_902
11812#  subu $sp,$sp,4
11816#  sw $s2,($sp)
11820#  lw $t0,($sp)
11824#  addu $sp,$sp,4
11828#  beq $t0,$0,nullPtrException
11832#lw $t0,-20($s2)
11836#  subu $sp,$sp,4
11840#  sw $t0,($sp)
11844#  subu $sp,$sp,4
11848#  sw $0,($sp)
# InstVar Assignment: Assign at 429.20; stackHeight = 36
11852#  lw $t0,($sp)
11856#  addu $sp,$sp,4
11860#  lw $t1,($sp)
11864#  addu $sp,$sp,4
11868#  beq $t1,$0,nullPtrException
11872#  sw $t0,-20($s2)
11876#  lw $t0,8($sp)
11880#  subu $sp,$sp,4
11884#  sw $t0,($sp)
11888#  lw $t0,0($sp)
11892#  sw $s2,0($sp)
11896#  move $s2, $t0
11900#  lw $t0, -12($s2)
11904#  lw $t0,20($t0)
11908#  jalr $t0
11912#  addu $sp,$sp,0
11916#  lw $s2,($sp)
11920#  addu $sp,$sp,4
11924#  subu $sp,$sp,4
11928#  sw $t0,($sp)
11932#  addu $sp,$sp,4
11936#  lw $t0,12($sp)
11940#  subu $sp,$sp,4
11944#  sw $t0,($sp)
11948#  lw $t0,0($sp)
11952#  sw $s2,0($sp)
11956#  move $s2, $t0
11960#  lw $t0, -12($s2)
11964#  lw $t0,20($t0)
11968#  jalr $t0
11972#  addu $sp,$sp,0
11976#  lw $s2,($sp)
11980#  addu $sp,$sp,4
11984#  subu $sp,$sp,4
11988#  sw $t0,($sp)
11992#  addu $sp,$sp,4
11996#j if_done_902
12000:if_else_902:
12000#  lw $t0,12($sp)
12004#  subu $sp,$sp,4
12008#  sw $t0,($sp)
12012#  lw $t0,0($sp)
12016#  sw $s2,0($sp)
12020#  move $s2, $t0
12024#  lw $t0, -12($s2)
12028#  lw $t0,36($t0)
12032#  jalr $t0
12036#  addu $sp,$sp,0
12040#  lw $s2,($sp)
12044#  addu $sp,$sp,4
12048#  subu $sp,$sp,4
12052#  sw $t0,($sp)
12056#  lw $0,($sp)
12060#  lw $t0,0($sp)
12064#  subu $sp,$sp,4
12068#  sw $t0,($sp)
12072#  lw $t0,32($sp)
12076#  subu $sp,$sp,4
12080#  sw $t0,($sp)
12084#  lw $t0,4($sp)
12088#  sw $s2,4($sp)
12092#  move $s2, $t0
12096#  lw $t0, -12($s2)
12100#  lw $t0,72($t0)
12104#  jalr $t0
12108#  addu $sp,$sp,4
12112#  lw $s2,($sp)
12116#  addu $sp,$sp,4
12120#  subu $sp,$sp,4
12124#  sw $t0,($sp)
12128#  lw $t0,0($sp)
12132#  sw $s2,0($sp)
12136#  move $s2, $t0
12140#  lw $t0, -12($s2)
12144#  lw $t0,24($t0)
12148#  jalr $t0
12152#  addu $sp,$sp,0
12156#  lw $s2,($sp)
12160#  addu $sp,$sp,4
12164#  subu $sp,$sp,4
12168#  sw $t0,($sp)
12172#  lw $t0,($sp)
12176#  addu $sp,$sp,4
12180#  beq $t0,$0,if_else_900
12184#  lw $t0,20($sp)
12188#  subu $sp,$sp,4
12192#  sw $t0,($sp)
12196#  lw $t0,4($sp)
12200#  subu $sp,$sp,4
12204#  sw $t0,($sp)
12208#  lw $t0,($sp)
12212#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 437.11; stackHeight = 36
12216#  sw $t0,24($sp)
12220#  subu $sp,$sp,4
12224#  sw $s2,($sp)
12228#  lw $t0,8($sp)
12232#  subu $sp,$sp,4
12236#  sw $t0,($sp)
12240#  lw $t0,40($sp)
12244#  subu $sp,$sp,4
12248#  sw $t0,($sp)
12252#  lw $t0,4($sp)
12256#  sw $s2,4($sp)
12260#  move $s2, $t0
12264#  lw $t0, -12($s2)
12268#  lw $t0,76($t0)
12272#  jalr $t0
12276#  addu $sp,$sp,4
12280#  lw $s2,($sp)
12284#  addu $sp,$sp,4
12288#  subu $sp,$sp,4
12292#  sw $t0,($sp)
12296#  lw $t0,40($sp)
12300#  subu $sp,$sp,4
12304#  sw $t0,($sp)
12308#  lw $t0,8($sp)
12312#  sw $s2,8($sp)
12316#  move $s2, $t0
12320#  lw $t0, -12($s2)
12324#  lw $t0,80($t0)
12328#  jalr $t0
12332#  addu $sp,$sp,8
12336#  lw $s2,($sp)
12340#  addu $sp,$sp,4
12344#  subu $sp,$sp,4
12348#  sw $t0,($sp)
12352#  addu $sp,$sp,4
12356#  lw $t0,4($sp)
12360#  subu $sp,$sp,4
12364#  sw $t0,($sp)
12368#  subu $sp,$sp,4
12372#  sw $s2,($sp)
12376#  lw $t0,40($sp)
12380#  subu $sp,$sp,4
12384#  sw $t0,($sp)
12388#  lw $t0,8($sp)
12392#  sw $s2,8($sp)
12396#  move $s2, $t0
12400#  lw $t0, -12($s2)
12404#  lw $t0,84($t0)
12408#  jalr $t0
12412#  addu $sp,$sp,8
12416#  lw $s2,($sp)
12420#  addu $sp,$sp,4
12424#  subu $sp,$sp,4
12428#  sw $t0,($sp)
12432#  addu $sp,$sp,4
12436#  subu $sp,$sp,4
12440#  sw $s2,($sp)
12444#  lw $t0,0($sp)
12448#  sw $s2,0($sp)
12452#  move $s2, $t0
12456#  lw $t0, -12($s2)
12460#  lw $t0,60($t0)
12464#  jalr $t0
12468#  addu $sp,$sp,0
12472#  lw $s2,($sp)
12476#  addu $sp,$sp,4
12480#  subu $sp,$sp,4
12484#  sw $t0,($sp)
12488#  addu $sp,$sp,4
12492#  lw $t0,4($sp)
12496#  subu $sp,$sp,4
12500#  sw $t0,($sp)
12504#  lw $t0,0($sp)
12508#  sw $s2,0($sp)
12512#  move $s2, $t0
12516#  lw $t0, -12($s2)
12520#  lw $t0,20($t0)
12524#  jalr $t0
12528#  addu $sp,$sp,0
12532#  lw $s2,($sp)
12536#  addu $sp,$sp,4
12540#  subu $sp,$sp,4
12544#  sw $t0,($sp)
12548#  addu $sp,$sp,4
12552#j if_done_900
12556:if_else_900:
12556#  lw $t0,4($sp)
12560#  subu $sp,$sp,4
12564#  sw $t0,($sp)
12568#  lw $t0,36($sp)
12572#  subu $sp,$sp,4
12576#  sw $t0,($sp)
12580#  lw $t0,4($sp)
12584#  sw $s2,4($sp)
12588#  move $s2, $t0
12592#  lw $t0, -12($s2)
12596#  lw $t0,76($t0)
12600#  jalr $t0
12604#  addu $sp,$sp,4
12608#  lw $s2,($sp)
12612#  addu $sp,$sp,4
12616#  subu $sp,$sp,4
12620#  sw $t0,($sp)
12624#  lw $t0,0($sp)
12628#  sw $s2,0($sp)
12632#  move $s2, $t0
12636#  lw $t0, -12($s2)
12640#  lw $t0,24($t0)
12644#  jalr $t0
12648#  addu $sp,$sp,0
12652#  lw $s2,($sp)
12656#  addu $sp,$sp,4
12660#  subu $sp,$sp,4
12664#  sw $t0,($sp)
12668#  lw $t0,($sp)
12672#  addu $sp,$sp,4
12676#  beq $t0,$0,if_else_899
12680#  lw $t0,4($sp)
12684#  subu $sp,$sp,4
12688#  sw $t0,($sp)
12692#  lw $t0,36($sp)
12696#  subu $sp,$sp,4
12700#  sw $t0,($sp)
12704#  lw $t0,4($sp)
12708#  sw $s2,4($sp)
12712#  move $s2, $t0
12716#  lw $t0, -12($s2)
12720#  lw $t0,76($t0)
12724#  jalr $t0
12728#  addu $sp,$sp,4
12732#  lw $s2,($sp)
12736#  addu $sp,$sp,4
12740#  subu $sp,$sp,4
12744#  sw $t0,($sp)
12748#  lw $t0,0($sp)
12752#  sw $s2,0($sp)
12756#  move $s2, $t0
12760#  lw $t0, -12($s2)
12764#  lw $t0,36($t0)
12768#  jalr $t0
12772#  addu $sp,$sp,0
12776#  lw $s2,($sp)
12780#  addu $sp,$sp,4
12784#  subu $sp,$sp,4
12788#  sw $t0,($sp)
12792#  lw $0,($sp)
12796#  lw $t0,28($sp)
12800#  subu $sp,$sp,4
12804#  sw $t0,($sp)
12808#  lw $t0,4($sp)
12812#  subu $sp,$sp,4
12816#  sw $t0,($sp)
12820#  lw $t0,($sp)
12824#  addu $sp,$sp,4
# IdentifierExp Assignment: Assign at 446.11; stackHeight = 44
12828#  sw $t0,32($sp)
12832#  lw $t0,12($sp)
12836#  subu $sp,$sp,4
12840#  sw $t0,($sp)
12844#  lw $t0,8($sp)
12848#  subu $sp,$sp,4
12852#  sw $t0,($sp)
12856#  lw $t0,48($sp)
12860#  subu $sp,$sp,4
12864#  sw $t0,($sp)
12868#  lw $t0,4($sp)
12872#  sw $s2,4($sp)
12876#  move $s2, $t0
12880#  lw $t0, -12($s2)
12884#  lw $t0,72($t0)
12888#  jalr $t0
12892#  addu $sp,$sp,4
12896#  lw $s2,($sp)
12900#  addu $sp,$sp,4
12904#  subu $sp,$sp,4
12908#  sw $t0,($sp)
12912#  lw $t0,48($sp)
12916#  subu $sp,$sp,4
12920#  sw $t0,($sp)
12924#  lw $t0,8($sp)
12928#  sw $s2,8($sp)
12932#  move $s2, $t0
12936#  lw $t0, -12($s2)
12940#  lw $t0,84($t0)
12944#  jalr $t0
12948#  addu $sp,$sp,8
12952#  lw $s2,($sp)
12956#  addu $sp,$sp,4
12960#  subu $sp,$sp,4
12964#  sw $t0,($sp)
12968#  addu $sp,$sp,4
12972#  lw $t0,4($sp)
12976#  subu $sp,$sp,4
12980#  sw $t0,($sp)
12984#  lw $t0,16($sp)
12988#  subu $sp,$sp,4
12992#  sw $t0,($sp)
12996#  lw $t0,48($sp)
13000#  subu $sp,$sp,4
13004#  sw $t0,($sp)
13008#  lw $t0,8($sp)
13012#  sw $s2,8($sp)
13016#  move $s2, $t0
13020#  lw $t0, -12($s2)
13024#  lw $t0,80($t0)
13028#  jalr $t0
13032#  addu $sp,$sp,8
13036#  lw $s2,($sp)
13040#  addu $sp,$sp,4
13044#  subu $sp,$sp,4
13048#  sw $t0,($sp)
13052#  addu $sp,$sp,4
13056#  subu $sp,$sp,4
13060#  sw $s2,($sp)
13064#  lw $t0,8($sp)
13068#  subu $sp,$sp,4
13072#  sw $t0,($sp)
13076#  lw $t0,48($sp)
13080#  subu $sp,$sp,4
13084#  sw $t0,($sp)
13088#  lw $t0,4($sp)
13092#  sw $s2,4($sp)
13096#  move $s2, $t0
13100#  lw $t0, -12($s2)
13104#  lw $t0,76($t0)
13108#  jalr $t0
13112#  addu $sp,$sp,4
13116#  lw $s2,($sp)
13120#  addu $sp,$sp,4
13124#  subu $sp,$sp,4
13128#  sw $t0,($sp)
13132#  lw $t0,48($sp)
13136#  subu $sp,$sp,4
13140#  sw $t0,($sp)
13144#  lw $t0,8($sp)
13148#  sw $s2,8($sp)
13152#  move $s2, $t0
13156#  lw $t0, -12($s2)
13160#  lw $t0,80($t0)
13164#  jalr $t0
13168#  addu $sp,$sp,8
13172#  lw $s2,($sp)
13176#  addu $sp,$sp,4
13180#  subu $sp,$sp,4
13184#  sw $t0,($sp)
13188#  addu $sp,$sp,4
13192#  lw $t0,4($sp)
13196#  subu $sp,$sp,4
13200#  sw $t0,($sp)
13204#  subu $sp,$sp,4
13208#  sw $s2,($sp)
13212#  lw $t0,48($sp)
13216#  subu $sp,$sp,4
13220#  sw $t0,($sp)
13224#  lw $t0,8($sp)
13228#  sw $s2,8($sp)
13232#  move $s2, $t0
13236#  lw $t0, -12($s2)
13240#  lw $t0,84($t0)
13244#  jalr $t0
13248#  addu $sp,$sp,8
13252#  lw $s2,($sp)
13256#  addu $sp,$sp,4
13260#  subu $sp,$sp,4
13264#  sw $t0,($sp)
13268#  addu $sp,$sp,4
13272#  subu $sp,$sp,4
13276#  sw $s2,($sp)
13280#  lw $t0,0($sp)
13284#  sw $s2,0($sp)
13288#  move $s2, $t0
13292#  lw $t0, -12($s2)
13296#  lw $t0,60($t0)
13300#  jalr $t0
13304#  addu $sp,$sp,0
13308#  lw $s2,($sp)
13312#  addu $sp,$sp,4
13316#  subu $sp,$sp,4
13320#  sw $t0,($sp)
13324#  addu $sp,$sp,4
13328#  lw $t0,4($sp)
13332#  subu $sp,$sp,4
13336#  sw $t0,($sp)
13340#  lw $t0,0($sp)
13344#  sw $s2,0($sp)
13348#  move $s2, $t0
13352#  lw $t0, -12($s2)
13356#  lw $t0,20($t0)
13360#  jalr $t0
13364#  addu $sp,$sp,0
13368#  lw $s2,($sp)
13372#  addu $sp,$sp,4
13376#  subu $sp,$sp,4
13380#  sw $t0,($sp)
13384#  addu $sp,$sp,4
13388#j if_done_899
13392:if_else_899:
13392:if_done_899:
13392:if_done_900:
13392:if_done_902:
13392#j if_done_905
13396:if_else_905:
13396:if_done_905:
13396#j if_done_908
13400:if_else_908:
13400:if_done_908:
13400#  addu $sp,$sp,36
13404#  lw $t0,-4($sp)
13408#  subu $sp,$sp,4
13412#  sw $t0,($sp)
13416#  lw $t0,($sp)
13420#  addu $sp,$sp,4
13424#  addu $sp,$sp,0
13428#  lw $ra,($sp)
13432#  addu $sp,$sp,4
13436#  jr $ra
13440:fcn_helpPrint_NonNullRedBlackTree:
13440#  subu $sp,$sp,4
13444#  sw $ra,($sp)
13448#  lw $t0,8($sp)
13452#  subu $sp,$sp,4
13456#  sw $t0,($sp)
13460#  li $s6,2
13464#  li $s7,1
13468#  jal newObject
13472#  la $t0,CLASS_BooleanList
13476#  sw $t0,-12($s7)
13480#  li $t0,1
13484#  subu $sp,$sp,4
13488#  sw $t0,($sp)
13492#  lw $t0,20($sp)
13496#  subu $sp,$sp,4
13500#  sw $t0,($sp)
13504#  lw $t0,8($sp)
13508#  sw $s2,8($sp)
13512#  move $s2, $t0
13516#  lw $t0, -12($s2)
13520#  lw $t0,12($t0)
13524#  jalr $t0
13528#  addu $sp,$sp,8
13532#  lw $s2,($sp)
13536#  addu $sp,$sp,4
13540#  subu $sp,$sp,4
13544#  sw $t0,($sp)
13548#  lw $t0,12($sp)
13552#  subu $sp,$sp,4
13556#  sw $t0,($sp)
13560#  lw $t0,8($sp)
13564#  sw $s2,8($sp)
13568#  move $s2, $t0
13572#  lw $t0, -12($s2)
13576#  lw $t0,44($t0)
13580#  jalr $t0
13584#  addu $sp,$sp,8
13588#  lw $s2,($sp)
13592#  addu $sp,$sp,4
13596#  subu $sp,$sp,4
13600#  sw $t0,($sp)
13604#  addu $sp,$sp,4
13608#  subu $sp,$sp,4
13612#  sw $s2,($sp)
13616#  lw $t0,12($sp)
13620#  subu $sp,$sp,4
13624#  sw $t0,($sp)
13628#  lw $t0,12($sp)
13632#  subu $sp,$sp,4
13636#  sw $t0,($sp)
13640#  lw $t0,8($sp)
13644#  sw $s2,8($sp)
13648#  move $s2, $t0
13652#  lw $t0, -12($s2)
13656#  lw $t0,92($t0)
13660#  jalr $t0
13664#  addu $sp,$sp,8
13668#  lw $s2,($sp)
13672#  addu $sp,$sp,4
13676#  subu $sp,$sp,4
13680#  sw $t0,($sp)
13684#  addu $sp,$sp,4
13688#  lw $t0,8($sp)
13692#  subu $sp,$sp,4
13696#  sw $t0,($sp)
13700#  subu $sp,$sp,4
13704#  sw $0,($sp)
13708#  lw $t2,($sp)
13712#  addu $sp,$sp,4
13716#  lw $t1,($sp)
13720#  addu $sp,$sp,4
13724#seq $t0,$t1,$t2
13725##...subu $at,$t1,$t2
13729##...sltiu $t0,$at,1
13732#  subu $sp,$sp,4
13736#  sw $t0,($sp)
13740#  lw $t0,($sp)
13744#  addu $sp,$sp,4
13748#  beq $t0,$0,if_else_950
13752#  lw $t0,4($sp)
13756#  subu $sp,$sp,4
13760#  sw $t0,($sp)
13764#  la $t0, strLit_933
13768#  subu $sp,$sp,4
13772#  sw $t0,($sp)
13776#  lw $t0,4($sp)
13780#  sw $s2,4($sp)
13784#  move $s2, $t0
13788#  lw $t0, -12($s2)
13792#  lw $t0,24($t0)
13796#  jalr $t0
13800#  addu $sp,$sp,4
13804#  lw $s2,($sp)
13808#  addu $sp,$sp,4
13812#  subu $sp,$sp,4
13816#  sw $t0,($sp)
13820#  addu $sp,$sp,4
13824#j if_done_950
13828:if_else_950:
13828#  lw $t0,8($sp)
13832#  subu $sp,$sp,4
13836#  sw $t0,($sp)
13840#  lw $t0,($sp)
13844#  addu $sp,$sp,4
13848#  beq $t0,$0,nullPtrException
13852#lw $t0,-16($s2)
13856#  subu $sp,$sp,4
13860#  sw $t0,($sp)
13864#  lw $t0,($sp)
13868#  addu $sp,$sp,4
13872#  beq $t0,$0,if_else_949
13876#  lw $t0,4($sp)
13880#  subu $sp,$sp,4
13884#  sw $t0,($sp)
13888#  la $t0, strLit_940
13892#  subu $sp,$sp,4
13896#  sw $t0,($sp)
13900#  lw $t0,4($sp)
13904#  sw $s2,4($sp)
13908#  move $s2, $t0
13912#  lw $t0, -12($s2)
13916#  lw $t0,24($t0)
13920#  jalr $t0
13924#  addu $sp,$sp,4
13928#  lw $s2,($sp)
13932#  addu $sp,$sp,4
13936#  subu $sp,$sp,4
13940#  sw $t0,($sp)
13944#  addu $sp,$sp,4
13948#j if_done_949
13952:if_else_949:
13952#  lw $t0,4($sp)
13956#  subu $sp,$sp,4
13960#  sw $t0,($sp)
13964#  la $t0, strLit_945
13968#  subu $sp,$sp,4
13972#  sw $t0,($sp)
13976#  lw $t0,4($sp)
13980#  sw $s2,4($sp)
13984#  move $s2, $t0
13988#  lw $t0, -12($s2)
13992#  lw $t0,24($t0)
13996#  jalr $t0
14000#  addu $sp,$sp,4
14004#  lw $s2,($sp)
14008#  addu $sp,$sp,4
14012#  subu $sp,$sp,4
14016#  sw $t0,($sp)
14020#  addu $sp,$sp,4
14024:if_done_949:
14024:if_done_950:
14024#  subu $sp,$sp,4
14028#  sw $s2,($sp)
14032#  lw $t0,0($sp)
14036#  sw $s2,0($sp)
14040#  move $s2, $t0
14044#  lw $t0, -12($s2)
14048#  lw $t0,16($t0)
14052#  jalr $t0
14056#  addu $sp,$sp,0
14060#  lw $s2,($sp)
14064#  addu $sp,$sp,4
14068#  subu $sp,$sp,4
14072#  sw $t0,($sp)
14076#  lw $t0,($sp)
14080#  addu $sp,$sp,4
14084#  beq $t0,$0,if_else_963
14088#  lw $t0,4($sp)
14092#  subu $sp,$sp,4
14096#  sw $t0,($sp)
14100#  la $t0, strLit_954
14104#  subu $sp,$sp,4
14108#  sw $t0,($sp)
14112#  lw $t0,4($sp)
14116#  sw $s2,4($sp)
14120#  move $s2, $t0
14124#  lw $t0, -12($s2)
14128#  lw $t0,24($t0)
14132#  jalr $t0
14136#  addu $sp,$sp,4
14140#  lw $s2,($sp)
14144#  addu $sp,$sp,4
14148#  subu $sp,$sp,4
14152#  sw $t0,($sp)
14156#  addu $sp,$sp,4
14160#j if_done_963
14164:if_else_963:
14164#  lw $t0,4($sp)
14168#  subu $sp,$sp,4
14172#  sw $t0,($sp)
14176#  la $t0, strLit_959
14180#  subu $sp,$sp,4
14184#  sw $t0,($sp)
14188#  lw $t0,4($sp)
14192#  sw $s2,4($sp)
14196#  move $s2, $t0
14200#  lw $t0, -12($s2)
14204#  lw $t0,24($t0)
14208#  jalr $t0
14212#  addu $sp,$sp,4
14216#  lw $s2,($sp)
14220#  addu $sp,$sp,4
14224#  subu $sp,$sp,4
14228#  sw $t0,($sp)
14232#  addu $sp,$sp,4
14236:if_done_963:
14236#  lw $t0,4($sp)
14240#  subu $sp,$sp,4
14244#  sw $t0,($sp)
14248#  lw $t0,32($sp)
14252#  subu $sp,$sp,8
14256#  sw $s5,4($sp)
14260#  sw $t0,($sp)
14264#  lw $t0,8($sp)
14268#  sw $s2,8($sp)
14272#  move $s2, $t0
14276#  lw $t0, -12($s2)
14280#  lw $t0,32($t0)
14284#  jalr $t0
14288#  addu $sp,$sp,8
14292#  lw $s2,($sp)
14296#  addu $sp,$sp,4
14300#  subu $sp,$sp,4
14304#  sw $t0,($sp)
14308#  addu $sp,$sp,4
14312#  lw $t0,4($sp)
14316#  subu $sp,$sp,4
14320#  sw $t0,($sp)
14324#  la $t0, strLit_969
14328#  subu $sp,$sp,4
14332#  sw $t0,($sp)
14336#  lw $t0,4($sp)
14340#  sw $s2,4($sp)
14344#  move $s2, $t0
14348#  lw $t0, -12($s2)
14352#  lw $t0,24($t0)
14356#  jalr $t0
14360#  addu $sp,$sp,4
14364#  lw $s2,($sp)
14368#  addu $sp,$sp,4
14372#  subu $sp,$sp,4
14376#  sw $t0,($sp)
14380#  addu $sp,$sp,4
14384#  lw $t0,12($sp)
14388#  subu $sp,$sp,4
14392#  sw $t0,($sp)
14396#  li $s6,2
14400#  li $s7,1
14404#  jal newObject
14408#  la $t0,CLASS_BooleanList
14412#  sw $t0,-12($s7)
14416#  subu $sp,$sp,4
14420#  sw $0,($sp)
14424#  lw $t0,20($sp)
14428#  subu $sp,$sp,4
14432#  sw $t0,($sp)
14436#  lw $t0,8($sp)
14440#  sw $s2,8($sp)
14444#  move $s2, $t0
14448#  lw $t0, -12($s2)
14452#  lw $t0,12($t0)
14456#  jalr $t0
14460#  addu $sp,$sp,8
14464#  lw $s2,($sp)
14468#  addu $sp,$sp,4
14472#  subu $sp,$sp,4
14476#  sw $t0,($sp)
14480#  lw $t0,12($sp)
14484#  subu $sp,$sp,4
14488#  sw $t0,($sp)
14492#  lw $t0,8($sp)
14496#  sw $s2,8($sp)
14500#  move $s2, $t0
14504#  lw $t0, -12($s2)
14508#  lw $t0,44($t0)
14512#  jalr $t0
14516#  addu $sp,$sp,8
14520#  lw $s2,($sp)
14524#  addu $sp,$sp,4
14528#  subu $sp,$sp,4
14532#  sw $t0,($sp)
14536#  addu $sp,$sp,4
14540#  addu $sp,$sp,0
14544#  addu $sp,$sp,0
14548#  lw $ra,($sp)
14552#  addu $sp,$sp,4
14556#  jr $ra
14560:fcn_helpPrintIndent_NonNullRedBlackTree:
14560#  subu $sp,$sp,4
14564#  sw $ra,($sp)
14568#  lw $t0,8($sp)
14572#  subu $sp,$sp,4
14576#  sw $t0,($sp)
14580#  subu $sp,$sp,4
14584#  sw $0,($sp)
14588#  lw $t2,($sp)
14592#  addu $sp,$sp,4
14596#  lw $t1,($sp)
14600#  addu $sp,$sp,4
14604#seq $t0,$t1,$t2
14605##...subu $at,$t1,$t2
14609##...sltiu $t0,$at,1
14612#  subu $sp,$sp,4
14616#  sw $t0,($sp)
14620#lw $t0,($sp)
14624#xor $t0,$t0,1
14628#sw $t0,($sp)
14632#  lw $t0,($sp)
14636#  addu $sp,$sp,4
14640#  beq $t0,$0,if_else_1027
14644#  lw $t0,8($sp)
14648#  subu $sp,$sp,4
14652#  sw $t0,($sp)
14656#  lw $t0,($sp)
14660#  addu $sp,$sp,4
14664#  beq $t0,$0,nullPtrException
14668#lw $t0,0($s2)
14672#  subu $sp,$sp,4
14676#  sw $t0,($sp)
14680#  subu $sp,$sp,4
14684#  sw $0,($sp)
14688#  lw $t2,($sp)
14692#  addu $sp,$sp,4
14696#  lw $t1,($sp)
14700#  addu $sp,$sp,4
14704#seq $t0,$t1,$t2
14705##...subu $at,$t1,$t2
14709##...sltiu $t0,$at,1
14712#  subu $sp,$sp,4
14716#  sw $t0,($sp)
14720#lw $t0,($sp)
14724#xor $t0,$t0,1
14728#sw $t0,($sp)
14732#  lw $t0,($sp)
14736#  addu $sp,$sp,4
14740#  beq $t0,$0,if_else_1024
14744#  subu $sp,$sp,4
14748#  sw $s2,($sp)
14752#  lw $t0,12($sp)
14756#  subu $sp,$sp,4
14760#  sw $t0,($sp)
14764#  lw $t0,($sp)
14768#  addu $sp,$sp,4
14772#  beq $t0,$0,nullPtrException
14776#lw $t0,0($s2)
14780#  subu $sp,$sp,4
14784#  sw $t0,($sp)
14788#  lw $t0,12($sp)
14792#  subu $sp,$sp,4
14796#  sw $t0,($sp)
14800#  lw $t0,8($sp)
14804#  sw $s2,8($sp)
14808#  move $s2, $t0
14812#  lw $t0, -12($s2)
14816#  lw $t0,92($t0)
14820#  jalr $t0
14824#  addu $sp,$sp,8
14828#  lw $s2,($sp)
14832#  addu $sp,$sp,4
14836#  subu $sp,$sp,4
14840#  sw $t0,($sp)
14844#  addu $sp,$sp,4
14848#  lw $t0,8($sp)
14852#  subu $sp,$sp,4
14856#  sw $t0,($sp)
14860#  lw $t0,($sp)
14864#  addu $sp,$sp,4
14868#  beq $t0,$0,nullPtrException
14872#lw $t0,-16($s2)
14876#  subu $sp,$sp,4
14880#  sw $t0,($sp)
14884#  lw $t0,12($sp)
14888#  subu $sp,$sp,4
14892#  sw $t0,($sp)
14896#  lw $t0,($sp)
14900#  addu $sp,$sp,4
14904#  beq $t0,$0,nullPtrException
14908#lw $t0,0($s2)
14912#  subu $sp,$sp,4
14916#  sw $t0,($sp)
14920#  lw $t0,($sp)
14924#  addu $sp,$sp,4
14928#  beq $t0,$0,nullPtrException
14932#lw $t0,-16($s2)
14936#  subu $sp,$sp,4
14940#  sw $t0,($sp)
14944#  lw $t2,($sp)
14948#  addu $sp,$sp,4
14952#  lw $t1,($sp)
14956#  addu $sp,$sp,4
14960#seq $t0,$t1,$t2
14961##...subu $at,$t1,$t2
14965##...sltiu $t0,$at,1
14968#  subu $sp,$sp,4
14972#  sw $t0,($sp)
14976#  lw $t0,($sp)
14980#  addu $sp,$sp,4
14984#  beq $t0,$0,if_else_1017
14988#  lw $t0,4($sp)
14992#  subu $sp,$sp,4
14996#  sw $t0,($sp)
15000#  la $t0, strLit_1008
15004#  subu $sp,$sp,4
15008#  sw $t0,($sp)
15012#  lw $t0,4($sp)
15016#  sw $s2,4($sp)
15020#  move $s2, $t0
15024#  lw $t0, -12($s2)
15028#  lw $t0,24($t0)
15032#  jalr $t0
15036#  addu $sp,$sp,4
15040#  lw $s2,($sp)
15044#  addu $sp,$sp,4
15048#  subu $sp,$sp,4
15052#  sw $t0,($sp)
15056#  addu $sp,$sp,4
15060#j if_done_1017
15064:if_else_1017:
15064#  lw $t0,4($sp)
15068#  subu $sp,$sp,4
15072#  sw $t0,($sp)
15076#  la $t0, strLit_1013
15080#  subu $sp,$sp,4
15084#  sw $t0,($sp)
15088#  lw $t0,4($sp)
15092#  sw $s2,4($sp)
15096#  move $s2, $t0
15100#  lw $t0, -12($s2)
15104#  lw $t0,24($t0)
15108#  jalr $t0
15112#  addu $sp,$sp,4
15116#  lw $s2,($sp)
15120#  addu $sp,$sp,4
15124#  subu $sp,$sp,4
15128#  sw $t0,($sp)
15132#  addu $sp,$sp,4
15136:if_done_1017:
15136#j if_done_1024
15140:if_else_1024:
15140#  lw $t0,4($sp)
15144#  subu $sp,$sp,4
15148#  sw $t0,($sp)
15152#  la $t0, strLit_1020
15156#  subu $sp,$sp,4
15160#  sw $t0,($sp)
15164#  lw $t0,4($sp)
15168#  sw $s2,4($sp)
15172#  move $s2, $t0
15176#  lw $t0, -12($s2)
15180#  lw $t0,24($t0)
15184#  jalr $t0
15188#  addu $sp,$sp,4
15192#  lw $s2,($sp)
15196#  addu $sp,$sp,4
15200#  subu $sp,$sp,4
15204#  sw $t0,($sp)
15208#  addu $sp,$sp,4
15212:if_done_1024:
15212#j if_done_1027
15216:if_else_1027:
15216:if_done_1027:
15216#  addu $sp,$sp,0
15220#  addu $sp,$sp,0
15224#  lw $ra,($sp)
15228#  addu $sp,$sp,4
15232#  jr $ra
.globl fcn_init_BooleanList
15236:fcn_init_BooleanList:
15236#  subu $sp,$sp,4
15240#  sw $ra,($sp)
15244#  subu $sp,$sp,4
15248#  sw $s2,($sp)
15252#  lw $t0,($sp)
15256#  addu $sp,$sp,4
15260#  beq $t0,$0,nullPtrException
15264#lw $t0,-16($s2)
15268#  subu $sp,$sp,4
15272#  sw $t0,($sp)
15276#  lw $t0,12($sp)
15280#  subu $sp,$sp,4
15284#  sw $t0,($sp)
# InstVar Assignment: Assign at 506.11; stackHeight = 20
15288#  lw $t0,($sp)
15292#  addu $sp,$sp,4
15296#  lw $t1,($sp)
15300#  addu $sp,$sp,4
15304#  beq $t1,$0,nullPtrException
15308#  sw $t0,-16($s2)
15312#  subu $sp,$sp,4
15316#  sw $s2,($sp)
15320#  lw $t0,($sp)
15324#  addu $sp,$sp,4
15328#  beq $t0,$0,nullPtrException
15332#lw $t0,0($s2)
15336#  subu $sp,$sp,4
15340#  sw $t0,($sp)
15344#  lw $t0,8($sp)
15348#  subu $sp,$sp,4
15352#  sw $t0,($sp)
# InstVar Assignment: Assign at 507.12; stackHeight = 20
15356#  lw $t0,($sp)
15360#  addu $sp,$sp,4
15364#  lw $t1,($sp)
15368#  addu $sp,$sp,4
15372#  beq $t1,$0,nullPtrException
15376#  sw $t0,0($s2)
15380#  addu $sp,$sp,0
15384#  subu $sp,$sp,4
15388#  sw $s2,($sp)
15392#  lw $t0,($sp)
15396#  addu $sp,$sp,4
15400#  addu $sp,$sp,0
15404#  lw $ra,($sp)
15408#  addu $sp,$sp,4
15412#  jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15416:fcn_hashCode_Object:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
15416#    lw $t0,-8($s2) # get word with hash bits from this
15420#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
15424#    addu $t0,$t1

15428#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15432:fcn_equals_Object:
15432#    move $t0,$s2 # first pointer (this)
15436#    lw $t1,($sp) # second pointer
15440#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
15441##...subu $at,$t0,$t1
15445##...sltiu $t0,$at,1

15448#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15452:fcn_hashCode_String:
15452#    move $t0,$s2 # put this pointer in t0

15456#    li $t2,0 # current hash value
15460#    lw $t1,-4($t0) # negative of number of characters in string
15464#    beq $t1,$zero,done_hashCode_String # if zero length => done
15468#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
15472#    and $t0,0xfffffffc # adjust for padding
15473##...lui $at,65535
15477##...ori $at,$at,0xfffc
15481##...and $t0,$t0,$at
15484#    subu $t1,$t0,$t1 # address at end of string +12
15488:loop_hashCode_String:    
15488#    sll $t4,$t2,5 # multiply by 32
15492#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
15496#    lbu $t3,-12($t0) # current character
15500#    addu $t2,$t3 # add in current character
15504#    addu $t0,1 # go to next character's address
15508#    bne $t0,$t1,loop_hashCode_String # loop back if more
15512:done_hashCode_String:    

    # push int on stack
15512#    move $t0, $t2 # put $t2 in return slot
15516#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
15520:fcn_toString_Object:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
15520#    subu $sp,4
15524#    sw $ra,($sp)
    
    # get hash value
15528#    lw $t2,-12($s2) # vtable address
15532#    lw $t0,($t2) # method address
15536#    jalr $t0
15540#    subu $sp,8 # push result (int in $t0) on stack
15544#    sw $s5,4($sp)
15548#    sw $t0,($sp)

    # compute print-size of hash value
15552#    li $t0, 1
15556#    lw $t1, ($sp)
15560#    srl $t1,$t1,4
15564#    beq $t1,$zero,toString_skip_loop
15568:toString_loop_top:
15568#    addu $t0,1
15572#    srl $t1,$t1,4
15576#    bne $t1,$zero,toString_loop_top
15580:toString_skip_loop:
15580#    subu $sp,8
15584#    sw $s5,4($sp)
15588#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
15592#    lw $t2,-12($s2) # vtable address
15596#    move $t0,$t2
15600:toString_checkTagBit:
15600#    subu $t0,1
15604#    lb $t1,($t0)
15608#    and $t1,0x80
15609##...lui $at,0
15613##...ori $at,$at,0x80
15617##...and $t1,$t1,$at
15620#    beq $t1,$zero,toString_checkTagBit
15624#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
15628#    subu $sp,8
15632#    sw $t1,($sp)
15636#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
15640#    move $s7,$zero # -4 offset header word
15644#    lw $t4,8($sp) # bytes for hash value
15648#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
15652#    addu $t4,8
15656#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
15660#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

15664#    li $t0,CLASS_String # store string vtable address into ...
15668#    sw $t0,-12($s7) # ... -12 offset in object header
15672#    lw $t2,-12($s2) # our object's vtable address
15676#    lw $t5,4($sp) # number characters in prefix
15680#    lw $t1,12($sp) # number of characters in hashcode
15684#    addu $t3,$t1,$t5 # number of characters in string ...
15688#    addu $t3,1 # ... including the '@' character
15692#    subu $t0,$zero,$t3 # store negated length into ...
15696#    sw $t0,-4($s7) # ... -4 offset header word
15700#    lw $t0,-8($s7) # get -8 offset header-word
15704#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
15705##...slt $at,$t0,$zero
15709##...beq $at,$zero,15728
15712#    and $t0,0xff # mask off object's hash value ...
15713##...lui $at,0
15717##...ori $at,$at,0xff
15721##...and $t0,$t0,$at
15724#    sw $t0,-8($s7) # ... and store back into -8 header-word
15728:skipMask_toString:
15728#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
15732#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
15736#    subu $t4,$t2,$t5
15740:toString_copyLoop:    
15740#    lb $t3,($t4)
15744#    and $t3,0x7f # mask off sign bit (in case first word)
15745##...lui $at,0
15749##...ori $at,$at,0x7f
15753##...and $t3,$t3,$at
15756#    sb $t3,-8($t0)
15760#    addu $t4,1
15764#    addu $t0,1
15768#    blt $t4,$t2,toString_copyLoop
15769##...slt $at,$t4,$t2
15773##...bne $at,$zero,15740

    # copy the '@' sign
15776#    li $t3,'@'
15780#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
15784#    addu $t2,$t0,$t1 # address of last byte in string to store +8
15788#    lw $t3,20($sp) # hash code to print
15792:toString_hashCopyLoop:
15792#    and $t4,$t3,0xf
15796#    srl $t3,4
15800#    lb $t4,hexChars($t4)
15804#    sb $t4,-8($t2)
15808#    subu $t2,$t2,1
15812#    bgt $t2,$t0,toString_hashCopyLoop
15813##...slt $at,$t0,$t2
15817##...bne $at,$zero,15792

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
15820#    addu $sp,28
15824#    lw $ra,($sp)
15828#    addu $sp,4
15832#    move $t0, $s7 # return string we created
15836#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
15840:fcn_equals_String:
    
    # quick test for obvious false
15840#    lw $t0,($sp) # second parameter
15844#    beq $t0,$zero,goEsFalse # go return false if null
15848#    lw $t1,-12($t0) # vtable pointer
15852#    la $t2,CLASS_String # string vtable pointer
15856#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
15860#    subu $sp,12
15864#    sw $ra,8($sp)
15868#    sw $s2,4($sp)
15872#    sw $t0,($sp)
15876#    jal fcn_compareTo_String
15880#    lw $s2, 4($sp) #restore this pointer and pop parameters
15884#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
15888#    seq $t0,$t0,$zero
15889##...subu $at,$t0,$zero
15893##...sltiu $t0,$at,1

    # pop return address and return $t0
15896#    lw $ra,($sp)
15900#    addu $sp,4

15904#    jr $ra # return
    
15908:goEsFalse:
    # put 0 in $t0 and return
15908#    li $t0, 0
15912#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
15916:fcn_toString_String:
    #we are a string, so return this.
15916#    move $t0, $s2
15920#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
15924:fcn_readLine_Lib:
    
15924#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
15928#    sw $ra, 4($sp) # save $ra
15932#    move $t1,$sp # save "original" sp

15936:  doRead:

    # read the character
15936#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
15940#    subu $t2,$v0,13
15944#    bne $t2,$zero,notReturnRL
15948#    jal readLogicalChar
15952#    subu $t2,$v0,10 # check for newline
15956#    beq $t2,$zero,foundNewLine
15960#    sw $v0,lastCharRead # push back character into queue
15964#    j foundNewLine # go process the line

15968:  notReturnRL:

    # at this point, $v0 has our character

15968#    subu $t0,$v0,10
15972#    beq $t0,$zero,foundNewLine
15976#    blt $v0,$zero,foundEof
15977##...slt $at,$v0,$zero
15981##...bne $at,$zero,15996

    # we have a character, so push it onto stack
15984#    subu $sp,$sp,4
15988#    sw $v0,($sp)

    # loop back up to get next character
15992#    j doRead

15996:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
15996#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
16000#    li $s7, 0 # return-value: null
16004#    j rlReturn # return

16008:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
16008#    subu $t0,$t1,$sp # number of chars we read (times 4)
16012#    srl $s6,$t0,2 # number of words on stack with chars
16016#    subu $sp,$sp,4 # push char-count ...
16020#    sw $s6,($sp) # ... onto stack
16024#    addu $t2,$t0,5 # GC tag, incl. for count-word
16028#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
16032#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
16036#    srl $s6,$s6,2  # data words in object
16040#    move $s7,$zero # object words in object
16044#    jal newObject  # allocate space
    
    # store header words
16048#    la $t0,CLASS_String
16052#    sw $t0,-12($s7)# store class tag (String) into object
16056#    lw $t2,4($sp) # char-count
16060#    sll $t1,$t2,2 # 4 times number of chars
16064#    subu $t2,$zero,$t2 # negative of char-count
16068#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
16072#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
16076#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
16077##...slt $at,$t0,$zero
16081##...beq $at,$zero,16100
16084#    and $t0,0xff # mask off object's hash value ...
16085##...lui $at,0
16089##...ori $at,$at,0xff
16093##...and $t0,$t0,$at
16096#    sw $t0,-8($s7) # ... and store back into -8 header-word
16100:  skipMask_readLine:

16100#    sll $t0,$t0,2 # data bytes in object
16104#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
16108#    subu $t0,$t0,$t2 # place to store last character (plus 9)
16112#    addu $sp,$sp,8 # pop redundant object-pointer and count
16116#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

16120#    beq $sp,$t1,rlReturn
16124:  charCopyLoop:
16124#    lw $t2,($sp)
16128#    sb $t2,-9($t0)
16132#    addu $sp,$sp,4
16136#    subu $t0,$t0,1
16140#    bne $sp,$t1,charCopyLoop
16144:  rlReturn:

16144#    lw $ra, 4($sp)
16148#    addu $sp, 8   # pop $ra and pointless word off stack
16152#    move $t0, $s7 # return string we allocated in $s7
16156#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
16160:fcn_readInt_Lib:

    # save $ra by pushing onto stack
16160#    subu $sp,$sp,4
16164#    sw $ra,($sp)

16168:  riSkipWhiteLoop:
    # read a character
16168#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
16172#    subu $t0,$v0,32
16176#    bgt $t0,$zero,nonWhite
16177##...slt $at,$zero,$t0
16181##...bne $at,$zero,16224
16184#    beq $t0,$zero,riSkipWhiteLoop # start over if space
16188#    subu $t0,$v0,10
16192#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
16196#    subu $t0,$v0,9
16200#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
16204#    subu $t0,$v0,13
16208#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
16212#    subu $t0,$v0,12
16216#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
16220#    j badIntegerFormat # illegal integer char: abort program

16224:  nonWhite:
16224#    subu $t0,$v0,'-'
16228#    li $t4,1 # final multiplier
16232#    bne $t0,$zero,helpReadInt # go read
16236#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
16240#    jal readLogicalChar

16244:  helpReadInt:
16244#    li $t2,10
16248#    subu $t1,$v0,'0' # convert digit to 0-9 value
16252#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
16253##...sltu $at,$t1,$t2
16257##...beq $at,$zero,18540
16260#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

16264:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

16264#    jal readLogicalChar # read next character
16268#    subu $t1,$v0,'0' # convert digit to 0-9 value
16272#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
16273##...sltu $at,$t1,$t2
16277##...beq $at,$zero,16296

16280#    mul $t3,$t3,$t2 # multiply old value by 10
16281##...mult $t3,$t2
16285##...mflo $t3
16288#    addu $t3,$t3,$t1 # add in value of new digit
16292#    j digitLoop

16296:  doneDigitLoop:

    # "push back" unused character into queue
16296#    sw $v0,lastCharRead

    # restore return address
16300#    lw $ra,($sp)
16304#    addu $sp, 4

    # multiply by sign and put return value in $t0
16308#    mult $t3,$t4 # multiply to account for poss. minus sign
16312#    mflo $t3
16316#    move $t0, $t3
    
    # return
16320#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
16324:fcn_readChar_Lib:

    # save $ra by pushing onto stack
16324#    subu $sp,$sp,4
16328#    sw $ra,($sp)

      # read the character
16332#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
16336#    lw $ra,($sp)
16340#    addu $sp, 4
16344#    move $t0, $v0

    # return
16348#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
16352:fcn_printStr_Lib:
    # check for null, printing "(null)", if so
16352#    lw $t0,($sp)
16356#    bne $t0,$zero,psNotNull

    # print "(null)"
16360#    la $a0,nullStr
16364#    li $v0,4
16368#    syscall
16372#    j donePrintStr
    
16376:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
16376#    subu $t0,$t0,8
16380#    lw $t1,($t0) # number of data words, but needs modification
16384#    blt $t1,$zero,skipPrintStr1
16385##...slt $at,$t1,$zero
16389##...bne $at,$zero,16408
16392#    and $t1,0xff # mask out all but low byte
16393##...lui $at,0
16397##...ori $at,$at,0xff
16401##...and $t1,$t1,$at
16404#    b skipPrintStr2
16408:skipPrintStr1:
16408#    and $t1,0x7ffffff
16409##...lui $at,2047
16413##...ori $at,$at,0xffff
16417##...and $t1,$t1,$at
16420:skipPrintStr2:    
16420#    sll $t1,$t1,2
16424#    subu $t1,$t0,$t1 # first word in string
16428#    lw $t0,4($t0) # negative of string-length
16432#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
16436#    beq $t0,$t1,donePrintStr
16440:  psLoop:
16440#    lb $a0,($t1) # next byte
16444#    li $v0,11 # code for printing char
16448#        syscall # print the char
16452#    addu $t1,$t1,1 # go to next char
16456#    blt $t1,$t0,psLoop
16457##...slt $at,$t1,$t0
16461##...bne $at,$zero,16440

16464:  donePrintStr:
16464#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
16468:fcn_printInt_Lib:
16468#    lw $a0,($sp)

    # print it
16472#    li $v0,1 # code for print-int
16476#    syscall

    # return
16480#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
16484:fcn_printBool_Lib:
    # pop value off stack, along with 'this'
16484#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
16488#    la $a0,falseString
16492#    beq $t0,$zero,skipPB
16496#    la $a0,trueString
16500:  skipPB:
16500#    li $v0,4 # code for print-string
16504#    syscall

    # return
16508#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
16512:fcn_substring_String:

    # save $ra by pushing onto stack
16512#    subu $sp,$sp,4
16516#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
16520#    move $t0,$s2
16524#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
16528#    lw $t0,-4($t0) # negative of string length
16532#    subu $t0,$zero,$t0 # string length
16536#    lw $t1,4($sp) # k
16540#    lw $t2,12($sp) # n
16544#    bgt $zero,$t2,strIndexOutOfBounds
16545##...slt $at,$t2,$zero
16549##...bne $at,$zero,18508
16552#    bgt $t2,$t1,strIndexOutOfBounds
16553##...slt $at,$t1,$t2
16557##...bne $at,$zero,18508
16560#    bgt $t1,$t0,strIndexOutOfBounds
16561##...slt $at,$t0,$t1
16565##...bne $at,$zero,18508

    # allocate memory
16568#    subu $s6,$t1,$t2 # # chars in target-string
16572#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
16576#    srl $s6,$s6,2 # convert bytes-count to word-count
16580#    move $s7,$zero # (no object-bytes in string)
16584#    jal newObject

    # store "String" tag in object-type field
16588#    la $t0,CLASS_String
16592#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
16596#    lw $t4,-8($s7) # data words in source string
16600#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
16601##...slt $at,$t4,$zero
16605##...beq $at,$zero,16624
16608#    and $t4,0xff # mask off object's hash value ...
16609##...lui $at,0
16613##...ori $at,$at,0xff
16617##...and $t4,$t4,$at
16620#    sw $t4,-8($s7) # ... and store back into -8 header-word
16624:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
16624#    lw $t1,8($sp) # k
16628#    lw $t2,16($sp) # n
16632#    subu $t0,$t2,$t1 # value to store
16636#    sw $t0,-4($s7) # store value
    
16640#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
16644#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
16648#    lw $t4,-8($t3) # data words in source string
16652#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
16656#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
16660#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
16664#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
16668#    lw $t2,-8($s7)   # data words in target string
16672#    sll $t2,$t2,2    # data bytes in target string
16676#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
16680:  subCopyLoopzz:
16680#    lb $t4,-8($t3)
16684#    sb $t4,-8($t2)
16688#    addu $t2,$t2,1
16692#    addu $t3,$t3,1
16696#    blt $t3,$t1,subCopyLoopzz
16697##...slt $at,$t3,$t1
16701##...bne $at,$zero,16680
    
16704:  doneSubCopyzz:
    # restore return address, store return value, pop stack
16704#    lw $ra,4($sp) # restore $ra
16708#    addu $sp,$sp,8 # pop ra, and allocated newObject
16712#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
16716#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
16720:fcn_length_String:

    # the length is the negative of 4($s2)
16720#    lw $t0,-4($s2) # -length
16724#    subu $t0,$zero,$t0

    # return
16728#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
16732:fcn_concat_String:
    # save $ra by pushing onto stack
16732#    subu $sp,$sp,4
16736#    sw $ra, ($sp)

    # get string pointers and check parameter for null
16740#    lw $t0,4($sp)
16744#    beq $t0,$zero,nullPtrException
16748#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
16752#    lw $t0,-4($t0) # negative size of second object
16756#    lw $t1,-4($t1) # negative size of first object
16760#    addu $s6,$t0,$t1 # sum of negative sizes
16764#    sra $s6,$s6,2 # negative word-size of char part
16768#    subu $s6,$zero,$s6 # word size of char part
16772#    addu $s6,$s6,1 # data word size, including v-table word
16776#    move $s7,$zero
16780#    jal newObject

    # store String vtable address in vtable address field
16784#    la $t0,CLASS_String
16788#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
16792#    lw $t4,-8($s7) # # data words in source string
16796#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
16797##...slt $at,$t4,$zero
16801##...beq $at,$zero,16820
16804#    and $t4,0xff # mask off object's hash value ...
16805##...lui $at,0
16809##...ori $at,$at,0xff
16813##...and $t4,$t4,$at
16816#    sw $t4,-8($s7) # ... and store back into -8 header-word
16820:skipMask_concat:

16820#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
16824#    move $t1,$s2   # first object
16828#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
16832#    lw $t2,-4($t0) # negative length of second object
16836#    lw $t3,-4($t1) # negative length of first object
16840#    addu $t4,$t2,$t3 # sum of negative lengths
16844#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
16848#    lw $t4,-8($t1) # # data words in first string
16852#    sll $t4,$t4,2 # # data bytes in first string
16856#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
16860#    lw $t4,-8($s7) # # data words in new string
16864#    sll $t4,$t4,2 # # data bytes in new string
16868#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
16872#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
16876#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
16880:  concatLoop1zz:
16880#    lb $t4,-8($t1)
16884#    sb $t4,-8($s7)
16888#    addu $s7,$s7,1
16892#    addu $t1,$t1,1
16896#    blt $t1,$t3,concatLoop1zz
16897##...slt $at,$t1,$t3
16901##...bne $at,$zero,16880
16904:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
16904#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
16908#    lw $t4,-8($t0) # # data words in second string
16912#    sll $t4,$t4,2 # # data bytes in second string
16916#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
16920#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
16924:  concatLoop2zz:
16924#    lb $t4,-8($t1)
16928#    sb $t4,-8($s7)
16932#    addu $s7,$s7,1
16936#    addu $t1,$t1,1
16940#    blt $t1,$t3,concatLoop2zz
16941##...slt $at,$t1,$t3
16945##...bne $at,$zero,16924
16948:  doneConcatLoop2zz:
 
16948:  concatRtnzz:
    # return
16948#    move $t0, $t9 # put saved return string in $t0
16952#    lw $ra, 4($sp)
16956#    addu $sp, 8 # pop ra and allocated newObject
16960#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
16964:fcn_charAt_String:
    # get string
16964#    move $t0,$s2

    # check that index is in bounds
16968#    lw $t1,-4($t0) # negative of # data words in string
16972#    subu $t3,$zero,$t1 # # chars in string
16976#    lw $t2,($sp) # index
16980#    bgeu $t2,$t3,strIndexOutOfBounds
16981##...sltu $at,$t2,$t3
16985##...beq $at,$zero,18508

    # access element
16988#    lw $t1,-8($t0) # # data words in object
16992#    sll $t1,$t1,2 # - byte-offset from end of chars
16996#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
17000#    addu $t0,$t0,$t1 # - address of our char, offset by 8
17004#    lb $t0,-8($t0) # our char

    # return
17008#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
17012:fcn_intToString_Lib:

    # save return address on stack; allocate space for dummy GC tag
17012#    subu $sp,$sp,8
17016#    sw $ra,4($sp)

    # save current sp
17020#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
17024#    li $t3,10

    # get argument, negate if negative
17028#    lw $t1,8($sp)
17032#    bge $t1,$zero,itsNonNegLoop
17033##...slt $at,$t1,$zero
17037##...beq $at,$zero,17044
17040#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
17044:  itsNonNegLoop:
17044#    divu $t1,$t3
17048#    mflo $t1 # quotient
17052#    mfhi $t4 # remainder
17056#    addu $t4,$t4,'0' # turn remainder into digit
17060#    subu $sp,$sp,4
17064#    sw $t4,($sp) # push digit onto stack
17068#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
17072#    lw $t4,8($t0)
17076#    bge $t4,$zero,itsSkipNeg
17077##...slt $at,$t4,$zero
17081##...beq $at,$zero,17096
17084#    li $t4,'-'
17088#    subu $sp,$sp,4
17092#    sw $t4,($sp)
17096:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
17096#    subu $s6,$t0,$sp
17100#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
17104#    sw $t3,($t0)
17108#    srl $s6,$s6,2
17112#    subu $sp,$sp,4
17116#    sw $s6,($sp)
    
    # allocate memory
17120#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
17124#    srl $s6,$s6,2
17128#    move $s7,$zero # no "object" words in object
17132#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
17136#    lw $t0,4($sp)
17140#    addu $sp,$sp,8

    # store "String" tag into class field
17144#    subu $s7,$s7,8 # address of header-1 word
17148#    la $t1,CLASS_String
17152#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
17156#    lw $t4,($s7) # # data words in source string
17160#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
17161##...slt $at,$t4,$zero
17165##...beq $at,$zero,17184
17168#    and $t4,0xff # mask off object's hash value ...
17169##...lui $at,0
17173##...ori $at,$at,0xff
17177##...and $t4,$t4,$at
17180#    sw $t4,($s7) # ... and store back into -8 header-word
17184:skipMask_intToString:
    
    # store negative of char-count into header-2 word
17184#    subu $t0,$zero,$t0
17188#    sw $t0,4($s7)

17192#    lw $t1,($s7) # number of data words in string
17196#    sll $t1,$t1,2 # number data bytes in string
17200#    subu $t1,$s7,$t1 # first location to store chars in string
17204#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
17208:  itsLoop:
17208#    lw $t2,($sp)
17212#    addu $sp,$sp,4
17216#    sb $t2,($t1)
17220#    addu $t1,$t1,1
17224#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
17228#    lw $ra,4($sp)
17232#    addu $sp,$sp,8
17236#    addu $t0,$t0,15
17240#    and $t0,$t0,0xfffffffc
17241##...lui $at,65535
17245##...ori $at,$at,0xfffc
17249##...and $t0,$t0,$at
17252#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
17256:fcn_intToChar_Lib:
    # save return address
17256#    subu $sp,$sp,4
17260#    sw $ra,($sp)

    # allocate object
17264#    li $s6,2
17268#    move $s7,$zero
17272#    jal newObject

    # get n from string.
17276#    lw $t1,8($sp)

    # store "String" tag into class field
17280#    la $t0,CLASS_String
17284#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
17288#    lw $t4,-8($s7) # # data words in source string
17292#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
17293##...slt $at,$t4,$zero
17297##...beq $at,$zero,17316
17300#    and $t4,0xff # mask off object's hash value ...
17301##...lui $at,0
17305##...ori $at,$at,0xff
17309##...and $t4,$t4,$at
17312#    sw $t4,-8($s7) # ... and store back into -8 header-word
17316:  skipMask_intToChar:

    # store data in string
17316#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
17320#    li $t0,-1
17324#    sw $t0,-4($s7)

    # we're returning $s7
17328#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
17332#    lw $ra,4($sp)
17336#    addu $sp,$sp,8

    # return
17340#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
17344:fcn_compareTo_String:
    # get string pointers and check parameter for null
17344#    lw $t0,($sp) # second string
17348#    beq $t0,$zero,nullPtrException
17352#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
17356#    lw $t2,-4($t0) # negative length of second string
17360#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
17364#    slt $t4,$t3,$t2
17368#    slt $t5,$t2,$t3
17372#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
17376#    lw $t2,-8($t0) # # data words in second string
17380#    lw $t3,-8($t1) # # data words in first string
17384#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
17388#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
17392#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
17396#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
17400#    beq $zero,$t5,skipStrCmpLenzz
17404#    move $t2,$t3
17408:  skipStrCmpLenzz:
17408#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
17412:  cmpLoopzz:
17412#    lw $t3,-8($t1) # word from str2
17416#    lw $t4,-8($t0) # word from str1
17420#    bne $t3,$t4,cmpNotEqualzz
17424#    addu $t1,$t1,4
17428#    addu $t0,$t0,4
17432#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
17436#    j cmpHitLimitzz

17440:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
17440#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
17444#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
17448#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
17452:  cmpHitLimitzz:
17452#    move $t0, $t5 # store return value
17456#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
17460:readLogicalChar:

    # check if we already have a character
17460#    lw $v0,lastCharRead
17464#    li $t0,-2
17468#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
17472#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
17476#    jr $ra # return
    
17480:  doReadCh:
    # we need to actually read a character: read and return
17480#    li $v0,12 # use system call to read a character
17484#    syscall
17488#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
17492:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
17492#    blt $s7,$zero arraySizeOutOfBounds
17493##...slt $at,$s7,$zero
17497##...bne $at,$zero,18524

    # mark the fact that we have not yet GC'd for this allocation
17500#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

17504:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
17504#    addu $t0,$s6,$s7
17508#    sll $t0,$t0,2
17512#    addu $t0,$t0,8 # amount of memory needed
17516#    addu $t1,$t0,$s3
17520#    bgtu $t1,$s4,doGC
17521##...sltu $at,$s4,$t1
17525##...bne $at,$zero,17648

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
17528#    move $t2,$s3
17532:  zeroObjLoop:
17532#    sw $zero,($s3)
17536#    lw $zero,($s3)

17540#    addu $s3,4
17544#    bltu $s3,$t1,zeroObjLoop
17545##...sltu $at,$s3,$t1
17549##...bne $at,$zero,17532

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
17552#    sll $t0,$s7,2    # number of post-header bytes
17556#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
17560#    li $t2,255
17564#    bgeu $s6,$t2 firstHeaderLarge
17565##...sltu $at,$s6,$t2
17569##...beq $at,$zero,17616
17572#    lw $t1,prevHashConstant
17576#    addu $t1,0x12b68fd2
17577##...lui $at,4791
17581##...addiu $at,$at,-28718
17585##...addu $t1,$at,$t1
17588#    sw $t1,prevHashConstant # update hash constant
17592#    or $t1,0x80000000 # set top bit
17593##...lui $at,32768
17597##...or $t1,$at,$t1
17600#    and $t1,0xffffff00 # clear low bit
17601##...lui $at,65535
17605##...ori $at,$at,0xff00
17609##...and $t1,$t1,$at
17612#    or $s6,$t1
17616:firstHeaderLarge:
17616#    sw $s6,-8($t0) # store header-1 value
17620#    lw $zero,-8($t0)

    # store second header-value
17624#    sw $s7,-4($t0)   # second header-word
17628#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
17632#    move $s7,$t0
17636#    subu $sp,$sp,4
17640#    sw $t0,($sp)

17644#    jr $ra
    
17648:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
17648#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
17652#    lw $t5,gcCount
17656#    addu $t5,1
17660#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
17664#    subu $sp,$sp,4
17668#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
17672#    lw $t0,cur_seg
17676#    move $t7,$s4
17680#    la $t6,seg1_start
17681##...lui $t6,16
17685##...addiu $t6,$t6,19732
17688#    la $s3,seg0_start
17692#    la $s4,seg0_end
17693##...lui $s4,16
17697##...addiu $s4,$s4,19732
17700#    sw $zero,cur_seg
17704#    bne $t0,$zero,skipGc1
17708#    la $t6,seg0_start
17712#    la $s3,seg1_start
17713##...lui $s3,16
17717##...addiu $s3,$s3,19732
17720#    la $s4,seg1_end
17721##...lui $s4,32
17725##...addiu $s4,$s4,19732
17728#    sw $s5,cur_seg
17732:  skipGc1:
17732#    li $t5,0x80000000
17736#    lw $t0,stack_bottom
17740#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

17744:  gcStackCopyLoop:
17744#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
17748#    sll $t2,$t1,31 # zero iff low bit was zero
17752#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
17756#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
17760#    bleu $t1,$t6,gcTestIterDone1
17761##...sltu $at,$t6,$t1
17765##...beq $at,$zero,17928
17768#    bgtu $t1,$t7,gcTestIterDone1
17769##...sltu $at,$t7,$t1
17773##...bne $at,$zero,17928

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
17776#    lw $t2,-8($t1) # possible forwarding tag
17780#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
17784#    lw $t2,-4($t1) # forwarding pointer: object's new address
17788#    sw $t2,4($t0) # update stack value
17792#    j gcTestIterDone1 # do next iteration

17796:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
17796#    bge $t2,$zero,gcSkip2
17797##...slt $at,$t2,$zero
17801##...beq $at,$zero,17816
17804#    and $t2,0xff #### mask off hash value
17805##...lui $at,0
17809##...ori $at,$at,0xff
17813##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

17816:  gcSkip2:
17816#    sll $t2,$t2,2
17820#    addu $t2,$t2,8
17824#    subu $t4,$t1,$t2 # address of first word of source
17828#    lw $t3,-4($t1) # number of object words (negative means zero)
17832#    bge $t3,$zero,gcH2Neg1
17833##...slt $at,$t3,$zero
17837##...beq $at,$zero,17844
17840#    move $t3,$zero
17844:  gcH2Neg1:
17844#    sll $t3,$t3,2
17848#    addu $t3,$t3,$t1 # address one word past last word of source

17852#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
17856#    lw $s0,($t4)
17860#    lw $s1,-8($t1)
17864#    sw $s1,($t4)
17868#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
17872:  gCinnerCopy1:
17872#    lw $s0,($t4)
17876#    sw $s0,($s3)
17880#    addu $t4,$t4,4
17884#    addu $s3,$s3,4
17888#    bltu $t4,$t3,gCinnerCopy1
17889##...sltu $at,$t4,$t3
17893##...bne $at,$zero,17872

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
17896#    sw $zero,-8($t1) # 0 in first header-slot
17900#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
17904#    sw $t2,4($t0)
17908#    lw $zero,-8($t2)
17912#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
17916#    j gcTestIterDone1

17920:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
17920#    subu $t0,$t0,$t1
17924#    subu $t0,$t0,3

17928:  gcTestIterDone1:
17928#    bgeu $t0,$sp,gcStackCopyLoop
17929##...sltu $at,$t0,$sp
17933##...beq $at,$zero,17744

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
17936#    lw $t1,cur_seg
17940#    la $t0,seg0_start
17944#    beq $t1,$zero,gcSkip4
17948#    la $t0,seg1_start
17949##...lui $t0,16
17953##...addiu $t0,$t0,19732


17956:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
17956#    bgeu $t0,$s3,gcFinishUp
17957##...sltu $at,$t0,$s3
17961##...beq $at,$zero,18252

    ###### begin outer loop to copy all non-stack-direct objects ######

17964:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
17964#    lw $t1,($t0) # (what will be) first header word for current object
17968#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
17972#    bge $t2,$zero,gcSkip4a # are there hash bits?
17973##...slt $at,$t2,$zero
17977##...beq $at,$zero,17992
17980#    and $t2,0xff # mask off hash bits
17981##...lui $at,0
17985##...ori $at,$at,0xff
17989##...and $t2,$t2,$at
17992:gcSkip4a:    
17992#    sll $t2,$t2,2 # # data bytes
17996#    addu $t2,$t2,8 # to skip header words
18000#    addu $t2,$t0,$t2 # pointer to new object
18004#    lw $t3,-8($t2) # word to swap
18008#    sw $t1,-8($t2) # store header word
18012#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
18016#    lw $t1,-12($t2) # vtable pointer
18020#    li $t0,dataArrayVTableStart # address of vtable for first data array
18024#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
18025##...slt $at,$t1,$t0
18029##...bne $at,$zero,18048

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
18032:  skipToNextObj:
18032#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
18036#    sll $t1,$t1,2 # convert to byte-count
18040#    addu $t0,$t2,$t1 # skip over object
18044#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
18048:  gcNotDataArray:
18048#    lw $t3,-4($t2) # # object words (negative treated as zero)
18052#    bge $t3,$zero,gcH2Neg2
18053##...slt $at,$t3,$zero
18057##...beq $at,$zero,18064
18060#    move $t3,$zero
18064:  gcH2Neg2:
18064#    sll $t3,$t3,2 # # object bytes
18068#    move $t0,$t2 # address of first pointer in object
18072#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
18076#    beq $t0,$s1,gcTestIterDone2
    
18080:  gcNextPointerInObject:
    # get pointer from object
18080#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
18084#    bleu $t1,$t6,gcGoNextPointerSlot
18085##...sltu $at,$t6,$t1
18089##...beq $at,$zero,18232
18092#    bgtu $t1,$t7,gcGoNextPointerSlot
18093##...sltu $at,$t7,$t1
18097##...bne $at,$zero,18232

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
18100#    lw $t8,-8($t1) # possible forwarding tag
18104#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
18108#    lw $t8,-4($t1) # forwarding pointer: object's new address
18112#    sw $t8,($t0) # update pointer in object
18116#    j gcGoNextPointerSlot # do next iteration

18120:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
18120#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
18121##...slt $at,$t8,$zero
18125##...beq $at,$zero,18140
18128#    and $t8,0xff # mask off hash bits
18129##...lui $at,0
18133##...ori $at,$at,0xff
18137##...and $t8,$t8,$at

18140:  gcSkip5:
18140#    sll $t8,$t8,2 # bytes in negative-offset portion ...
18144#    addu $t8,$t8,8 # ... add in bytes for header-words
18148#    subu $t4,$t1,$t8 # address of first word of source object
18152#    lw $t3,-4($t1) # # words in positive-offset portion
18156#    bge $t3,$zero,gcNoNeg
18157##...slt $at,$t3,$zero
18161##...beq $at,$zero,18168
18164#    move $t3,$zero # negative treated as zero
18168:  gcNoNeg:
18168#    sll $t3,$t3,2 # bytes in negative-offset portion
18172#    addu $t3,$t3,$t1 # address one word past last word of source

18176#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
18180#    lw $s0,($t4)
18184#    lw $t9,-8($t1)
18188#    sw $t9,($t4)
18192#    sw $s0,-8($t1)

    # copy all source bytes to the target
18196:  gCinnerCopy2:
18196#    lw $s0,($t4)
18200#    sw $s0,($s3)
18204#    addu $t4,$t4,4
18208#    addu $s3,$s3,4
18212#    bltu $t4,$t3,gCinnerCopy2
18213##...sltu $at,$t4,$t3
18217##...bne $at,$zero,18196

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
18220#    sw $zero,-8($t1) # 0 in first header-slot
18224#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
18228#    sw $t8,($t0)

18232:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
18232#    addu $t0,$t0,4
18236#    bltu $t0,$s1,gcNextPointerInObject
18237##...sltu $at,$t0,$s1
18241##...bne $at,$zero,18080

18244:  gcTestIterDone2:
18244#    bltu $t0,$s3,gcHeapCopyLoop
18245##...sltu $at,$t0,$s3
18249##...bne $at,$zero,17964

    ###### end outer loop to copy all non-stack-direct objects ######

18252:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
18252#    lw $s2,($sp)
18256#    addu $sp,$sp,4

    # mark us as having already GC'd
18260#    move $t5,$s5

    # go try and allocate again
18264#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
18268:vm_init:

    # mark bottom of stack
18268#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
18272#    move $s2,$zero

    #set up the "five" register
18276#    li $s5,5

18280#    la $s3,seg0_start
18284#    la $s4,seg0_end
18285##...lui $s4,16
18289##...addiu $s4,$s4,19732
    
    # return
18292#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18296:divide:
    # get parameters; abort if divisor zero
18296#    lw $t0,($sp)
18300#    lw $t1,8($sp)
18304#    beq $t0,$zero,divByZeroError
    
    # perform division
18308#    div $t1,$t0
18312#    mflo $t0

    # store result, adjust stack and return
18316#    addu $sp,$sp,8 # adjust stack
18320#    sw $t0,($sp) # store result
18324#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18328:remainder:
    # get parameters; abort if divisor zero
18328#    lw $t0,($sp)
18332#    lw $t1,8($sp)
18336#    beq $t0,$zero,divByZeroError
    
    # perform division
18340#    div $t1,$t0
18344#    mfhi $t0

    # store result, adjust stack and return
18348#    addu $sp,$sp,8 # adjust stack
18352#    sw $t0,($sp) # store result
18356#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
18360:checkCast:
    # get object, allow immediately if null
18360#    lw $t2,($sp)
18364#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
18368#    lw $t2,-12($t2) # vtable address
18372#    bge $t2,$t1,castException
18373##...slt $at,$t2,$t1
18377##...beq $at,$zero,18548
18380#    blt $t2,$t0,castException
18381##...slt $at,$t2,$t0
18385##...bne $at,$zero,18548
    
    # return, leaving object unchanged on stack
18388:  checkCastReturn:    
18388#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
18392:instanceOf:
    # get object, go return false if null
18392#    lw $t2,($sp)
18396#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
18400#    lw $t2,-12($t2) # vtable address
18404#    sge $t0,$t2,$t0 # are we >= the lower limit?
18405##...slt $t0,$t2,$t0
18409##...xori $t0,$t0,0x1
18412#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
18416#    and $t2,$t0,$t1
18420#    sw $t2,($sp)
18424:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
18424#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

18428:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
18428#    li $v0,4 # syscall-code for print-string
18432#    syscall
18436:exit:
    # print termination message
18436#    li $v0,4 # syscall-code for print-string
18440#    la $a0,exitString
18444#    syscall

    # print number of garbage collections
18448#    li $v0,4 # syscall-code for print-string
18452#    la $a0,gcCountMsg
18456#    syscall # print "Number of ..."
18460#    lw $a0,gcCount # number of GC's
18464#    li $v0,1 # code for print-int
18468#    syscall
18472#    li $v0,4 # syscall-code for print-string
18476#    la $a0,newlineString
18480#    syscall # print newline

    # terminate execution
18484#    li $v0,10 #syscall-code for "exit"
18488#    syscall

18492:outOfHeapMemory:
18492#    la $a0,heapMemoryMsg
18496#    j exitError
18500:divByZeroError:
18500#    la $a0,divByZeroMsg
18504#    j exitError
18508:strIndexOutOfBounds:
18508#    la $a0,strIndexOutOfBoundsMsg
18512#    j exitError
18516:arrayIndexOutOfBounds:
18516#    la $a0,arrayIndexOutOfBoundsMsg
18520#    j exitError
18524:arraySizeOutOfBounds:
18524#    la $a0,arraySizeOutOfBoundsMsg
18528#    j exitError
18532:nullPtrException:
18532#    la $a0,nullPtrExceptionMsg
18536#    j exitError
18540:badIntegerFormat:
18540#    la $a0,badIntegerFormatMsg
18544#    j exitError
18548:castException:
18548#    la $a0,castExceptionMsg
18552#    j exitError
############## data section ################
    .data
19360:hexChars:
    .ascii "0123456789abcdef"
    .align 2
19376:cur_seg:
    .word 0

19380:lastCharRead:
    .word -2 # -2 => no buffered character
19384:prevHashConstant:
    .word 0x2785173c
19388:gcCount:
    .word 0

19392:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
19419:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
19442:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
19477:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
19511:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
19544:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
19575:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
19623:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
19644:gcMsg: 
      .asciiz "\nGC!\n"
19650:gcCountMsg: 
      .asciiz "Number of garbage collections: "

19682:nullStr:
    .asciiz "null"
19687:trueString:
    .asciiz "true"
19692:falseString:
    .asciiz "false"
19698:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
19726:newlineString:
    .asciiz "\n"
    
    .align 2
19728:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

19732:seg0_start:
    .space 0x100000
1068308:seg0_end:
1068308:seg1_start:
    .space 0x100000
2116884:seg1_end:
